schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type CouncilTax {
  CouncilTaxBand: String
  LocalAuthority: String
  PropertyAddress: String
}

input CouncilTaxSearchCriteriaInput {
  address: String
  postcode: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bpchar

"""
Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'.
"""
input bpchar_comparison_exp {
  _eq: bpchar
  _gt: bpchar
  _gte: bpchar

  """does the column match the given case-insensitive pattern"""
  _ilike: bpchar
  _in: [bpchar!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: bpchar
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: bpchar
  _lt: bpchar
  _lte: bpchar
  _neq: bpchar

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: bpchar
  _nin: [bpchar!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: bpchar

  """does the column NOT match the given pattern"""
  _nlike: bpchar

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: bpchar

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: bpchar

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: bpchar

  """does the column match the given SQL regular expression"""
  _similar: bpchar
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

scalar geography

input geography_cast_exp {
  geometry: geometry_comparison_exp
}

"""
Boolean expression to compare columns of type "geography". All fields are combined with logical 'AND'.
"""
input geography_comparison_exp {
  _cast: geography_cast_exp
  _eq: geography
  _gt: geography
  _gte: geography
  _in: [geography!]
  _is_null: Boolean
  _lt: geography
  _lte: geography
  _neq: geography
  _nin: [geography!]

  """is the column within a given distance from the given geography value"""
  _st_d_within: st_d_within_geography_input

  """does the column spatially intersect the given geography value"""
  _st_intersects: geography
}

scalar geometry

input geometry_cast_exp {
  geography: geography_comparison_exp
}

"""
Boolean expression to compare columns of type "geometry". All fields are combined with logical 'AND'.
"""
input geometry_comparison_exp {
  _cast: geometry_cast_exp
  _eq: geometry
  _gt: geometry
  _gte: geometry
  _in: [geometry!]
  _is_null: Boolean
  _lt: geometry
  _lte: geometry
  _neq: geometry
  _nin: [geometry!]

  """is the column within a given 3D distance from the given geometry value"""
  _st_3d_d_within: st_d_within_input

  """does the column spatially intersect the given geometry value in 3D"""
  _st_3d_intersects: geometry

  """does the column contain the given geometry value"""
  _st_contains: geometry

  """does the column cross the given geometry value"""
  _st_crosses: geometry

  """is the column within a given distance from the given geometry value"""
  _st_d_within: st_d_within_input

  """
  is the column equal to given geometry value (directionality is ignored)
  """
  _st_equals: geometry

  """does the column spatially intersect the given geometry value"""
  _st_intersects: geometry

  """
  does the column 'spatially overlap' (intersect but not completely contain) the given geometry value
  """
  _st_overlaps: geometry

  """
  does the column have atleast one point in common with the given geometry value
  """
  _st_touches: geometry

  """is the column contained in the given geometry value"""
  _st_within: geometry
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "uk_data.aggregated_charging_point_data"
  """
  delete_uk_data_aggregated_charging_point_data(
    """filter the rows which have to be deleted"""
    where: uk_data_aggregated_charging_point_data_bool_exp!
  ): uk_data_aggregated_charging_point_data_mutation_response

  """
  delete data from the table: "uk_data.aggregated_functional_site_data"
  """
  delete_uk_data_aggregated_functional_site_data(
    """filter the rows which have to be deleted"""
    where: uk_data_aggregated_functional_site_data_bool_exp!
  ): uk_data_aggregated_functional_site_data_mutation_response

  """
  delete data from the table: "uk_data.aggregated_important_building_data"
  """
  delete_uk_data_aggregated_important_building_data(
    """filter the rows which have to be deleted"""
    where: uk_data_aggregated_important_building_data_bool_exp!
  ): uk_data_aggregated_important_building_data_mutation_response

  """
  delete data from the table: "uk_data.aggregated_railway_station_data"
  """
  delete_uk_data_aggregated_railway_station_data(
    """filter the rows which have to be deleted"""
    where: uk_data_aggregated_railway_station_data_bool_exp!
  ): uk_data_aggregated_railway_station_data_mutation_response

  """
  delete data from the table: "uk_data.aggregated_sites_nearby_data"
  """
  delete_uk_data_aggregated_sites_nearby_data(
    """filter the rows which have to be deleted"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp!
  ): uk_data_aggregated_sites_nearby_data_mutation_response

  """
  delete data from the table: "uk_data.building"
  """
  delete_uk_data_building(
    """filter the rows which have to be deleted"""
    where: uk_data_building_bool_exp!
  ): uk_data_building_mutation_response

  """
  delete single row from the table: "uk_data.building"
  """
  delete_uk_data_building_by_pk(fid: Int!): uk_data_building

  """
  delete data from the table: "uk_data.car_charging_point"
  """
  delete_uk_data_car_charging_point(
    """filter the rows which have to be deleted"""
    where: uk_data_car_charging_point_bool_exp!
  ): uk_data_car_charging_point_mutation_response

  """
  delete single row from the table: "uk_data.car_charging_point"
  """
  delete_uk_data_car_charging_point_by_pk(fid: Int!): uk_data_car_charging_point

  """
  delete data from the table: "uk_data.city_details"
  """
  delete_uk_data_city_details(
    """filter the rows which have to be deleted"""
    where: uk_data_city_details_bool_exp!
  ): uk_data_city_details_mutation_response

  """
  delete data from the table: "uk_data.county_details"
  """
  delete_uk_data_county_details(
    """filter the rows which have to be deleted"""
    where: uk_data_county_details_bool_exp!
  ): uk_data_county_details_mutation_response

  """
  delete data from the table: "uk_data.demand_stats"
  """
  delete_uk_data_demand_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_demand_stats_bool_exp!
  ): uk_data_demand_stats_mutation_response

  """
  delete single row from the table: "uk_data.demand_stats"
  """
  delete_uk_data_demand_stats_by_pk(postcode: String!): uk_data_demand_stats

  """
  delete data from the table: "uk_data.demographics"
  """
  delete_uk_data_demographics(
    """filter the rows which have to be deleted"""
    where: uk_data_demographics_bool_exp!
  ): uk_data_demographics_mutation_response

  """
  delete single row from the table: "uk_data.demographics"
  """
  delete_uk_data_demographics_by_pk(postcode: String!): uk_data_demographics

  """
  delete data from the table: "uk_data.electricity_transmission_line"
  """
  delete_uk_data_electricity_transmission_line(
    """filter the rows which have to be deleted"""
    where: uk_data_electricity_transmission_line_bool_exp!
  ): uk_data_electricity_transmission_line_mutation_response

  """
  delete single row from the table: "uk_data.electricity_transmission_line"
  """
  delete_uk_data_electricity_transmission_line_by_pk(fid: Int!): uk_data_electricity_transmission_line

  """
  delete data from the table: "uk_data.epc_certificates"
  """
  delete_uk_data_epc_certificates(
    """filter the rows which have to be deleted"""
    where: uk_data_epc_certificates_bool_exp!
  ): uk_data_epc_certificates_mutation_response

  """
  delete single row from the table: "uk_data.epc_certificates"
  """
  delete_uk_data_epc_certificates_by_pk(lmk_key: String!): uk_data_epc_certificates

  """
  delete data from the table: "uk_data.epc_recommendations"
  """
  delete_uk_data_epc_recommendations(
    """filter the rows which have to be deleted"""
    where: uk_data_epc_recommendations_bool_exp!
  ): uk_data_epc_recommendations_mutation_response

  """
  delete data from the table: "uk_data.flyway_schema_history"
  """
  delete_uk_data_flyway_schema_history(
    """filter the rows which have to be deleted"""
    where: uk_data_flyway_schema_history_bool_exp!
  ): uk_data_flyway_schema_history_mutation_response

  """
  delete single row from the table: "uk_data.flyway_schema_history"
  """
  delete_uk_data_flyway_schema_history_by_pk(installed_rank: Int!): uk_data_flyway_schema_history

  """
  delete data from the table: "uk_data.foreshore"
  """
  delete_uk_data_foreshore(
    """filter the rows which have to be deleted"""
    where: uk_data_foreshore_bool_exp!
  ): uk_data_foreshore_mutation_response

  """
  delete single row from the table: "uk_data.foreshore"
  """
  delete_uk_data_foreshore_by_pk(fid: Int!): uk_data_foreshore

  """
  delete data from the table: "uk_data.functional_site"
  """
  delete_uk_data_functional_site(
    """filter the rows which have to be deleted"""
    where: uk_data_functional_site_bool_exp!
  ): uk_data_functional_site_mutation_response

  """
  delete data from the table: "uk_data.glasshouse"
  """
  delete_uk_data_glasshouse(
    """filter the rows which have to be deleted"""
    where: uk_data_glasshouse_bool_exp!
  ): uk_data_glasshouse_mutation_response

  """
  delete single row from the table: "uk_data.glasshouse"
  """
  delete_uk_data_glasshouse_by_pk(fid: Int!): uk_data_glasshouse

  """
  delete data from the table: "uk_data.growth_stats"
  """
  delete_uk_data_growth_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_growth_stats_bool_exp!
  ): uk_data_growth_stats_mutation_response

  """
  delete single row from the table: "uk_data.growth_stats"
  """
  delete_uk_data_growth_stats_by_pk(postcode: String!): uk_data_growth_stats

  """
  delete data from the table: "uk_data.hmo_stats"
  """
  delete_uk_data_hmo_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_hmo_stats_bool_exp!
  ): uk_data_hmo_stats_mutation_response

  """
  delete single row from the table: "uk_data.hmo_stats"
  """
  delete_uk_data_hmo_stats_by_pk(outcode: String!): uk_data_hmo_stats

  """
  delete data from the table: "uk_data.house_price_index"
  """
  delete_uk_data_house_price_index(
    """filter the rows which have to be deleted"""
    where: uk_data_house_price_index_bool_exp!
  ): uk_data_house_price_index_mutation_response

  """
  delete single row from the table: "uk_data.house_price_index"
  """
  delete_uk_data_house_price_index_by_pk(areacode: String!, date: String!, regionname: String!): uk_data_house_price_index

  """
  delete data from the table: "uk_data.important_building"
  """
  delete_uk_data_important_building(
    """filter the rows which have to be deleted"""
    where: uk_data_important_building_bool_exp!
  ): uk_data_important_building_mutation_response

  """
  delete single row from the table: "uk_data.important_building"
  """
  delete_uk_data_important_building_by_pk(fid: Int!): uk_data_important_building

  """
  delete data from the table: "uk_data.motorway_junction"
  """
  delete_uk_data_motorway_junction(
    """filter the rows which have to be deleted"""
    where: uk_data_motorway_junction_bool_exp!
  ): uk_data_motorway_junction_mutation_response

  """
  delete single row from the table: "uk_data.motorway_junction"
  """
  delete_uk_data_motorway_junction_by_pk(fid: Int!): uk_data_motorway_junction

  """
  delete data from the table: "uk_data.named_place"
  """
  delete_uk_data_named_place(
    """filter the rows which have to be deleted"""
    where: uk_data_named_place_bool_exp!
  ): uk_data_named_place_mutation_response

  """
  delete single row from the table: "uk_data.named_place"
  """
  delete_uk_data_named_place_by_pk(fid: Int!): uk_data_named_place

  """
  delete data from the table: "uk_data.osmaps_data"
  """
  delete_uk_data_osmaps_data(
    """filter the rows which have to be deleted"""
    where: uk_data_osmaps_data_bool_exp!
  ): uk_data_osmaps_data_mutation_response

  """
  delete single row from the table: "uk_data.osmaps_data"
  """
  delete_uk_data_osmaps_data_by_pk(id: bigint!): uk_data_osmaps_data

  """
  delete data from the table: "uk_data.outcode_stats"
  """
  delete_uk_data_outcode_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_outcode_stats_bool_exp!
  ): uk_data_outcode_stats_mutation_response

  """
  delete single row from the table: "uk_data.outcode_stats"
  """
  delete_uk_data_outcode_stats_by_pk(outcode: String!): uk_data_outcode_stats

  """
  delete data from the table: "uk_data.police_force_neighbourhoods"
  """
  delete_uk_data_police_force_neighbourhoods(
    """filter the rows which have to be deleted"""
    where: uk_data_police_force_neighbourhoods_bool_exp!
  ): uk_data_police_force_neighbourhoods_mutation_response

  """
  delete single row from the table: "uk_data.police_force_neighbourhoods"
  """
  delete_uk_data_police_force_neighbourhoods_by_pk(neighbourhood: String!, police_force_id: String!): uk_data_police_force_neighbourhoods

  """
  delete data from the table: "uk_data.police_forces"
  """
  delete_uk_data_police_forces(
    """filter the rows which have to be deleted"""
    where: uk_data_police_forces_bool_exp!
  ): uk_data_police_forces_mutation_response

  """
  delete single row from the table: "uk_data.police_forces"
  """
  delete_uk_data_police_forces_by_pk(id: String!): uk_data_police_forces

  """
  delete data from the table: "uk_data.population_projection_by_area"
  """
  delete_uk_data_population_projection_by_area(
    """filter the rows which have to be deleted"""
    where: uk_data_population_projection_by_area_bool_exp!
  ): uk_data_population_projection_by_area_mutation_response

  """
  delete single row from the table: "uk_data.population_projection_by_area"
  """
  delete_uk_data_population_projection_by_area_by_pk(AREA: String!): uk_data_population_projection_by_area

  """
  delete data from the table: "uk_data.population_projection_by_country"
  """
  delete_uk_data_population_projection_by_country(
    """filter the rows which have to be deleted"""
    where: uk_data_population_projection_by_country_bool_exp!
  ): uk_data_population_projection_by_country_mutation_response

  """
  delete single row from the table: "uk_data.population_projection_by_country"
  """
  delete_uk_data_population_projection_by_country_by_pk(country: String!): uk_data_population_projection_by_country

  """
  delete data from the table: "uk_data.price_paid_data"
  """
  delete_uk_data_price_paid_data(
    """filter the rows which have to be deleted"""
    where: uk_data_price_paid_data_bool_exp!
  ): uk_data_price_paid_data_mutation_response

  """
  delete single row from the table: "uk_data.price_paid_data"
  """
  delete_uk_data_price_paid_data_by_pk(deed_date: timestamp!, unique_id: String!): uk_data_price_paid_data

  """
  delete data from the table: "uk_data.property_records"
  """
  delete_uk_data_property_records(
    """filter the rows which have to be deleted"""
    where: uk_data_property_records_bool_exp!
  ): uk_data_property_records_mutation_response

  """
  delete single row from the table: "uk_data.property_records"
  """
  delete_uk_data_property_records_by_pk(uprn: bigint!): uk_data_property_records

  """
  delete data from the table: "uk_data.railway_station"
  """
  delete_uk_data_railway_station(
    """filter the rows which have to be deleted"""
    where: uk_data_railway_station_bool_exp!
  ): uk_data_railway_station_mutation_response

  """
  delete single row from the table: "uk_data.railway_station"
  """
  delete_uk_data_railway_station_by_pk(fid: Int!): uk_data_railway_station

  """
  delete data from the table: "uk_data.railway_track"
  """
  delete_uk_data_railway_track(
    """filter the rows which have to be deleted"""
    where: uk_data_railway_track_bool_exp!
  ): uk_data_railway_track_mutation_response

  """
  delete single row from the table: "uk_data.railway_track"
  """
  delete_uk_data_railway_track_by_pk(fid: Int!): uk_data_railway_track

  """
  delete data from the table: "uk_data.railway_tunnel"
  """
  delete_uk_data_railway_tunnel(
    """filter the rows which have to be deleted"""
    where: uk_data_railway_tunnel_bool_exp!
  ): uk_data_railway_tunnel_mutation_response

  """
  delete single row from the table: "uk_data.railway_tunnel"
  """
  delete_uk_data_railway_tunnel_by_pk(fid: Int!): uk_data_railway_tunnel

  """
  delete data from the table: "uk_data.rent_demand_stats"
  """
  delete_uk_data_rent_demand_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_rent_demand_stats_bool_exp!
  ): uk_data_rent_demand_stats_mutation_response

  """
  delete single row from the table: "uk_data.rent_demand_stats"
  """
  delete_uk_data_rent_demand_stats_by_pk(outcode: String!): uk_data_rent_demand_stats

  """
  delete data from the table: "uk_data.road"
  """
  delete_uk_data_road(
    """filter the rows which have to be deleted"""
    where: uk_data_road_bool_exp!
  ): uk_data_road_mutation_response

  """
  delete single row from the table: "uk_data.road"
  """
  delete_uk_data_road_by_pk(fid: Int!): uk_data_road

  """
  delete data from the table: "uk_data.road_tunnel"
  """
  delete_uk_data_road_tunnel(
    """filter the rows which have to be deleted"""
    where: uk_data_road_tunnel_bool_exp!
  ): uk_data_road_tunnel_mutation_response

  """
  delete single row from the table: "uk_data.road_tunnel"
  """
  delete_uk_data_road_tunnel_by_pk(fid: Int!): uk_data_road_tunnel

  """
  delete data from the table: "uk_data.roundabout"
  """
  delete_uk_data_roundabout(
    """filter the rows which have to be deleted"""
    where: uk_data_roundabout_bool_exp!
  ): uk_data_roundabout_mutation_response

  """
  delete single row from the table: "uk_data.roundabout"
  """
  delete_uk_data_roundabout_by_pk(fid: Int!): uk_data_roundabout

  """
  delete data from the table: "uk_data.schools"
  """
  delete_uk_data_schools(
    """filter the rows which have to be deleted"""
    where: uk_data_schools_bool_exp!
  ): uk_data_schools_mutation_response

  """
  delete single row from the table: "uk_data.schools"
  """
  delete_uk_data_schools_by_pk(postcode: String!): uk_data_schools

  """
  delete data from the table: "uk_data.street_crimes"
  """
  delete_uk_data_street_crimes(
    """filter the rows which have to be deleted"""
    where: uk_data_street_crimes_bool_exp!
  ): uk_data_street_crimes_mutation_response

  """
  delete single row from the table: "uk_data.street_crimes"
  """
  delete_uk_data_street_crimes_by_pk(crime_id: String!): uk_data_street_crimes

  """
  delete data from the table: "uk_data.street_crimes_with_distance"
  """
  delete_uk_data_street_crimes_with_distance(
    """filter the rows which have to be deleted"""
    where: uk_data_street_crimes_with_distance_bool_exp!
  ): uk_data_street_crimes_with_distance_mutation_response

  """
  delete data from the table: "uk_data.surface_water_area"
  """
  delete_uk_data_surface_water_area(
    """filter the rows which have to be deleted"""
    where: uk_data_surface_water_area_bool_exp!
  ): uk_data_surface_water_area_mutation_response

  """
  delete single row from the table: "uk_data.surface_water_area"
  """
  delete_uk_data_surface_water_area_by_pk(fid: Int!): uk_data_surface_water_area

  """
  delete data from the table: "uk_data.surface_water_line"
  """
  delete_uk_data_surface_water_line(
    """filter the rows which have to be deleted"""
    where: uk_data_surface_water_line_bool_exp!
  ): uk_data_surface_water_line_mutation_response

  """
  delete single row from the table: "uk_data.surface_water_line"
  """
  delete_uk_data_surface_water_line_by_pk(fid: Int!): uk_data_surface_water_line

  """
  delete data from the table: "uk_data.tidal_boundary"
  """
  delete_uk_data_tidal_boundary(
    """filter the rows which have to be deleted"""
    where: uk_data_tidal_boundary_bool_exp!
  ): uk_data_tidal_boundary_mutation_response

  """
  delete single row from the table: "uk_data.tidal_boundary"
  """
  delete_uk_data_tidal_boundary_by_pk(fid: Int!): uk_data_tidal_boundary

  """
  delete data from the table: "uk_data.tidal_water"
  """
  delete_uk_data_tidal_water(
    """filter the rows which have to be deleted"""
    where: uk_data_tidal_water_bool_exp!
  ): uk_data_tidal_water_mutation_response

  """
  delete single row from the table: "uk_data.tidal_water"
  """
  delete_uk_data_tidal_water_by_pk(fid: Int!): uk_data_tidal_water

  """
  delete data from the table: "uk_data.woodland"
  """
  delete_uk_data_woodland(
    """filter the rows which have to be deleted"""
    where: uk_data_woodland_bool_exp!
  ): uk_data_woodland_mutation_response

  """
  delete single row from the table: "uk_data.woodland"
  """
  delete_uk_data_woodland_by_pk(fid: Int!): uk_data_woodland

  """
  delete data from the table: "uk_data.yield_stats"
  """
  delete_uk_data_yield_stats(
    """filter the rows which have to be deleted"""
    where: uk_data_yield_stats_bool_exp!
  ): uk_data_yield_stats_mutation_response

  """
  delete single row from the table: "uk_data.yield_stats"
  """
  delete_uk_data_yield_stats_by_pk(postcode: String!): uk_data_yield_stats

  """
  insert data into the table: "uk_data.aggregated_charging_point_data"
  """
  insert_uk_data_aggregated_charging_point_data(
    """the rows to be inserted"""
    objects: [uk_data_aggregated_charging_point_data_insert_input!]!
  ): uk_data_aggregated_charging_point_data_mutation_response

  """
  insert a single row into the table: "uk_data.aggregated_charging_point_data"
  """
  insert_uk_data_aggregated_charging_point_data_one(
    """the row to be inserted"""
    object: uk_data_aggregated_charging_point_data_insert_input!
  ): uk_data_aggregated_charging_point_data

  """
  insert data into the table: "uk_data.aggregated_functional_site_data"
  """
  insert_uk_data_aggregated_functional_site_data(
    """the rows to be inserted"""
    objects: [uk_data_aggregated_functional_site_data_insert_input!]!
  ): uk_data_aggregated_functional_site_data_mutation_response

  """
  insert a single row into the table: "uk_data.aggregated_functional_site_data"
  """
  insert_uk_data_aggregated_functional_site_data_one(
    """the row to be inserted"""
    object: uk_data_aggregated_functional_site_data_insert_input!
  ): uk_data_aggregated_functional_site_data

  """
  insert data into the table: "uk_data.aggregated_important_building_data"
  """
  insert_uk_data_aggregated_important_building_data(
    """the rows to be inserted"""
    objects: [uk_data_aggregated_important_building_data_insert_input!]!
  ): uk_data_aggregated_important_building_data_mutation_response

  """
  insert a single row into the table: "uk_data.aggregated_important_building_data"
  """
  insert_uk_data_aggregated_important_building_data_one(
    """the row to be inserted"""
    object: uk_data_aggregated_important_building_data_insert_input!
  ): uk_data_aggregated_important_building_data

  """
  insert data into the table: "uk_data.aggregated_railway_station_data"
  """
  insert_uk_data_aggregated_railway_station_data(
    """the rows to be inserted"""
    objects: [uk_data_aggregated_railway_station_data_insert_input!]!
  ): uk_data_aggregated_railway_station_data_mutation_response

  """
  insert a single row into the table: "uk_data.aggregated_railway_station_data"
  """
  insert_uk_data_aggregated_railway_station_data_one(
    """the row to be inserted"""
    object: uk_data_aggregated_railway_station_data_insert_input!
  ): uk_data_aggregated_railway_station_data

  """
  insert data into the table: "uk_data.aggregated_sites_nearby_data"
  """
  insert_uk_data_aggregated_sites_nearby_data(
    """the rows to be inserted"""
    objects: [uk_data_aggregated_sites_nearby_data_insert_input!]!
  ): uk_data_aggregated_sites_nearby_data_mutation_response

  """
  insert a single row into the table: "uk_data.aggregated_sites_nearby_data"
  """
  insert_uk_data_aggregated_sites_nearby_data_one(
    """the row to be inserted"""
    object: uk_data_aggregated_sites_nearby_data_insert_input!
  ): uk_data_aggregated_sites_nearby_data

  """
  insert data into the table: "uk_data.building"
  """
  insert_uk_data_building(
    """the rows to be inserted"""
    objects: [uk_data_building_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_building_on_conflict
  ): uk_data_building_mutation_response

  """
  insert a single row into the table: "uk_data.building"
  """
  insert_uk_data_building_one(
    """the row to be inserted"""
    object: uk_data_building_insert_input!

    """upsert condition"""
    on_conflict: uk_data_building_on_conflict
  ): uk_data_building

  """
  insert data into the table: "uk_data.car_charging_point"
  """
  insert_uk_data_car_charging_point(
    """the rows to be inserted"""
    objects: [uk_data_car_charging_point_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_car_charging_point_on_conflict
  ): uk_data_car_charging_point_mutation_response

  """
  insert a single row into the table: "uk_data.car_charging_point"
  """
  insert_uk_data_car_charging_point_one(
    """the row to be inserted"""
    object: uk_data_car_charging_point_insert_input!

    """upsert condition"""
    on_conflict: uk_data_car_charging_point_on_conflict
  ): uk_data_car_charging_point

  """
  insert data into the table: "uk_data.city_details"
  """
  insert_uk_data_city_details(
    """the rows to be inserted"""
    objects: [uk_data_city_details_insert_input!]!
  ): uk_data_city_details_mutation_response

  """
  insert a single row into the table: "uk_data.city_details"
  """
  insert_uk_data_city_details_one(
    """the row to be inserted"""
    object: uk_data_city_details_insert_input!
  ): uk_data_city_details

  """
  insert data into the table: "uk_data.county_details"
  """
  insert_uk_data_county_details(
    """the rows to be inserted"""
    objects: [uk_data_county_details_insert_input!]!
  ): uk_data_county_details_mutation_response

  """
  insert a single row into the table: "uk_data.county_details"
  """
  insert_uk_data_county_details_one(
    """the row to be inserted"""
    object: uk_data_county_details_insert_input!
  ): uk_data_county_details

  """
  insert data into the table: "uk_data.demand_stats"
  """
  insert_uk_data_demand_stats(
    """the rows to be inserted"""
    objects: [uk_data_demand_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_demand_stats_on_conflict
  ): uk_data_demand_stats_mutation_response

  """
  insert a single row into the table: "uk_data.demand_stats"
  """
  insert_uk_data_demand_stats_one(
    """the row to be inserted"""
    object: uk_data_demand_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_demand_stats_on_conflict
  ): uk_data_demand_stats

  """
  insert data into the table: "uk_data.demographics"
  """
  insert_uk_data_demographics(
    """the rows to be inserted"""
    objects: [uk_data_demographics_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_demographics_on_conflict
  ): uk_data_demographics_mutation_response

  """
  insert a single row into the table: "uk_data.demographics"
  """
  insert_uk_data_demographics_one(
    """the row to be inserted"""
    object: uk_data_demographics_insert_input!

    """upsert condition"""
    on_conflict: uk_data_demographics_on_conflict
  ): uk_data_demographics

  """
  insert data into the table: "uk_data.electricity_transmission_line"
  """
  insert_uk_data_electricity_transmission_line(
    """the rows to be inserted"""
    objects: [uk_data_electricity_transmission_line_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_electricity_transmission_line_on_conflict
  ): uk_data_electricity_transmission_line_mutation_response

  """
  insert a single row into the table: "uk_data.electricity_transmission_line"
  """
  insert_uk_data_electricity_transmission_line_one(
    """the row to be inserted"""
    object: uk_data_electricity_transmission_line_insert_input!

    """upsert condition"""
    on_conflict: uk_data_electricity_transmission_line_on_conflict
  ): uk_data_electricity_transmission_line

  """
  insert data into the table: "uk_data.epc_certificates"
  """
  insert_uk_data_epc_certificates(
    """the rows to be inserted"""
    objects: [uk_data_epc_certificates_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_epc_certificates_on_conflict
  ): uk_data_epc_certificates_mutation_response

  """
  insert a single row into the table: "uk_data.epc_certificates"
  """
  insert_uk_data_epc_certificates_one(
    """the row to be inserted"""
    object: uk_data_epc_certificates_insert_input!

    """upsert condition"""
    on_conflict: uk_data_epc_certificates_on_conflict
  ): uk_data_epc_certificates

  """
  insert data into the table: "uk_data.epc_recommendations"
  """
  insert_uk_data_epc_recommendations(
    """the rows to be inserted"""
    objects: [uk_data_epc_recommendations_insert_input!]!
  ): uk_data_epc_recommendations_mutation_response

  """
  insert a single row into the table: "uk_data.epc_recommendations"
  """
  insert_uk_data_epc_recommendations_one(
    """the row to be inserted"""
    object: uk_data_epc_recommendations_insert_input!
  ): uk_data_epc_recommendations

  """
  insert data into the table: "uk_data.flyway_schema_history"
  """
  insert_uk_data_flyway_schema_history(
    """the rows to be inserted"""
    objects: [uk_data_flyway_schema_history_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_flyway_schema_history_on_conflict
  ): uk_data_flyway_schema_history_mutation_response

  """
  insert a single row into the table: "uk_data.flyway_schema_history"
  """
  insert_uk_data_flyway_schema_history_one(
    """the row to be inserted"""
    object: uk_data_flyway_schema_history_insert_input!

    """upsert condition"""
    on_conflict: uk_data_flyway_schema_history_on_conflict
  ): uk_data_flyway_schema_history

  """
  insert data into the table: "uk_data.foreshore"
  """
  insert_uk_data_foreshore(
    """the rows to be inserted"""
    objects: [uk_data_foreshore_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_foreshore_on_conflict
  ): uk_data_foreshore_mutation_response

  """
  insert a single row into the table: "uk_data.foreshore"
  """
  insert_uk_data_foreshore_one(
    """the row to be inserted"""
    object: uk_data_foreshore_insert_input!

    """upsert condition"""
    on_conflict: uk_data_foreshore_on_conflict
  ): uk_data_foreshore

  """
  insert data into the table: "uk_data.functional_site"
  """
  insert_uk_data_functional_site(
    """the rows to be inserted"""
    objects: [uk_data_functional_site_insert_input!]!
  ): uk_data_functional_site_mutation_response

  """
  insert a single row into the table: "uk_data.functional_site"
  """
  insert_uk_data_functional_site_one(
    """the row to be inserted"""
    object: uk_data_functional_site_insert_input!
  ): uk_data_functional_site

  """
  insert data into the table: "uk_data.glasshouse"
  """
  insert_uk_data_glasshouse(
    """the rows to be inserted"""
    objects: [uk_data_glasshouse_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_glasshouse_on_conflict
  ): uk_data_glasshouse_mutation_response

  """
  insert a single row into the table: "uk_data.glasshouse"
  """
  insert_uk_data_glasshouse_one(
    """the row to be inserted"""
    object: uk_data_glasshouse_insert_input!

    """upsert condition"""
    on_conflict: uk_data_glasshouse_on_conflict
  ): uk_data_glasshouse

  """
  insert data into the table: "uk_data.growth_stats"
  """
  insert_uk_data_growth_stats(
    """the rows to be inserted"""
    objects: [uk_data_growth_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_growth_stats_on_conflict
  ): uk_data_growth_stats_mutation_response

  """
  insert a single row into the table: "uk_data.growth_stats"
  """
  insert_uk_data_growth_stats_one(
    """the row to be inserted"""
    object: uk_data_growth_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_growth_stats_on_conflict
  ): uk_data_growth_stats

  """
  insert data into the table: "uk_data.hmo_stats"
  """
  insert_uk_data_hmo_stats(
    """the rows to be inserted"""
    objects: [uk_data_hmo_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_hmo_stats_on_conflict
  ): uk_data_hmo_stats_mutation_response

  """
  insert a single row into the table: "uk_data.hmo_stats"
  """
  insert_uk_data_hmo_stats_one(
    """the row to be inserted"""
    object: uk_data_hmo_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_hmo_stats_on_conflict
  ): uk_data_hmo_stats

  """
  insert data into the table: "uk_data.house_price_index"
  """
  insert_uk_data_house_price_index(
    """the rows to be inserted"""
    objects: [uk_data_house_price_index_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_house_price_index_on_conflict
  ): uk_data_house_price_index_mutation_response

  """
  insert a single row into the table: "uk_data.house_price_index"
  """
  insert_uk_data_house_price_index_one(
    """the row to be inserted"""
    object: uk_data_house_price_index_insert_input!

    """upsert condition"""
    on_conflict: uk_data_house_price_index_on_conflict
  ): uk_data_house_price_index

  """
  insert data into the table: "uk_data.important_building"
  """
  insert_uk_data_important_building(
    """the rows to be inserted"""
    objects: [uk_data_important_building_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_important_building_on_conflict
  ): uk_data_important_building_mutation_response

  """
  insert a single row into the table: "uk_data.important_building"
  """
  insert_uk_data_important_building_one(
    """the row to be inserted"""
    object: uk_data_important_building_insert_input!

    """upsert condition"""
    on_conflict: uk_data_important_building_on_conflict
  ): uk_data_important_building

  """
  insert data into the table: "uk_data.motorway_junction"
  """
  insert_uk_data_motorway_junction(
    """the rows to be inserted"""
    objects: [uk_data_motorway_junction_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_motorway_junction_on_conflict
  ): uk_data_motorway_junction_mutation_response

  """
  insert a single row into the table: "uk_data.motorway_junction"
  """
  insert_uk_data_motorway_junction_one(
    """the row to be inserted"""
    object: uk_data_motorway_junction_insert_input!

    """upsert condition"""
    on_conflict: uk_data_motorway_junction_on_conflict
  ): uk_data_motorway_junction

  """
  insert data into the table: "uk_data.named_place"
  """
  insert_uk_data_named_place(
    """the rows to be inserted"""
    objects: [uk_data_named_place_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_named_place_on_conflict
  ): uk_data_named_place_mutation_response

  """
  insert a single row into the table: "uk_data.named_place"
  """
  insert_uk_data_named_place_one(
    """the row to be inserted"""
    object: uk_data_named_place_insert_input!

    """upsert condition"""
    on_conflict: uk_data_named_place_on_conflict
  ): uk_data_named_place

  """
  insert data into the table: "uk_data.osmaps_data"
  """
  insert_uk_data_osmaps_data(
    """the rows to be inserted"""
    objects: [uk_data_osmaps_data_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_osmaps_data_on_conflict
  ): uk_data_osmaps_data_mutation_response

  """
  insert a single row into the table: "uk_data.osmaps_data"
  """
  insert_uk_data_osmaps_data_one(
    """the row to be inserted"""
    object: uk_data_osmaps_data_insert_input!

    """upsert condition"""
    on_conflict: uk_data_osmaps_data_on_conflict
  ): uk_data_osmaps_data

  """
  insert data into the table: "uk_data.outcode_stats"
  """
  insert_uk_data_outcode_stats(
    """the rows to be inserted"""
    objects: [uk_data_outcode_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_outcode_stats_on_conflict
  ): uk_data_outcode_stats_mutation_response

  """
  insert a single row into the table: "uk_data.outcode_stats"
  """
  insert_uk_data_outcode_stats_one(
    """the row to be inserted"""
    object: uk_data_outcode_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_outcode_stats_on_conflict
  ): uk_data_outcode_stats

  """
  insert data into the table: "uk_data.police_force_neighbourhoods"
  """
  insert_uk_data_police_force_neighbourhoods(
    """the rows to be inserted"""
    objects: [uk_data_police_force_neighbourhoods_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_police_force_neighbourhoods_on_conflict
  ): uk_data_police_force_neighbourhoods_mutation_response

  """
  insert a single row into the table: "uk_data.police_force_neighbourhoods"
  """
  insert_uk_data_police_force_neighbourhoods_one(
    """the row to be inserted"""
    object: uk_data_police_force_neighbourhoods_insert_input!

    """upsert condition"""
    on_conflict: uk_data_police_force_neighbourhoods_on_conflict
  ): uk_data_police_force_neighbourhoods

  """
  insert data into the table: "uk_data.police_forces"
  """
  insert_uk_data_police_forces(
    """the rows to be inserted"""
    objects: [uk_data_police_forces_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_police_forces_on_conflict
  ): uk_data_police_forces_mutation_response

  """
  insert a single row into the table: "uk_data.police_forces"
  """
  insert_uk_data_police_forces_one(
    """the row to be inserted"""
    object: uk_data_police_forces_insert_input!

    """upsert condition"""
    on_conflict: uk_data_police_forces_on_conflict
  ): uk_data_police_forces

  """
  insert data into the table: "uk_data.population_projection_by_area"
  """
  insert_uk_data_population_projection_by_area(
    """the rows to be inserted"""
    objects: [uk_data_population_projection_by_area_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_population_projection_by_area_on_conflict
  ): uk_data_population_projection_by_area_mutation_response

  """
  insert a single row into the table: "uk_data.population_projection_by_area"
  """
  insert_uk_data_population_projection_by_area_one(
    """the row to be inserted"""
    object: uk_data_population_projection_by_area_insert_input!

    """upsert condition"""
    on_conflict: uk_data_population_projection_by_area_on_conflict
  ): uk_data_population_projection_by_area

  """
  insert data into the table: "uk_data.population_projection_by_country"
  """
  insert_uk_data_population_projection_by_country(
    """the rows to be inserted"""
    objects: [uk_data_population_projection_by_country_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_population_projection_by_country_on_conflict
  ): uk_data_population_projection_by_country_mutation_response

  """
  insert a single row into the table: "uk_data.population_projection_by_country"
  """
  insert_uk_data_population_projection_by_country_one(
    """the row to be inserted"""
    object: uk_data_population_projection_by_country_insert_input!

    """upsert condition"""
    on_conflict: uk_data_population_projection_by_country_on_conflict
  ): uk_data_population_projection_by_country

  """
  insert data into the table: "uk_data.price_paid_data"
  """
  insert_uk_data_price_paid_data(
    """the rows to be inserted"""
    objects: [uk_data_price_paid_data_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_price_paid_data_on_conflict
  ): uk_data_price_paid_data_mutation_response

  """
  insert a single row into the table: "uk_data.price_paid_data"
  """
  insert_uk_data_price_paid_data_one(
    """the row to be inserted"""
    object: uk_data_price_paid_data_insert_input!

    """upsert condition"""
    on_conflict: uk_data_price_paid_data_on_conflict
  ): uk_data_price_paid_data

  """
  insert data into the table: "uk_data.property_records"
  """
  insert_uk_data_property_records(
    """the rows to be inserted"""
    objects: [uk_data_property_records_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_property_records_on_conflict
  ): uk_data_property_records_mutation_response

  """
  insert a single row into the table: "uk_data.property_records"
  """
  insert_uk_data_property_records_one(
    """the row to be inserted"""
    object: uk_data_property_records_insert_input!

    """upsert condition"""
    on_conflict: uk_data_property_records_on_conflict
  ): uk_data_property_records

  """
  insert data into the table: "uk_data.railway_station"
  """
  insert_uk_data_railway_station(
    """the rows to be inserted"""
    objects: [uk_data_railway_station_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_railway_station_on_conflict
  ): uk_data_railway_station_mutation_response

  """
  insert a single row into the table: "uk_data.railway_station"
  """
  insert_uk_data_railway_station_one(
    """the row to be inserted"""
    object: uk_data_railway_station_insert_input!

    """upsert condition"""
    on_conflict: uk_data_railway_station_on_conflict
  ): uk_data_railway_station

  """
  insert data into the table: "uk_data.railway_track"
  """
  insert_uk_data_railway_track(
    """the rows to be inserted"""
    objects: [uk_data_railway_track_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_railway_track_on_conflict
  ): uk_data_railway_track_mutation_response

  """
  insert a single row into the table: "uk_data.railway_track"
  """
  insert_uk_data_railway_track_one(
    """the row to be inserted"""
    object: uk_data_railway_track_insert_input!

    """upsert condition"""
    on_conflict: uk_data_railway_track_on_conflict
  ): uk_data_railway_track

  """
  insert data into the table: "uk_data.railway_tunnel"
  """
  insert_uk_data_railway_tunnel(
    """the rows to be inserted"""
    objects: [uk_data_railway_tunnel_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_railway_tunnel_on_conflict
  ): uk_data_railway_tunnel_mutation_response

  """
  insert a single row into the table: "uk_data.railway_tunnel"
  """
  insert_uk_data_railway_tunnel_one(
    """the row to be inserted"""
    object: uk_data_railway_tunnel_insert_input!

    """upsert condition"""
    on_conflict: uk_data_railway_tunnel_on_conflict
  ): uk_data_railway_tunnel

  """
  insert data into the table: "uk_data.rent_demand_stats"
  """
  insert_uk_data_rent_demand_stats(
    """the rows to be inserted"""
    objects: [uk_data_rent_demand_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_rent_demand_stats_on_conflict
  ): uk_data_rent_demand_stats_mutation_response

  """
  insert a single row into the table: "uk_data.rent_demand_stats"
  """
  insert_uk_data_rent_demand_stats_one(
    """the row to be inserted"""
    object: uk_data_rent_demand_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_rent_demand_stats_on_conflict
  ): uk_data_rent_demand_stats

  """
  insert data into the table: "uk_data.road"
  """
  insert_uk_data_road(
    """the rows to be inserted"""
    objects: [uk_data_road_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_road_on_conflict
  ): uk_data_road_mutation_response

  """
  insert a single row into the table: "uk_data.road"
  """
  insert_uk_data_road_one(
    """the row to be inserted"""
    object: uk_data_road_insert_input!

    """upsert condition"""
    on_conflict: uk_data_road_on_conflict
  ): uk_data_road

  """
  insert data into the table: "uk_data.road_tunnel"
  """
  insert_uk_data_road_tunnel(
    """the rows to be inserted"""
    objects: [uk_data_road_tunnel_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_road_tunnel_on_conflict
  ): uk_data_road_tunnel_mutation_response

  """
  insert a single row into the table: "uk_data.road_tunnel"
  """
  insert_uk_data_road_tunnel_one(
    """the row to be inserted"""
    object: uk_data_road_tunnel_insert_input!

    """upsert condition"""
    on_conflict: uk_data_road_tunnel_on_conflict
  ): uk_data_road_tunnel

  """
  insert data into the table: "uk_data.roundabout"
  """
  insert_uk_data_roundabout(
    """the rows to be inserted"""
    objects: [uk_data_roundabout_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_roundabout_on_conflict
  ): uk_data_roundabout_mutation_response

  """
  insert a single row into the table: "uk_data.roundabout"
  """
  insert_uk_data_roundabout_one(
    """the row to be inserted"""
    object: uk_data_roundabout_insert_input!

    """upsert condition"""
    on_conflict: uk_data_roundabout_on_conflict
  ): uk_data_roundabout

  """
  insert data into the table: "uk_data.schools"
  """
  insert_uk_data_schools(
    """the rows to be inserted"""
    objects: [uk_data_schools_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_schools_on_conflict
  ): uk_data_schools_mutation_response

  """
  insert a single row into the table: "uk_data.schools"
  """
  insert_uk_data_schools_one(
    """the row to be inserted"""
    object: uk_data_schools_insert_input!

    """upsert condition"""
    on_conflict: uk_data_schools_on_conflict
  ): uk_data_schools

  """
  insert data into the table: "uk_data.street_crimes"
  """
  insert_uk_data_street_crimes(
    """the rows to be inserted"""
    objects: [uk_data_street_crimes_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_street_crimes_on_conflict
  ): uk_data_street_crimes_mutation_response

  """
  insert a single row into the table: "uk_data.street_crimes"
  """
  insert_uk_data_street_crimes_one(
    """the row to be inserted"""
    object: uk_data_street_crimes_insert_input!

    """upsert condition"""
    on_conflict: uk_data_street_crimes_on_conflict
  ): uk_data_street_crimes

  """
  insert data into the table: "uk_data.street_crimes_with_distance"
  """
  insert_uk_data_street_crimes_with_distance(
    """the rows to be inserted"""
    objects: [uk_data_street_crimes_with_distance_insert_input!]!
  ): uk_data_street_crimes_with_distance_mutation_response

  """
  insert a single row into the table: "uk_data.street_crimes_with_distance"
  """
  insert_uk_data_street_crimes_with_distance_one(
    """the row to be inserted"""
    object: uk_data_street_crimes_with_distance_insert_input!
  ): uk_data_street_crimes_with_distance

  """
  insert data into the table: "uk_data.surface_water_area"
  """
  insert_uk_data_surface_water_area(
    """the rows to be inserted"""
    objects: [uk_data_surface_water_area_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_surface_water_area_on_conflict
  ): uk_data_surface_water_area_mutation_response

  """
  insert a single row into the table: "uk_data.surface_water_area"
  """
  insert_uk_data_surface_water_area_one(
    """the row to be inserted"""
    object: uk_data_surface_water_area_insert_input!

    """upsert condition"""
    on_conflict: uk_data_surface_water_area_on_conflict
  ): uk_data_surface_water_area

  """
  insert data into the table: "uk_data.surface_water_line"
  """
  insert_uk_data_surface_water_line(
    """the rows to be inserted"""
    objects: [uk_data_surface_water_line_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_surface_water_line_on_conflict
  ): uk_data_surface_water_line_mutation_response

  """
  insert a single row into the table: "uk_data.surface_water_line"
  """
  insert_uk_data_surface_water_line_one(
    """the row to be inserted"""
    object: uk_data_surface_water_line_insert_input!

    """upsert condition"""
    on_conflict: uk_data_surface_water_line_on_conflict
  ): uk_data_surface_water_line

  """
  insert data into the table: "uk_data.tidal_boundary"
  """
  insert_uk_data_tidal_boundary(
    """the rows to be inserted"""
    objects: [uk_data_tidal_boundary_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_tidal_boundary_on_conflict
  ): uk_data_tidal_boundary_mutation_response

  """
  insert a single row into the table: "uk_data.tidal_boundary"
  """
  insert_uk_data_tidal_boundary_one(
    """the row to be inserted"""
    object: uk_data_tidal_boundary_insert_input!

    """upsert condition"""
    on_conflict: uk_data_tidal_boundary_on_conflict
  ): uk_data_tidal_boundary

  """
  insert data into the table: "uk_data.tidal_water"
  """
  insert_uk_data_tidal_water(
    """the rows to be inserted"""
    objects: [uk_data_tidal_water_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_tidal_water_on_conflict
  ): uk_data_tidal_water_mutation_response

  """
  insert a single row into the table: "uk_data.tidal_water"
  """
  insert_uk_data_tidal_water_one(
    """the row to be inserted"""
    object: uk_data_tidal_water_insert_input!

    """upsert condition"""
    on_conflict: uk_data_tidal_water_on_conflict
  ): uk_data_tidal_water

  """
  insert data into the table: "uk_data.woodland"
  """
  insert_uk_data_woodland(
    """the rows to be inserted"""
    objects: [uk_data_woodland_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_woodland_on_conflict
  ): uk_data_woodland_mutation_response

  """
  insert a single row into the table: "uk_data.woodland"
  """
  insert_uk_data_woodland_one(
    """the row to be inserted"""
    object: uk_data_woodland_insert_input!

    """upsert condition"""
    on_conflict: uk_data_woodland_on_conflict
  ): uk_data_woodland

  """
  insert data into the table: "uk_data.yield_stats"
  """
  insert_uk_data_yield_stats(
    """the rows to be inserted"""
    objects: [uk_data_yield_stats_insert_input!]!

    """upsert condition"""
    on_conflict: uk_data_yield_stats_on_conflict
  ): uk_data_yield_stats_mutation_response

  """
  insert a single row into the table: "uk_data.yield_stats"
  """
  insert_uk_data_yield_stats_one(
    """the row to be inserted"""
    object: uk_data_yield_stats_insert_input!

    """upsert condition"""
    on_conflict: uk_data_yield_stats_on_conflict
  ): uk_data_yield_stats

  """
  update data of the table: "uk_data.aggregated_charging_point_data"
  """
  update_uk_data_aggregated_charging_point_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_aggregated_charging_point_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_aggregated_charging_point_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_aggregated_charging_point_data_bool_exp!
  ): uk_data_aggregated_charging_point_data_mutation_response

  """
  update multiples rows of table: "uk_data.aggregated_charging_point_data"
  """
  update_uk_data_aggregated_charging_point_data_many(
    """updates to execute, in order"""
    updates: [uk_data_aggregated_charging_point_data_updates!]!
  ): [uk_data_aggregated_charging_point_data_mutation_response]

  """
  update data of the table: "uk_data.aggregated_functional_site_data"
  """
  update_uk_data_aggregated_functional_site_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_aggregated_functional_site_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_aggregated_functional_site_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_aggregated_functional_site_data_bool_exp!
  ): uk_data_aggregated_functional_site_data_mutation_response

  """
  update multiples rows of table: "uk_data.aggregated_functional_site_data"
  """
  update_uk_data_aggregated_functional_site_data_many(
    """updates to execute, in order"""
    updates: [uk_data_aggregated_functional_site_data_updates!]!
  ): [uk_data_aggregated_functional_site_data_mutation_response]

  """
  update data of the table: "uk_data.aggregated_important_building_data"
  """
  update_uk_data_aggregated_important_building_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_aggregated_important_building_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_aggregated_important_building_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_aggregated_important_building_data_bool_exp!
  ): uk_data_aggregated_important_building_data_mutation_response

  """
  update multiples rows of table: "uk_data.aggregated_important_building_data"
  """
  update_uk_data_aggregated_important_building_data_many(
    """updates to execute, in order"""
    updates: [uk_data_aggregated_important_building_data_updates!]!
  ): [uk_data_aggregated_important_building_data_mutation_response]

  """
  update data of the table: "uk_data.aggregated_railway_station_data"
  """
  update_uk_data_aggregated_railway_station_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_aggregated_railway_station_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_aggregated_railway_station_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_aggregated_railway_station_data_bool_exp!
  ): uk_data_aggregated_railway_station_data_mutation_response

  """
  update multiples rows of table: "uk_data.aggregated_railway_station_data"
  """
  update_uk_data_aggregated_railway_station_data_many(
    """updates to execute, in order"""
    updates: [uk_data_aggregated_railway_station_data_updates!]!
  ): [uk_data_aggregated_railway_station_data_mutation_response]

  """
  update data of the table: "uk_data.aggregated_sites_nearby_data"
  """
  update_uk_data_aggregated_sites_nearby_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_aggregated_sites_nearby_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_aggregated_sites_nearby_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp!
  ): uk_data_aggregated_sites_nearby_data_mutation_response

  """
  update multiples rows of table: "uk_data.aggregated_sites_nearby_data"
  """
  update_uk_data_aggregated_sites_nearby_data_many(
    """updates to execute, in order"""
    updates: [uk_data_aggregated_sites_nearby_data_updates!]!
  ): [uk_data_aggregated_sites_nearby_data_mutation_response]

  """
  update data of the table: "uk_data.building"
  """
  update_uk_data_building(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_building_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_building_set_input

    """filter the rows which have to be updated"""
    where: uk_data_building_bool_exp!
  ): uk_data_building_mutation_response

  """
  update single row of the table: "uk_data.building"
  """
  update_uk_data_building_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_building_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_building_set_input
    pk_columns: uk_data_building_pk_columns_input!
  ): uk_data_building

  """
  update multiples rows of table: "uk_data.building"
  """
  update_uk_data_building_many(
    """updates to execute, in order"""
    updates: [uk_data_building_updates!]!
  ): [uk_data_building_mutation_response]

  """
  update data of the table: "uk_data.car_charging_point"
  """
  update_uk_data_car_charging_point(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_car_charging_point_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_car_charging_point_set_input

    """filter the rows which have to be updated"""
    where: uk_data_car_charging_point_bool_exp!
  ): uk_data_car_charging_point_mutation_response

  """
  update single row of the table: "uk_data.car_charging_point"
  """
  update_uk_data_car_charging_point_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_car_charging_point_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_car_charging_point_set_input
    pk_columns: uk_data_car_charging_point_pk_columns_input!
  ): uk_data_car_charging_point

  """
  update multiples rows of table: "uk_data.car_charging_point"
  """
  update_uk_data_car_charging_point_many(
    """updates to execute, in order"""
    updates: [uk_data_car_charging_point_updates!]!
  ): [uk_data_car_charging_point_mutation_response]

  """
  update data of the table: "uk_data.city_details"
  """
  update_uk_data_city_details(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_city_details_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_city_details_set_input

    """filter the rows which have to be updated"""
    where: uk_data_city_details_bool_exp!
  ): uk_data_city_details_mutation_response

  """
  update multiples rows of table: "uk_data.city_details"
  """
  update_uk_data_city_details_many(
    """updates to execute, in order"""
    updates: [uk_data_city_details_updates!]!
  ): [uk_data_city_details_mutation_response]

  """
  update data of the table: "uk_data.county_details"
  """
  update_uk_data_county_details(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_county_details_set_input

    """filter the rows which have to be updated"""
    where: uk_data_county_details_bool_exp!
  ): uk_data_county_details_mutation_response

  """
  update multiples rows of table: "uk_data.county_details"
  """
  update_uk_data_county_details_many(
    """updates to execute, in order"""
    updates: [uk_data_county_details_updates!]!
  ): [uk_data_county_details_mutation_response]

  """
  update data of the table: "uk_data.demand_stats"
  """
  update_uk_data_demand_stats(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_demand_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_demand_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_demand_stats_bool_exp!
  ): uk_data_demand_stats_mutation_response

  """
  update single row of the table: "uk_data.demand_stats"
  """
  update_uk_data_demand_stats_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_demand_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_demand_stats_set_input
    pk_columns: uk_data_demand_stats_pk_columns_input!
  ): uk_data_demand_stats

  """
  update multiples rows of table: "uk_data.demand_stats"
  """
  update_uk_data_demand_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_demand_stats_updates!]!
  ): [uk_data_demand_stats_mutation_response]

  """
  update data of the table: "uk_data.demographics"
  """
  update_uk_data_demographics(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_demographics_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_demographics_set_input

    """filter the rows which have to be updated"""
    where: uk_data_demographics_bool_exp!
  ): uk_data_demographics_mutation_response

  """
  update single row of the table: "uk_data.demographics"
  """
  update_uk_data_demographics_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_demographics_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_demographics_set_input
    pk_columns: uk_data_demographics_pk_columns_input!
  ): uk_data_demographics

  """
  update multiples rows of table: "uk_data.demographics"
  """
  update_uk_data_demographics_many(
    """updates to execute, in order"""
    updates: [uk_data_demographics_updates!]!
  ): [uk_data_demographics_mutation_response]

  """
  update data of the table: "uk_data.electricity_transmission_line"
  """
  update_uk_data_electricity_transmission_line(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_electricity_transmission_line_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_electricity_transmission_line_set_input

    """filter the rows which have to be updated"""
    where: uk_data_electricity_transmission_line_bool_exp!
  ): uk_data_electricity_transmission_line_mutation_response

  """
  update single row of the table: "uk_data.electricity_transmission_line"
  """
  update_uk_data_electricity_transmission_line_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_electricity_transmission_line_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_electricity_transmission_line_set_input
    pk_columns: uk_data_electricity_transmission_line_pk_columns_input!
  ): uk_data_electricity_transmission_line

  """
  update multiples rows of table: "uk_data.electricity_transmission_line"
  """
  update_uk_data_electricity_transmission_line_many(
    """updates to execute, in order"""
    updates: [uk_data_electricity_transmission_line_updates!]!
  ): [uk_data_electricity_transmission_line_mutation_response]

  """
  update data of the table: "uk_data.epc_certificates"
  """
  update_uk_data_epc_certificates(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_epc_certificates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_epc_certificates_set_input

    """filter the rows which have to be updated"""
    where: uk_data_epc_certificates_bool_exp!
  ): uk_data_epc_certificates_mutation_response

  """
  update single row of the table: "uk_data.epc_certificates"
  """
  update_uk_data_epc_certificates_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_epc_certificates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_epc_certificates_set_input
    pk_columns: uk_data_epc_certificates_pk_columns_input!
  ): uk_data_epc_certificates

  """
  update multiples rows of table: "uk_data.epc_certificates"
  """
  update_uk_data_epc_certificates_many(
    """updates to execute, in order"""
    updates: [uk_data_epc_certificates_updates!]!
  ): [uk_data_epc_certificates_mutation_response]

  """
  update data of the table: "uk_data.epc_recommendations"
  """
  update_uk_data_epc_recommendations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_epc_recommendations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_epc_recommendations_set_input

    """filter the rows which have to be updated"""
    where: uk_data_epc_recommendations_bool_exp!
  ): uk_data_epc_recommendations_mutation_response

  """
  update multiples rows of table: "uk_data.epc_recommendations"
  """
  update_uk_data_epc_recommendations_many(
    """updates to execute, in order"""
    updates: [uk_data_epc_recommendations_updates!]!
  ): [uk_data_epc_recommendations_mutation_response]

  """
  update data of the table: "uk_data.flyway_schema_history"
  """
  update_uk_data_flyway_schema_history(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_flyway_schema_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_flyway_schema_history_set_input

    """filter the rows which have to be updated"""
    where: uk_data_flyway_schema_history_bool_exp!
  ): uk_data_flyway_schema_history_mutation_response

  """
  update single row of the table: "uk_data.flyway_schema_history"
  """
  update_uk_data_flyway_schema_history_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_flyway_schema_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_flyway_schema_history_set_input
    pk_columns: uk_data_flyway_schema_history_pk_columns_input!
  ): uk_data_flyway_schema_history

  """
  update multiples rows of table: "uk_data.flyway_schema_history"
  """
  update_uk_data_flyway_schema_history_many(
    """updates to execute, in order"""
    updates: [uk_data_flyway_schema_history_updates!]!
  ): [uk_data_flyway_schema_history_mutation_response]

  """
  update data of the table: "uk_data.foreshore"
  """
  update_uk_data_foreshore(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_foreshore_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_foreshore_set_input

    """filter the rows which have to be updated"""
    where: uk_data_foreshore_bool_exp!
  ): uk_data_foreshore_mutation_response

  """
  update single row of the table: "uk_data.foreshore"
  """
  update_uk_data_foreshore_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_foreshore_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_foreshore_set_input
    pk_columns: uk_data_foreshore_pk_columns_input!
  ): uk_data_foreshore

  """
  update multiples rows of table: "uk_data.foreshore"
  """
  update_uk_data_foreshore_many(
    """updates to execute, in order"""
    updates: [uk_data_foreshore_updates!]!
  ): [uk_data_foreshore_mutation_response]

  """
  update data of the table: "uk_data.functional_site"
  """
  update_uk_data_functional_site(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_functional_site_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_functional_site_set_input

    """filter the rows which have to be updated"""
    where: uk_data_functional_site_bool_exp!
  ): uk_data_functional_site_mutation_response

  """
  update multiples rows of table: "uk_data.functional_site"
  """
  update_uk_data_functional_site_many(
    """updates to execute, in order"""
    updates: [uk_data_functional_site_updates!]!
  ): [uk_data_functional_site_mutation_response]

  """
  update data of the table: "uk_data.glasshouse"
  """
  update_uk_data_glasshouse(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_glasshouse_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_glasshouse_set_input

    """filter the rows which have to be updated"""
    where: uk_data_glasshouse_bool_exp!
  ): uk_data_glasshouse_mutation_response

  """
  update single row of the table: "uk_data.glasshouse"
  """
  update_uk_data_glasshouse_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_glasshouse_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_glasshouse_set_input
    pk_columns: uk_data_glasshouse_pk_columns_input!
  ): uk_data_glasshouse

  """
  update multiples rows of table: "uk_data.glasshouse"
  """
  update_uk_data_glasshouse_many(
    """updates to execute, in order"""
    updates: [uk_data_glasshouse_updates!]!
  ): [uk_data_glasshouse_mutation_response]

  """
  update data of the table: "uk_data.growth_stats"
  """
  update_uk_data_growth_stats(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_growth_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_growth_stats_bool_exp!
  ): uk_data_growth_stats_mutation_response

  """
  update single row of the table: "uk_data.growth_stats"
  """
  update_uk_data_growth_stats_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_growth_stats_set_input
    pk_columns: uk_data_growth_stats_pk_columns_input!
  ): uk_data_growth_stats

  """
  update multiples rows of table: "uk_data.growth_stats"
  """
  update_uk_data_growth_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_growth_stats_updates!]!
  ): [uk_data_growth_stats_mutation_response]

  """
  update data of the table: "uk_data.hmo_stats"
  """
  update_uk_data_hmo_stats(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_hmo_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_hmo_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_hmo_stats_bool_exp!
  ): uk_data_hmo_stats_mutation_response

  """
  update single row of the table: "uk_data.hmo_stats"
  """
  update_uk_data_hmo_stats_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_hmo_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_hmo_stats_set_input
    pk_columns: uk_data_hmo_stats_pk_columns_input!
  ): uk_data_hmo_stats

  """
  update multiples rows of table: "uk_data.hmo_stats"
  """
  update_uk_data_hmo_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_hmo_stats_updates!]!
  ): [uk_data_hmo_stats_mutation_response]

  """
  update data of the table: "uk_data.house_price_index"
  """
  update_uk_data_house_price_index(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_house_price_index_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_house_price_index_set_input

    """filter the rows which have to be updated"""
    where: uk_data_house_price_index_bool_exp!
  ): uk_data_house_price_index_mutation_response

  """
  update single row of the table: "uk_data.house_price_index"
  """
  update_uk_data_house_price_index_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_house_price_index_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_house_price_index_set_input
    pk_columns: uk_data_house_price_index_pk_columns_input!
  ): uk_data_house_price_index

  """
  update multiples rows of table: "uk_data.house_price_index"
  """
  update_uk_data_house_price_index_many(
    """updates to execute, in order"""
    updates: [uk_data_house_price_index_updates!]!
  ): [uk_data_house_price_index_mutation_response]

  """
  update data of the table: "uk_data.important_building"
  """
  update_uk_data_important_building(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_important_building_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_important_building_set_input

    """filter the rows which have to be updated"""
    where: uk_data_important_building_bool_exp!
  ): uk_data_important_building_mutation_response

  """
  update single row of the table: "uk_data.important_building"
  """
  update_uk_data_important_building_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_important_building_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_important_building_set_input
    pk_columns: uk_data_important_building_pk_columns_input!
  ): uk_data_important_building

  """
  update multiples rows of table: "uk_data.important_building"
  """
  update_uk_data_important_building_many(
    """updates to execute, in order"""
    updates: [uk_data_important_building_updates!]!
  ): [uk_data_important_building_mutation_response]

  """
  update data of the table: "uk_data.motorway_junction"
  """
  update_uk_data_motorway_junction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_motorway_junction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_motorway_junction_set_input

    """filter the rows which have to be updated"""
    where: uk_data_motorway_junction_bool_exp!
  ): uk_data_motorway_junction_mutation_response

  """
  update single row of the table: "uk_data.motorway_junction"
  """
  update_uk_data_motorway_junction_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_motorway_junction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_motorway_junction_set_input
    pk_columns: uk_data_motorway_junction_pk_columns_input!
  ): uk_data_motorway_junction

  """
  update multiples rows of table: "uk_data.motorway_junction"
  """
  update_uk_data_motorway_junction_many(
    """updates to execute, in order"""
    updates: [uk_data_motorway_junction_updates!]!
  ): [uk_data_motorway_junction_mutation_response]

  """
  update data of the table: "uk_data.named_place"
  """
  update_uk_data_named_place(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_named_place_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_named_place_set_input

    """filter the rows which have to be updated"""
    where: uk_data_named_place_bool_exp!
  ): uk_data_named_place_mutation_response

  """
  update single row of the table: "uk_data.named_place"
  """
  update_uk_data_named_place_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_named_place_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_named_place_set_input
    pk_columns: uk_data_named_place_pk_columns_input!
  ): uk_data_named_place

  """
  update multiples rows of table: "uk_data.named_place"
  """
  update_uk_data_named_place_many(
    """updates to execute, in order"""
    updates: [uk_data_named_place_updates!]!
  ): [uk_data_named_place_mutation_response]

  """
  update data of the table: "uk_data.osmaps_data"
  """
  update_uk_data_osmaps_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_osmaps_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_osmaps_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_osmaps_data_bool_exp!
  ): uk_data_osmaps_data_mutation_response

  """
  update single row of the table: "uk_data.osmaps_data"
  """
  update_uk_data_osmaps_data_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_osmaps_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_osmaps_data_set_input
    pk_columns: uk_data_osmaps_data_pk_columns_input!
  ): uk_data_osmaps_data

  """
  update multiples rows of table: "uk_data.osmaps_data"
  """
  update_uk_data_osmaps_data_many(
    """updates to execute, in order"""
    updates: [uk_data_osmaps_data_updates!]!
  ): [uk_data_osmaps_data_mutation_response]

  """
  update data of the table: "uk_data.outcode_stats"
  """
  update_uk_data_outcode_stats(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_outcode_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_outcode_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_outcode_stats_bool_exp!
  ): uk_data_outcode_stats_mutation_response

  """
  update single row of the table: "uk_data.outcode_stats"
  """
  update_uk_data_outcode_stats_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_outcode_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_outcode_stats_set_input
    pk_columns: uk_data_outcode_stats_pk_columns_input!
  ): uk_data_outcode_stats

  """
  update multiples rows of table: "uk_data.outcode_stats"
  """
  update_uk_data_outcode_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_outcode_stats_updates!]!
  ): [uk_data_outcode_stats_mutation_response]

  """
  update data of the table: "uk_data.police_force_neighbourhoods"
  """
  update_uk_data_police_force_neighbourhoods(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_police_force_neighbourhoods_set_input

    """filter the rows which have to be updated"""
    where: uk_data_police_force_neighbourhoods_bool_exp!
  ): uk_data_police_force_neighbourhoods_mutation_response

  """
  update single row of the table: "uk_data.police_force_neighbourhoods"
  """
  update_uk_data_police_force_neighbourhoods_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_police_force_neighbourhoods_set_input
    pk_columns: uk_data_police_force_neighbourhoods_pk_columns_input!
  ): uk_data_police_force_neighbourhoods

  """
  update multiples rows of table: "uk_data.police_force_neighbourhoods"
  """
  update_uk_data_police_force_neighbourhoods_many(
    """updates to execute, in order"""
    updates: [uk_data_police_force_neighbourhoods_updates!]!
  ): [uk_data_police_force_neighbourhoods_mutation_response]

  """
  update data of the table: "uk_data.police_forces"
  """
  update_uk_data_police_forces(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_police_forces_set_input

    """filter the rows which have to be updated"""
    where: uk_data_police_forces_bool_exp!
  ): uk_data_police_forces_mutation_response

  """
  update single row of the table: "uk_data.police_forces"
  """
  update_uk_data_police_forces_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_police_forces_set_input
    pk_columns: uk_data_police_forces_pk_columns_input!
  ): uk_data_police_forces

  """
  update multiples rows of table: "uk_data.police_forces"
  """
  update_uk_data_police_forces_many(
    """updates to execute, in order"""
    updates: [uk_data_police_forces_updates!]!
  ): [uk_data_police_forces_mutation_response]

  """
  update data of the table: "uk_data.population_projection_by_area"
  """
  update_uk_data_population_projection_by_area(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_population_projection_by_area_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_population_projection_by_area_set_input

    """filter the rows which have to be updated"""
    where: uk_data_population_projection_by_area_bool_exp!
  ): uk_data_population_projection_by_area_mutation_response

  """
  update single row of the table: "uk_data.population_projection_by_area"
  """
  update_uk_data_population_projection_by_area_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_population_projection_by_area_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_population_projection_by_area_set_input
    pk_columns: uk_data_population_projection_by_area_pk_columns_input!
  ): uk_data_population_projection_by_area

  """
  update multiples rows of table: "uk_data.population_projection_by_area"
  """
  update_uk_data_population_projection_by_area_many(
    """updates to execute, in order"""
    updates: [uk_data_population_projection_by_area_updates!]!
  ): [uk_data_population_projection_by_area_mutation_response]

  """
  update data of the table: "uk_data.population_projection_by_country"
  """
  update_uk_data_population_projection_by_country(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_population_projection_by_country_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_population_projection_by_country_set_input

    """filter the rows which have to be updated"""
    where: uk_data_population_projection_by_country_bool_exp!
  ): uk_data_population_projection_by_country_mutation_response

  """
  update single row of the table: "uk_data.population_projection_by_country"
  """
  update_uk_data_population_projection_by_country_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_population_projection_by_country_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_population_projection_by_country_set_input
    pk_columns: uk_data_population_projection_by_country_pk_columns_input!
  ): uk_data_population_projection_by_country

  """
  update multiples rows of table: "uk_data.population_projection_by_country"
  """
  update_uk_data_population_projection_by_country_many(
    """updates to execute, in order"""
    updates: [uk_data_population_projection_by_country_updates!]!
  ): [uk_data_population_projection_by_country_mutation_response]

  """
  update data of the table: "uk_data.price_paid_data"
  """
  update_uk_data_price_paid_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_price_paid_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_price_paid_data_set_input

    """filter the rows which have to be updated"""
    where: uk_data_price_paid_data_bool_exp!
  ): uk_data_price_paid_data_mutation_response

  """
  update single row of the table: "uk_data.price_paid_data"
  """
  update_uk_data_price_paid_data_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_price_paid_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_price_paid_data_set_input
    pk_columns: uk_data_price_paid_data_pk_columns_input!
  ): uk_data_price_paid_data

  """
  update multiples rows of table: "uk_data.price_paid_data"
  """
  update_uk_data_price_paid_data_many(
    """updates to execute, in order"""
    updates: [uk_data_price_paid_data_updates!]!
  ): [uk_data_price_paid_data_mutation_response]

  """
  update data of the table: "uk_data.property_records"
  """
  update_uk_data_property_records(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_property_records_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_property_records_set_input

    """filter the rows which have to be updated"""
    where: uk_data_property_records_bool_exp!
  ): uk_data_property_records_mutation_response

  """
  update single row of the table: "uk_data.property_records"
  """
  update_uk_data_property_records_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_property_records_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_property_records_set_input
    pk_columns: uk_data_property_records_pk_columns_input!
  ): uk_data_property_records

  """
  update multiples rows of table: "uk_data.property_records"
  """
  update_uk_data_property_records_many(
    """updates to execute, in order"""
    updates: [uk_data_property_records_updates!]!
  ): [uk_data_property_records_mutation_response]

  """
  update data of the table: "uk_data.railway_station"
  """
  update_uk_data_railway_station(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_station_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_station_set_input

    """filter the rows which have to be updated"""
    where: uk_data_railway_station_bool_exp!
  ): uk_data_railway_station_mutation_response

  """
  update single row of the table: "uk_data.railway_station"
  """
  update_uk_data_railway_station_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_station_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_station_set_input
    pk_columns: uk_data_railway_station_pk_columns_input!
  ): uk_data_railway_station

  """
  update multiples rows of table: "uk_data.railway_station"
  """
  update_uk_data_railway_station_many(
    """updates to execute, in order"""
    updates: [uk_data_railway_station_updates!]!
  ): [uk_data_railway_station_mutation_response]

  """
  update data of the table: "uk_data.railway_track"
  """
  update_uk_data_railway_track(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_track_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_track_set_input

    """filter the rows which have to be updated"""
    where: uk_data_railway_track_bool_exp!
  ): uk_data_railway_track_mutation_response

  """
  update single row of the table: "uk_data.railway_track"
  """
  update_uk_data_railway_track_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_track_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_track_set_input
    pk_columns: uk_data_railway_track_pk_columns_input!
  ): uk_data_railway_track

  """
  update multiples rows of table: "uk_data.railway_track"
  """
  update_uk_data_railway_track_many(
    """updates to execute, in order"""
    updates: [uk_data_railway_track_updates!]!
  ): [uk_data_railway_track_mutation_response]

  """
  update data of the table: "uk_data.railway_tunnel"
  """
  update_uk_data_railway_tunnel(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_tunnel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_tunnel_set_input

    """filter the rows which have to be updated"""
    where: uk_data_railway_tunnel_bool_exp!
  ): uk_data_railway_tunnel_mutation_response

  """
  update single row of the table: "uk_data.railway_tunnel"
  """
  update_uk_data_railway_tunnel_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_railway_tunnel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_railway_tunnel_set_input
    pk_columns: uk_data_railway_tunnel_pk_columns_input!
  ): uk_data_railway_tunnel

  """
  update multiples rows of table: "uk_data.railway_tunnel"
  """
  update_uk_data_railway_tunnel_many(
    """updates to execute, in order"""
    updates: [uk_data_railway_tunnel_updates!]!
  ): [uk_data_railway_tunnel_mutation_response]

  """
  update data of the table: "uk_data.rent_demand_stats"
  """
  update_uk_data_rent_demand_stats(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_rent_demand_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_rent_demand_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_rent_demand_stats_bool_exp!
  ): uk_data_rent_demand_stats_mutation_response

  """
  update single row of the table: "uk_data.rent_demand_stats"
  """
  update_uk_data_rent_demand_stats_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_rent_demand_stats_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_rent_demand_stats_set_input
    pk_columns: uk_data_rent_demand_stats_pk_columns_input!
  ): uk_data_rent_demand_stats

  """
  update multiples rows of table: "uk_data.rent_demand_stats"
  """
  update_uk_data_rent_demand_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_rent_demand_stats_updates!]!
  ): [uk_data_rent_demand_stats_mutation_response]

  """
  update data of the table: "uk_data.road"
  """
  update_uk_data_road(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_road_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_road_set_input

    """filter the rows which have to be updated"""
    where: uk_data_road_bool_exp!
  ): uk_data_road_mutation_response

  """
  update single row of the table: "uk_data.road"
  """
  update_uk_data_road_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_road_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_road_set_input
    pk_columns: uk_data_road_pk_columns_input!
  ): uk_data_road

  """
  update multiples rows of table: "uk_data.road"
  """
  update_uk_data_road_many(
    """updates to execute, in order"""
    updates: [uk_data_road_updates!]!
  ): [uk_data_road_mutation_response]

  """
  update data of the table: "uk_data.road_tunnel"
  """
  update_uk_data_road_tunnel(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_road_tunnel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_road_tunnel_set_input

    """filter the rows which have to be updated"""
    where: uk_data_road_tunnel_bool_exp!
  ): uk_data_road_tunnel_mutation_response

  """
  update single row of the table: "uk_data.road_tunnel"
  """
  update_uk_data_road_tunnel_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_road_tunnel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_road_tunnel_set_input
    pk_columns: uk_data_road_tunnel_pk_columns_input!
  ): uk_data_road_tunnel

  """
  update multiples rows of table: "uk_data.road_tunnel"
  """
  update_uk_data_road_tunnel_many(
    """updates to execute, in order"""
    updates: [uk_data_road_tunnel_updates!]!
  ): [uk_data_road_tunnel_mutation_response]

  """
  update data of the table: "uk_data.roundabout"
  """
  update_uk_data_roundabout(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_roundabout_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_roundabout_set_input

    """filter the rows which have to be updated"""
    where: uk_data_roundabout_bool_exp!
  ): uk_data_roundabout_mutation_response

  """
  update single row of the table: "uk_data.roundabout"
  """
  update_uk_data_roundabout_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_roundabout_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_roundabout_set_input
    pk_columns: uk_data_roundabout_pk_columns_input!
  ): uk_data_roundabout

  """
  update multiples rows of table: "uk_data.roundabout"
  """
  update_uk_data_roundabout_many(
    """updates to execute, in order"""
    updates: [uk_data_roundabout_updates!]!
  ): [uk_data_roundabout_mutation_response]

  """
  update data of the table: "uk_data.schools"
  """
  update_uk_data_schools(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: uk_data_schools_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: uk_data_schools_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: uk_data_schools_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: uk_data_schools_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_schools_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: uk_data_schools_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_schools_set_input

    """filter the rows which have to be updated"""
    where: uk_data_schools_bool_exp!
  ): uk_data_schools_mutation_response

  """
  update single row of the table: "uk_data.schools"
  """
  update_uk_data_schools_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: uk_data_schools_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: uk_data_schools_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: uk_data_schools_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: uk_data_schools_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_schools_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: uk_data_schools_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_schools_set_input
    pk_columns: uk_data_schools_pk_columns_input!
  ): uk_data_schools

  """
  update multiples rows of table: "uk_data.schools"
  """
  update_uk_data_schools_many(
    """updates to execute, in order"""
    updates: [uk_data_schools_updates!]!
  ): [uk_data_schools_mutation_response]

  """
  update data of the table: "uk_data.street_crimes"
  """
  update_uk_data_street_crimes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_street_crimes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_street_crimes_set_input

    """filter the rows which have to be updated"""
    where: uk_data_street_crimes_bool_exp!
  ): uk_data_street_crimes_mutation_response

  """
  update single row of the table: "uk_data.street_crimes"
  """
  update_uk_data_street_crimes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_street_crimes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_street_crimes_set_input
    pk_columns: uk_data_street_crimes_pk_columns_input!
  ): uk_data_street_crimes

  """
  update multiples rows of table: "uk_data.street_crimes"
  """
  update_uk_data_street_crimes_many(
    """updates to execute, in order"""
    updates: [uk_data_street_crimes_updates!]!
  ): [uk_data_street_crimes_mutation_response]

  """
  update data of the table: "uk_data.street_crimes_with_distance"
  """
  update_uk_data_street_crimes_with_distance(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_street_crimes_with_distance_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_street_crimes_with_distance_set_input

    """filter the rows which have to be updated"""
    where: uk_data_street_crimes_with_distance_bool_exp!
  ): uk_data_street_crimes_with_distance_mutation_response

  """
  update multiples rows of table: "uk_data.street_crimes_with_distance"
  """
  update_uk_data_street_crimes_with_distance_many(
    """updates to execute, in order"""
    updates: [uk_data_street_crimes_with_distance_updates!]!
  ): [uk_data_street_crimes_with_distance_mutation_response]

  """
  update data of the table: "uk_data.surface_water_area"
  """
  update_uk_data_surface_water_area(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_surface_water_area_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_surface_water_area_set_input

    """filter the rows which have to be updated"""
    where: uk_data_surface_water_area_bool_exp!
  ): uk_data_surface_water_area_mutation_response

  """
  update single row of the table: "uk_data.surface_water_area"
  """
  update_uk_data_surface_water_area_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_surface_water_area_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_surface_water_area_set_input
    pk_columns: uk_data_surface_water_area_pk_columns_input!
  ): uk_data_surface_water_area

  """
  update multiples rows of table: "uk_data.surface_water_area"
  """
  update_uk_data_surface_water_area_many(
    """updates to execute, in order"""
    updates: [uk_data_surface_water_area_updates!]!
  ): [uk_data_surface_water_area_mutation_response]

  """
  update data of the table: "uk_data.surface_water_line"
  """
  update_uk_data_surface_water_line(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_surface_water_line_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_surface_water_line_set_input

    """filter the rows which have to be updated"""
    where: uk_data_surface_water_line_bool_exp!
  ): uk_data_surface_water_line_mutation_response

  """
  update single row of the table: "uk_data.surface_water_line"
  """
  update_uk_data_surface_water_line_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_surface_water_line_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_surface_water_line_set_input
    pk_columns: uk_data_surface_water_line_pk_columns_input!
  ): uk_data_surface_water_line

  """
  update multiples rows of table: "uk_data.surface_water_line"
  """
  update_uk_data_surface_water_line_many(
    """updates to execute, in order"""
    updates: [uk_data_surface_water_line_updates!]!
  ): [uk_data_surface_water_line_mutation_response]

  """
  update data of the table: "uk_data.tidal_boundary"
  """
  update_uk_data_tidal_boundary(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_tidal_boundary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_tidal_boundary_set_input

    """filter the rows which have to be updated"""
    where: uk_data_tidal_boundary_bool_exp!
  ): uk_data_tidal_boundary_mutation_response

  """
  update single row of the table: "uk_data.tidal_boundary"
  """
  update_uk_data_tidal_boundary_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_tidal_boundary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_tidal_boundary_set_input
    pk_columns: uk_data_tidal_boundary_pk_columns_input!
  ): uk_data_tidal_boundary

  """
  update multiples rows of table: "uk_data.tidal_boundary"
  """
  update_uk_data_tidal_boundary_many(
    """updates to execute, in order"""
    updates: [uk_data_tidal_boundary_updates!]!
  ): [uk_data_tidal_boundary_mutation_response]

  """
  update data of the table: "uk_data.tidal_water"
  """
  update_uk_data_tidal_water(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_tidal_water_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_tidal_water_set_input

    """filter the rows which have to be updated"""
    where: uk_data_tidal_water_bool_exp!
  ): uk_data_tidal_water_mutation_response

  """
  update single row of the table: "uk_data.tidal_water"
  """
  update_uk_data_tidal_water_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_tidal_water_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_tidal_water_set_input
    pk_columns: uk_data_tidal_water_pk_columns_input!
  ): uk_data_tidal_water

  """
  update multiples rows of table: "uk_data.tidal_water"
  """
  update_uk_data_tidal_water_many(
    """updates to execute, in order"""
    updates: [uk_data_tidal_water_updates!]!
  ): [uk_data_tidal_water_mutation_response]

  """
  update data of the table: "uk_data.woodland"
  """
  update_uk_data_woodland(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_woodland_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_woodland_set_input

    """filter the rows which have to be updated"""
    where: uk_data_woodland_bool_exp!
  ): uk_data_woodland_mutation_response

  """
  update single row of the table: "uk_data.woodland"
  """
  update_uk_data_woodland_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: uk_data_woodland_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_woodland_set_input
    pk_columns: uk_data_woodland_pk_columns_input!
  ): uk_data_woodland

  """
  update multiples rows of table: "uk_data.woodland"
  """
  update_uk_data_woodland_many(
    """updates to execute, in order"""
    updates: [uk_data_woodland_updates!]!
  ): [uk_data_woodland_mutation_response]

  """
  update data of the table: "uk_data.yield_stats"
  """
  update_uk_data_yield_stats(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_yield_stats_set_input

    """filter the rows which have to be updated"""
    where: uk_data_yield_stats_bool_exp!
  ): uk_data_yield_stats_mutation_response

  """
  update single row of the table: "uk_data.yield_stats"
  """
  update_uk_data_yield_stats_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: uk_data_yield_stats_set_input
    pk_columns: uk_data_yield_stats_pk_columns_input!
  ): uk_data_yield_stats

  """
  update multiples rows of table: "uk_data.yield_stats"
  """
  update_uk_data_yield_stats_many(
    """updates to execute, in order"""
    updates: [uk_data_yield_stats_updates!]!
  ): [uk_data_yield_stats_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  searchCouncilTaxBandByAddress(searchCriteria: CouncilTaxSearchCriteriaInput): [CouncilTax]
  searchCouncilTaxBandByPostcode(searchCriteria: CouncilTaxSearchCriteriaInput): [CouncilTax]

  """
  fetch data from the table: "uk_data.aggregated_charging_point_data"
  """
  uk_data_aggregated_charging_point_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): [uk_data_aggregated_charging_point_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_charging_point_data"
  """
  uk_data_aggregated_charging_point_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): uk_data_aggregated_charging_point_data_aggregate!

  """
  fetch data from the table: "uk_data.aggregated_functional_site_data"
  """
  uk_data_aggregated_functional_site_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_functional_site_data"
  """
  uk_data_aggregated_functional_site_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  fetch data from the table: "uk_data.aggregated_important_building_data"
  """
  uk_data_aggregated_important_building_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): [uk_data_aggregated_important_building_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_important_building_data"
  """
  uk_data_aggregated_important_building_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): uk_data_aggregated_important_building_data_aggregate!

  """
  fetch data from the table: "uk_data.aggregated_railway_station_data"
  """
  uk_data_aggregated_railway_station_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): [uk_data_aggregated_railway_station_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_railway_station_data"
  """
  uk_data_aggregated_railway_station_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): uk_data_aggregated_railway_station_data_aggregate!

  """
  fetch data from the table: "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_aggregated_sites_nearby_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_aggregated_sites_nearby_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  fetch data from the table: "uk_data.building"
  """
  uk_data_building(
    """distinct select on columns"""
    distinct_on: [uk_data_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_building_order_by!]

    """filter the rows returned"""
    where: uk_data_building_bool_exp
  ): [uk_data_building!]!

  """
  fetch aggregated fields from the table: "uk_data.building"
  """
  uk_data_building_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_building_order_by!]

    """filter the rows returned"""
    where: uk_data_building_bool_exp
  ): uk_data_building_aggregate!

  """
  fetch data from the table: "uk_data.building" using primary key columns
  """
  uk_data_building_by_pk(fid: Int!): uk_data_building

  """
  fetch data from the table: "uk_data.car_charging_point"
  """
  uk_data_car_charging_point(
    """distinct select on columns"""
    distinct_on: [uk_data_car_charging_point_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_car_charging_point_order_by!]

    """filter the rows returned"""
    where: uk_data_car_charging_point_bool_exp
  ): [uk_data_car_charging_point!]!

  """
  fetch aggregated fields from the table: "uk_data.car_charging_point"
  """
  uk_data_car_charging_point_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_car_charging_point_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_car_charging_point_order_by!]

    """filter the rows returned"""
    where: uk_data_car_charging_point_bool_exp
  ): uk_data_car_charging_point_aggregate!

  """
  fetch data from the table: "uk_data.car_charging_point" using primary key columns
  """
  uk_data_car_charging_point_by_pk(fid: Int!): uk_data_car_charging_point

  """
  execute function "uk_data.charging_point_within_radius" which returns "uk_data.aggregated_charging_point_data"
  """
  uk_data_charging_point_within_radius(
    """
    input parameters for function "uk_data_charging_point_within_radius"
    """
    args: uk_data_charging_point_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): [uk_data_aggregated_charging_point_data!]!

  """
  execute function "uk_data.charging_point_within_radius" and query aggregates on result of table type "uk_data.aggregated_charging_point_data"
  """
  uk_data_charging_point_within_radius_aggregate(
    """
    input parameters for function "uk_data_charging_point_within_radius_aggregate"
    """
    args: uk_data_charging_point_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): uk_data_aggregated_charging_point_data_aggregate!

  """
  fetch data from the table: "uk_data.city_details"
  """
  uk_data_city_details(
    """distinct select on columns"""
    distinct_on: [uk_data_city_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_city_details_order_by!]

    """filter the rows returned"""
    where: uk_data_city_details_bool_exp
  ): [uk_data_city_details!]!

  """
  fetch aggregated fields from the table: "uk_data.city_details"
  """
  uk_data_city_details_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_city_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_city_details_order_by!]

    """filter the rows returned"""
    where: uk_data_city_details_bool_exp
  ): uk_data_city_details_aggregate!

  """
  fetch data from the table: "uk_data.county_details"
  """
  uk_data_county_details(
    """distinct select on columns"""
    distinct_on: [uk_data_county_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_county_details_order_by!]

    """filter the rows returned"""
    where: uk_data_county_details_bool_exp
  ): [uk_data_county_details!]!

  """
  fetch aggregated fields from the table: "uk_data.county_details"
  """
  uk_data_county_details_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_county_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_county_details_order_by!]

    """filter the rows returned"""
    where: uk_data_county_details_bool_exp
  ): uk_data_county_details_aggregate!

  """
  fetch data from the table: "uk_data.demand_stats"
  """
  uk_data_demand_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_demand_stats_bool_exp
  ): [uk_data_demand_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.demand_stats"
  """
  uk_data_demand_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_demand_stats_bool_exp
  ): uk_data_demand_stats_aggregate!

  """
  fetch data from the table: "uk_data.demand_stats" using primary key columns
  """
  uk_data_demand_stats_by_pk(postcode: String!): uk_data_demand_stats

  """
  fetch data from the table: "uk_data.demographics"
  """
  uk_data_demographics(
    """distinct select on columns"""
    distinct_on: [uk_data_demographics_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demographics_order_by!]

    """filter the rows returned"""
    where: uk_data_demographics_bool_exp
  ): [uk_data_demographics!]!

  """
  fetch aggregated fields from the table: "uk_data.demographics"
  """
  uk_data_demographics_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_demographics_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demographics_order_by!]

    """filter the rows returned"""
    where: uk_data_demographics_bool_exp
  ): uk_data_demographics_aggregate!

  """
  fetch data from the table: "uk_data.demographics" using primary key columns
  """
  uk_data_demographics_by_pk(postcode: String!): uk_data_demographics

  """
  fetch data from the table: "uk_data.electricity_transmission_line"
  """
  uk_data_electricity_transmission_line(
    """distinct select on columns"""
    distinct_on: [uk_data_electricity_transmission_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_electricity_transmission_line_order_by!]

    """filter the rows returned"""
    where: uk_data_electricity_transmission_line_bool_exp
  ): [uk_data_electricity_transmission_line!]!

  """
  fetch aggregated fields from the table: "uk_data.electricity_transmission_line"
  """
  uk_data_electricity_transmission_line_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_electricity_transmission_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_electricity_transmission_line_order_by!]

    """filter the rows returned"""
    where: uk_data_electricity_transmission_line_bool_exp
  ): uk_data_electricity_transmission_line_aggregate!

  """
  fetch data from the table: "uk_data.electricity_transmission_line" using primary key columns
  """
  uk_data_electricity_transmission_line_by_pk(fid: Int!): uk_data_electricity_transmission_line

  """
  fetch data from the table: "uk_data.epc_certificates"
  """
  uk_data_epc_certificates(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_certificates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_certificates_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_certificates_bool_exp
  ): [uk_data_epc_certificates!]!

  """
  fetch aggregated fields from the table: "uk_data.epc_certificates"
  """
  uk_data_epc_certificates_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_certificates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_certificates_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_certificates_bool_exp
  ): uk_data_epc_certificates_aggregate!

  """
  fetch data from the table: "uk_data.epc_certificates" using primary key columns
  """
  uk_data_epc_certificates_by_pk(lmk_key: String!): uk_data_epc_certificates

  """
  fetch data from the table: "uk_data.epc_recommendations"
  """
  uk_data_epc_recommendations(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_recommendations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_recommendations_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_recommendations_bool_exp
  ): [uk_data_epc_recommendations!]!

  """
  fetch aggregated fields from the table: "uk_data.epc_recommendations"
  """
  uk_data_epc_recommendations_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_recommendations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_recommendations_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_recommendations_bool_exp
  ): uk_data_epc_recommendations_aggregate!

  """
  fetch data from the table: "uk_data.flyway_schema_history"
  """
  uk_data_flyway_schema_history(
    """distinct select on columns"""
    distinct_on: [uk_data_flyway_schema_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_flyway_schema_history_order_by!]

    """filter the rows returned"""
    where: uk_data_flyway_schema_history_bool_exp
  ): [uk_data_flyway_schema_history!]!

  """
  fetch aggregated fields from the table: "uk_data.flyway_schema_history"
  """
  uk_data_flyway_schema_history_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_flyway_schema_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_flyway_schema_history_order_by!]

    """filter the rows returned"""
    where: uk_data_flyway_schema_history_bool_exp
  ): uk_data_flyway_schema_history_aggregate!

  """
  fetch data from the table: "uk_data.flyway_schema_history" using primary key columns
  """
  uk_data_flyway_schema_history_by_pk(installed_rank: Int!): uk_data_flyway_schema_history

  """
  fetch data from the table: "uk_data.foreshore"
  """
  uk_data_foreshore(
    """distinct select on columns"""
    distinct_on: [uk_data_foreshore_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_foreshore_order_by!]

    """filter the rows returned"""
    where: uk_data_foreshore_bool_exp
  ): [uk_data_foreshore!]!

  """
  fetch aggregated fields from the table: "uk_data.foreshore"
  """
  uk_data_foreshore_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_foreshore_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_foreshore_order_by!]

    """filter the rows returned"""
    where: uk_data_foreshore_bool_exp
  ): uk_data_foreshore_aggregate!

  """
  fetch data from the table: "uk_data.foreshore" using primary key columns
  """
  uk_data_foreshore_by_pk(fid: Int!): uk_data_foreshore

  """
  fetch data from the table: "uk_data.functional_site"
  """
  uk_data_functional_site(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_bool_exp
  ): [uk_data_functional_site!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site"
  """
  uk_data_functional_site_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_bool_exp
  ): uk_data_functional_site_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_air_transport"
  """
  uk_data_functional_site_air_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_air_transport_bool_exp
  ): [uk_data_functional_site_air_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_air_transport"
  """
  uk_data_functional_site_air_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_air_transport_bool_exp
  ): uk_data_functional_site_air_transport_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_education"
  """
  uk_data_functional_site_education(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_education_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_education_bool_exp
  ): [uk_data_functional_site_education!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_education"
  """
  uk_data_functional_site_education_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_education_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_education_bool_exp
  ): uk_data_functional_site_education_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_medical_care"
  """
  uk_data_functional_site_medical_care(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_medical_care_bool_exp
  ): [uk_data_functional_site_medical_care!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_medical_care"
  """
  uk_data_functional_site_medical_care_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_medical_care_bool_exp
  ): uk_data_functional_site_medical_care_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_road_transport"
  """
  uk_data_functional_site_road_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_road_transport_bool_exp
  ): [uk_data_functional_site_road_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_road_transport"
  """
  uk_data_functional_site_road_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_road_transport_bool_exp
  ): uk_data_functional_site_road_transport_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_water_transport"
  """
  uk_data_functional_site_water_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_water_transport_bool_exp
  ): [uk_data_functional_site_water_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_water_transport"
  """
  uk_data_functional_site_water_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_water_transport_bool_exp
  ): uk_data_functional_site_water_transport_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius(
    """
    input parameters for function "uk_data_functional_sites_within_radius"
    """
    args: uk_data_functional_sites_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_aggregate"
    """
    args: uk_data_functional_sites_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_air_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_air_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_air_transport"
    """
    args: uk_data_functional_sites_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_air_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_air_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_air_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_education" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_education(
    """
    input parameters for function "uk_data_functional_sites_within_radius_education"
    """
    args: uk_data_functional_sites_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_education" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_education_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_education_aggregate"
    """
    args: uk_data_functional_sites_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_medical_care" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_medical_care(
    """
    input parameters for function "uk_data_functional_sites_within_radius_medical_care"
    """
    args: uk_data_functional_sites_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_medical_care" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_medical_care_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_medical_care_aggregate"
    """
    args: uk_data_functional_sites_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_road_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_road_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_road_transport"
    """
    args: uk_data_functional_sites_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_road_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_road_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_road_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_water_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_water_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_water_transport"
    """
    args: uk_data_functional_sites_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_water_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_water_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_water_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  fetch data from the table: "uk_data.glasshouse"
  """
  uk_data_glasshouse(
    """distinct select on columns"""
    distinct_on: [uk_data_glasshouse_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_glasshouse_order_by!]

    """filter the rows returned"""
    where: uk_data_glasshouse_bool_exp
  ): [uk_data_glasshouse!]!

  """
  fetch aggregated fields from the table: "uk_data.glasshouse"
  """
  uk_data_glasshouse_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_glasshouse_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_glasshouse_order_by!]

    """filter the rows returned"""
    where: uk_data_glasshouse_bool_exp
  ): uk_data_glasshouse_aggregate!

  """
  fetch data from the table: "uk_data.glasshouse" using primary key columns
  """
  uk_data_glasshouse_by_pk(fid: Int!): uk_data_glasshouse

  """
  fetch data from the table: "uk_data.growth_stats"
  """
  uk_data_growth_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_growth_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_growth_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_growth_stats_bool_exp
  ): [uk_data_growth_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.growth_stats"
  """
  uk_data_growth_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_growth_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_growth_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_growth_stats_bool_exp
  ): uk_data_growth_stats_aggregate!

  """
  fetch data from the table: "uk_data.growth_stats" using primary key columns
  """
  uk_data_growth_stats_by_pk(postcode: String!): uk_data_growth_stats

  """
  fetch data from the table: "uk_data.hmo_stats"
  """
  uk_data_hmo_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_hmo_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_hmo_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_hmo_stats_bool_exp
  ): [uk_data_hmo_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.hmo_stats"
  """
  uk_data_hmo_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_hmo_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_hmo_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_hmo_stats_bool_exp
  ): uk_data_hmo_stats_aggregate!

  """
  fetch data from the table: "uk_data.hmo_stats" using primary key columns
  """
  uk_data_hmo_stats_by_pk(outcode: String!): uk_data_hmo_stats

  """
  fetch data from the table: "uk_data.house_price_index"
  """
  uk_data_house_price_index(
    """distinct select on columns"""
    distinct_on: [uk_data_house_price_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_house_price_index_order_by!]

    """filter the rows returned"""
    where: uk_data_house_price_index_bool_exp
  ): [uk_data_house_price_index!]!

  """
  fetch aggregated fields from the table: "uk_data.house_price_index"
  """
  uk_data_house_price_index_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_house_price_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_house_price_index_order_by!]

    """filter the rows returned"""
    where: uk_data_house_price_index_bool_exp
  ): uk_data_house_price_index_aggregate!

  """
  fetch data from the table: "uk_data.house_price_index" using primary key columns
  """
  uk_data_house_price_index_by_pk(areacode: String!, date: String!, regionname: String!): uk_data_house_price_index

  """
  fetch data from the table: "uk_data.important_building"
  """
  uk_data_important_building(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_bool_exp
  ): [uk_data_important_building!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building"
  """
  uk_data_important_building_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_bool_exp
  ): uk_data_important_building_aggregate!

  """
  fetch data from the table: "uk_data.important_building_air_transport"
  """
  uk_data_important_building_air_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_air_transport_bool_exp
  ): [uk_data_important_building_air_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_air_transport"
  """
  uk_data_important_building_air_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_air_transport_bool_exp
  ): uk_data_important_building_air_transport_aggregate!

  """
  fetch data from the table: "uk_data.important_building_attraction_and_leisure"
  """
  uk_data_important_building_attraction_and_leisure(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_attraction_and_leisure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_attraction_and_leisure_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_attraction_and_leisure_bool_exp
  ): [uk_data_important_building_attraction_and_leisure!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_attraction_and_leisure"
  """
  uk_data_important_building_attraction_and_leisure_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_attraction_and_leisure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_attraction_and_leisure_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_attraction_and_leisure_bool_exp
  ): uk_data_important_building_attraction_and_leisure_aggregate!

  """
  fetch data from the table: "uk_data.important_building" using primary key columns
  """
  uk_data_important_building_by_pk(fid: Int!): uk_data_important_building

  """
  fetch data from the table: "uk_data.important_building_cultural_facility"
  """
  uk_data_important_building_cultural_facility(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_cultural_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_cultural_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_cultural_facility_bool_exp
  ): [uk_data_important_building_cultural_facility!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_cultural_facility"
  """
  uk_data_important_building_cultural_facility_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_cultural_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_cultural_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_cultural_facility_bool_exp
  ): uk_data_important_building_cultural_facility_aggregate!

  """
  fetch data from the table: "uk_data.important_building_education"
  """
  uk_data_important_building_education(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_education_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_education_bool_exp
  ): [uk_data_important_building_education!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_education"
  """
  uk_data_important_building_education_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_education_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_education_bool_exp
  ): uk_data_important_building_education_aggregate!

  """
  fetch data from the table: "uk_data.important_building_emergency_service"
  """
  uk_data_important_building_emergency_service(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_emergency_service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_emergency_service_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_emergency_service_bool_exp
  ): [uk_data_important_building_emergency_service!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_emergency_service"
  """
  uk_data_important_building_emergency_service_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_emergency_service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_emergency_service_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_emergency_service_bool_exp
  ): uk_data_important_building_emergency_service_aggregate!

  """
  fetch data from the table: "uk_data.important_building_medical_care"
  """
  uk_data_important_building_medical_care(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_medical_care_bool_exp
  ): [uk_data_important_building_medical_care!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_medical_care"
  """
  uk_data_important_building_medical_care_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_medical_care_bool_exp
  ): uk_data_important_building_medical_care_aggregate!

  """
  fetch data from the table: "uk_data.important_building_religious_buildings"
  """
  uk_data_important_building_religious_buildings(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_religious_buildings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_religious_buildings_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_religious_buildings_bool_exp
  ): [uk_data_important_building_religious_buildings!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_religious_buildings"
  """
  uk_data_important_building_religious_buildings_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_religious_buildings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_religious_buildings_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_religious_buildings_bool_exp
  ): uk_data_important_building_religious_buildings_aggregate!

  """
  fetch data from the table: "uk_data.important_building_retail"
  """
  uk_data_important_building_retail(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_retail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_retail_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_retail_bool_exp
  ): [uk_data_important_building_retail!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_retail"
  """
  uk_data_important_building_retail_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_retail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_retail_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_retail_bool_exp
  ): uk_data_important_building_retail_aggregate!

  """
  fetch data from the table: "uk_data.important_building_road_transport"
  """
  uk_data_important_building_road_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_road_transport_bool_exp
  ): [uk_data_important_building_road_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_road_transport"
  """
  uk_data_important_building_road_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_road_transport_bool_exp
  ): uk_data_important_building_road_transport_aggregate!

  """
  fetch data from the table: "uk_data.important_building_sports_or_exercise_facility"
  """
  uk_data_important_building_sports_or_exercise_facility(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_sports_or_exercise_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_sports_or_exercise_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_sports_or_exercise_facility_bool_exp
  ): [uk_data_important_building_sports_or_exercise_facility!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_sports_or_exercise_facility"
  """
  uk_data_important_building_sports_or_exercise_facility_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_sports_or_exercise_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_sports_or_exercise_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_sports_or_exercise_facility_bool_exp
  ): uk_data_important_building_sports_or_exercise_facility_aggregate!

  """
  fetch data from the table: "uk_data.important_building_water_transport"
  """
  uk_data_important_building_water_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_water_transport_bool_exp
  ): [uk_data_important_building_water_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_water_transport"
  """
  uk_data_important_building_water_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_water_transport_bool_exp
  ): uk_data_important_building_water_transport_aggregate!

  """
  fetch data from the table: "uk_data.motorway_junction"
  """
  uk_data_motorway_junction(
    """distinct select on columns"""
    distinct_on: [uk_data_motorway_junction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_motorway_junction_order_by!]

    """filter the rows returned"""
    where: uk_data_motorway_junction_bool_exp
  ): [uk_data_motorway_junction!]!

  """
  fetch aggregated fields from the table: "uk_data.motorway_junction"
  """
  uk_data_motorway_junction_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_motorway_junction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_motorway_junction_order_by!]

    """filter the rows returned"""
    where: uk_data_motorway_junction_bool_exp
  ): uk_data_motorway_junction_aggregate!

  """
  fetch data from the table: "uk_data.motorway_junction" using primary key columns
  """
  uk_data_motorway_junction_by_pk(fid: Int!): uk_data_motorway_junction

  """
  fetch data from the table: "uk_data.named_place"
  """
  uk_data_named_place(
    """distinct select on columns"""
    distinct_on: [uk_data_named_place_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_named_place_order_by!]

    """filter the rows returned"""
    where: uk_data_named_place_bool_exp
  ): [uk_data_named_place!]!

  """
  fetch aggregated fields from the table: "uk_data.named_place"
  """
  uk_data_named_place_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_named_place_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_named_place_order_by!]

    """filter the rows returned"""
    where: uk_data_named_place_bool_exp
  ): uk_data_named_place_aggregate!

  """
  fetch data from the table: "uk_data.named_place" using primary key columns
  """
  uk_data_named_place_by_pk(fid: Int!): uk_data_named_place

  """
  fetch data from the table: "uk_data.osmaps_data"
  """
  uk_data_osmaps_data(
    """distinct select on columns"""
    distinct_on: [uk_data_osmaps_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_osmaps_data_order_by!]

    """filter the rows returned"""
    where: uk_data_osmaps_data_bool_exp
  ): [uk_data_osmaps_data!]!

  """
  fetch aggregated fields from the table: "uk_data.osmaps_data"
  """
  uk_data_osmaps_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_osmaps_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_osmaps_data_order_by!]

    """filter the rows returned"""
    where: uk_data_osmaps_data_bool_exp
  ): uk_data_osmaps_data_aggregate!

  """
  fetch data from the table: "uk_data.osmaps_data" using primary key columns
  """
  uk_data_osmaps_data_by_pk(id: bigint!): uk_data_osmaps_data

  """
  fetch data from the table: "uk_data.outcode_stats"
  """
  uk_data_outcode_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_outcode_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcode_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_outcode_stats_bool_exp
  ): [uk_data_outcode_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.outcode_stats"
  """
  uk_data_outcode_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_outcode_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcode_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_outcode_stats_bool_exp
  ): uk_data_outcode_stats_aggregate!

  """
  fetch data from the table: "uk_data.outcode_stats" using primary key columns
  """
  uk_data_outcode_stats_by_pk(outcode: String!): uk_data_outcode_stats

  """
  fetch data from the table: "uk_data.outcodes"
  """
  uk_data_outcodes(
    """distinct select on columns"""
    distinct_on: [uk_data_outcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_outcodes_bool_exp
  ): [uk_data_outcodes!]!

  """
  fetch aggregated fields from the table: "uk_data.outcodes"
  """
  uk_data_outcodes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_outcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_outcodes_bool_exp
  ): uk_data_outcodes_aggregate!

  """
  execute function "uk_data.place_of_worship_within_radius" which returns "uk_data.aggregated_important_building_data"
  """
  uk_data_place_of_worship_within_radius(
    """
    input parameters for function "uk_data_place_of_worship_within_radius"
    """
    args: uk_data_place_of_worship_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): [uk_data_aggregated_important_building_data!]!

  """
  execute function "uk_data.place_of_worship_within_radius" and query aggregates on result of table type "uk_data.aggregated_important_building_data"
  """
  uk_data_place_of_worship_within_radius_aggregate(
    """
    input parameters for function "uk_data_place_of_worship_within_radius_aggregate"
    """
    args: uk_data_place_of_worship_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): uk_data_aggregated_important_building_data_aggregate!

  """
  fetch data from the table: "uk_data.police_force_neighbourhoods"
  """
  uk_data_police_force_neighbourhoods(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): [uk_data_police_force_neighbourhoods!]!

  """
  fetch aggregated fields from the table: "uk_data.police_force_neighbourhoods"
  """
  uk_data_police_force_neighbourhoods_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): uk_data_police_force_neighbourhoods_aggregate!

  """
  fetch data from the table: "uk_data.police_force_neighbourhoods" using primary key columns
  """
  uk_data_police_force_neighbourhoods_by_pk(neighbourhood: String!, police_force_id: String!): uk_data_police_force_neighbourhoods

  """
  fetch data from the table: "uk_data.police_forces"
  """
  uk_data_police_forces(
    """distinct select on columns"""
    distinct_on: [uk_data_police_forces_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_forces_order_by!]

    """filter the rows returned"""
    where: uk_data_police_forces_bool_exp
  ): [uk_data_police_forces!]!

  """
  fetch aggregated fields from the table: "uk_data.police_forces"
  """
  uk_data_police_forces_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_police_forces_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_forces_order_by!]

    """filter the rows returned"""
    where: uk_data_police_forces_bool_exp
  ): uk_data_police_forces_aggregate!

  """
  fetch data from the table: "uk_data.police_forces" using primary key columns
  """
  uk_data_police_forces_by_pk(id: String!): uk_data_police_forces

  """
  fetch data from the table: "uk_data.population_projection_by_area"
  """
  uk_data_population_projection_by_area(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_area_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_area_bool_exp
  ): [uk_data_population_projection_by_area!]!

  """
  fetch aggregated fields from the table: "uk_data.population_projection_by_area"
  """
  uk_data_population_projection_by_area_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_area_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_area_bool_exp
  ): uk_data_population_projection_by_area_aggregate!

  """
  fetch data from the table: "uk_data.population_projection_by_area" using primary key columns
  """
  uk_data_population_projection_by_area_by_pk(AREA: String!): uk_data_population_projection_by_area

  """
  fetch data from the table: "uk_data.population_projection_by_country"
  """
  uk_data_population_projection_by_country(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_country_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_country_bool_exp
  ): [uk_data_population_projection_by_country!]!

  """
  fetch aggregated fields from the table: "uk_data.population_projection_by_country"
  """
  uk_data_population_projection_by_country_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_country_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_country_bool_exp
  ): uk_data_population_projection_by_country_aggregate!

  """
  fetch data from the table: "uk_data.population_projection_by_country" using primary key columns
  """
  uk_data_population_projection_by_country_by_pk(country: String!): uk_data_population_projection_by_country

  """
  fetch data from the table: "uk_data.postcode_sectors"
  """
  uk_data_postcode_sectors(
    """distinct select on columns"""
    distinct_on: [uk_data_postcode_sectors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcode_sectors_order_by!]

    """filter the rows returned"""
    where: uk_data_postcode_sectors_bool_exp
  ): [uk_data_postcode_sectors!]!

  """
  fetch aggregated fields from the table: "uk_data.postcode_sectors"
  """
  uk_data_postcode_sectors_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_postcode_sectors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcode_sectors_order_by!]

    """filter the rows returned"""
    where: uk_data_postcode_sectors_bool_exp
  ): uk_data_postcode_sectors_aggregate!

  """
  fetch data from the table: "uk_data.postcodes"
  """
  uk_data_postcodes(
    """distinct select on columns"""
    distinct_on: [uk_data_postcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_postcodes_bool_exp
  ): [uk_data_postcodes!]!

  """
  fetch aggregated fields from the table: "uk_data.postcodes"
  """
  uk_data_postcodes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_postcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_postcodes_bool_exp
  ): uk_data_postcodes_aggregate!

  """
  fetch data from the table: "uk_data.price_paid_data"
  """
  uk_data_price_paid_data(
    """distinct select on columns"""
    distinct_on: [uk_data_price_paid_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_price_paid_data_order_by!]

    """filter the rows returned"""
    where: uk_data_price_paid_data_bool_exp
  ): [uk_data_price_paid_data!]!

  """
  fetch aggregated fields from the table: "uk_data.price_paid_data"
  """
  uk_data_price_paid_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_price_paid_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_price_paid_data_order_by!]

    """filter the rows returned"""
    where: uk_data_price_paid_data_bool_exp
  ): uk_data_price_paid_data_aggregate!

  """
  fetch data from the table: "uk_data.price_paid_data" using primary key columns
  """
  uk_data_price_paid_data_by_pk(deed_date: timestamp!, unique_id: String!): uk_data_price_paid_data

  """
  fetch data from the table: "uk_data.property_records"
  """
  uk_data_property_records(
    """distinct select on columns"""
    distinct_on: [uk_data_property_records_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_property_records_order_by!]

    """filter the rows returned"""
    where: uk_data_property_records_bool_exp
  ): [uk_data_property_records!]!

  """
  fetch aggregated fields from the table: "uk_data.property_records"
  """
  uk_data_property_records_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_property_records_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_property_records_order_by!]

    """filter the rows returned"""
    where: uk_data_property_records_bool_exp
  ): uk_data_property_records_aggregate!

  """
  fetch data from the table: "uk_data.property_records" using primary key columns
  """
  uk_data_property_records_by_pk(uprn: bigint!): uk_data_property_records

  """
  fetch data from the table: "uk_data.railway_station"
  """
  uk_data_railway_station(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_station_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_station_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_station_bool_exp
  ): [uk_data_railway_station!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_station"
  """
  uk_data_railway_station_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_station_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_station_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_station_bool_exp
  ): uk_data_railway_station_aggregate!

  """
  fetch data from the table: "uk_data.railway_station" using primary key columns
  """
  uk_data_railway_station_by_pk(fid: Int!): uk_data_railway_station

  """
  execute function "uk_data.railway_stations_within_radius" which returns "uk_data.aggregated_railway_station_data"
  """
  uk_data_railway_stations_within_radius(
    """
    input parameters for function "uk_data_railway_stations_within_radius"
    """
    args: uk_data_railway_stations_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): [uk_data_aggregated_railway_station_data!]!

  """
  execute function "uk_data.railway_stations_within_radius" and query aggregates on result of table type "uk_data.aggregated_railway_station_data"
  """
  uk_data_railway_stations_within_radius_aggregate(
    """
    input parameters for function "uk_data_railway_stations_within_radius_aggregate"
    """
    args: uk_data_railway_stations_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): uk_data_aggregated_railway_station_data_aggregate!

  """
  fetch data from the table: "uk_data.railway_track"
  """
  uk_data_railway_track(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_track_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_track_bool_exp
  ): [uk_data_railway_track!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_track"
  """
  uk_data_railway_track_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_track_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_track_bool_exp
  ): uk_data_railway_track_aggregate!

  """
  fetch data from the table: "uk_data.railway_track" using primary key columns
  """
  uk_data_railway_track_by_pk(fid: Int!): uk_data_railway_track

  """
  fetch data from the table: "uk_data.railway_tunnel"
  """
  uk_data_railway_tunnel(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_tunnel_bool_exp
  ): [uk_data_railway_tunnel!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_tunnel"
  """
  uk_data_railway_tunnel_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_tunnel_bool_exp
  ): uk_data_railway_tunnel_aggregate!

  """
  fetch data from the table: "uk_data.railway_tunnel" using primary key columns
  """
  uk_data_railway_tunnel_by_pk(fid: Int!): uk_data_railway_tunnel

  """
  fetch data from the table: "uk_data.rent_demand_stats"
  """
  uk_data_rent_demand_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_rent_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_rent_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_rent_demand_stats_bool_exp
  ): [uk_data_rent_demand_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.rent_demand_stats"
  """
  uk_data_rent_demand_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_rent_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_rent_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_rent_demand_stats_bool_exp
  ): uk_data_rent_demand_stats_aggregate!

  """
  fetch data from the table: "uk_data.rent_demand_stats" using primary key columns
  """
  uk_data_rent_demand_stats_by_pk(outcode: String!): uk_data_rent_demand_stats

  """
  fetch data from the table: "uk_data.road"
  """
  uk_data_road(
    """distinct select on columns"""
    distinct_on: [uk_data_road_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_order_by!]

    """filter the rows returned"""
    where: uk_data_road_bool_exp
  ): [uk_data_road!]!

  """
  fetch aggregated fields from the table: "uk_data.road"
  """
  uk_data_road_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_road_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_order_by!]

    """filter the rows returned"""
    where: uk_data_road_bool_exp
  ): uk_data_road_aggregate!

  """fetch data from the table: "uk_data.road" using primary key columns"""
  uk_data_road_by_pk(fid: Int!): uk_data_road

  """
  fetch data from the table: "uk_data.road_tunnel"
  """
  uk_data_road_tunnel(
    """distinct select on columns"""
    distinct_on: [uk_data_road_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_road_tunnel_bool_exp
  ): [uk_data_road_tunnel!]!

  """
  fetch aggregated fields from the table: "uk_data.road_tunnel"
  """
  uk_data_road_tunnel_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_road_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_road_tunnel_bool_exp
  ): uk_data_road_tunnel_aggregate!

  """
  fetch data from the table: "uk_data.road_tunnel" using primary key columns
  """
  uk_data_road_tunnel_by_pk(fid: Int!): uk_data_road_tunnel

  """
  fetch data from the table: "uk_data.roundabout"
  """
  uk_data_roundabout(
    """distinct select on columns"""
    distinct_on: [uk_data_roundabout_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_roundabout_order_by!]

    """filter the rows returned"""
    where: uk_data_roundabout_bool_exp
  ): [uk_data_roundabout!]!

  """
  fetch aggregated fields from the table: "uk_data.roundabout"
  """
  uk_data_roundabout_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_roundabout_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_roundabout_order_by!]

    """filter the rows returned"""
    where: uk_data_roundabout_bool_exp
  ): uk_data_roundabout_aggregate!

  """
  fetch data from the table: "uk_data.roundabout" using primary key columns
  """
  uk_data_roundabout_by_pk(fid: Int!): uk_data_roundabout

  """
  fetch data from the table: "uk_data.schools"
  """
  uk_data_schools(
    """distinct select on columns"""
    distinct_on: [uk_data_schools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_schools_order_by!]

    """filter the rows returned"""
    where: uk_data_schools_bool_exp
  ): [uk_data_schools!]!

  """
  fetch aggregated fields from the table: "uk_data.schools"
  """
  uk_data_schools_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_schools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_schools_order_by!]

    """filter the rows returned"""
    where: uk_data_schools_bool_exp
  ): uk_data_schools_aggregate!

  """fetch data from the table: "uk_data.schools" using primary key columns"""
  uk_data_schools_by_pk(postcode: String!): uk_data_schools

  """
  execute function "uk_data.sites_nearby_within_radius_air_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_air_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_air_transport"
    """
    args: uk_data_sites_nearby_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_air_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_air_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_air_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_attraction_and_leisure" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_attraction_and_leisure(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_attraction_and_leisure"
    """
    args: uk_data_sites_nearby_within_radius_attraction_and_leisure_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_attraction_and_leisure" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_attraction_and_leisure_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_attraction_and_leisure_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_attraction_and_leisure_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_cultural_facility" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_cultural_facility(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_cultural_facility"
    """
    args: uk_data_sites_nearby_within_radius_cultural_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_cultural_facility" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_cultural_facility_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_cultural_facility_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_cultural_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_education" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_education(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_education"
    """
    args: uk_data_sites_nearby_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_education" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_education_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_education_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_emergency_service" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_emergency_service(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_emergency_service"
    """
    args: uk_data_sites_nearby_within_radius_emergency_service_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_emergency_service" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_emergency_service_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_emergency_service_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_emergency_service_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_medical_care" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_medical_care(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_medical_care"
    """
    args: uk_data_sites_nearby_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_medical_care" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_medical_care_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_medical_care_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_religious_buildings" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_religious_buildings(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_religious_buildings"
    """
    args: uk_data_sites_nearby_within_radius_religious_buildings_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_religious_buildings" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_religious_buildings_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_religious_buildings_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_religious_buildings_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_retail" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_retail(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_retail"
    """
    args: uk_data_sites_nearby_within_radius_retail_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_retail" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_retail_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_retail_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_retail_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_road_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_road_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_road_transport"
    """
    args: uk_data_sites_nearby_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_road_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_road_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_road_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_sports_or_exercise_facility" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_sports_or_exercise_facility(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_sports_or_exercise_facility"
    """
    args: uk_data_sites_nearby_within_radius_sports_or_exercise_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_sports_or_exercise_facility" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_sports_or_exercise_facility_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_sports_or_exercise_facility_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_sports_or_exercise_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_water_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_water_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_water_transport"
    """
    args: uk_data_sites_nearby_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_water_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_water_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_water_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  fetch data from the table: "uk_data.street_crimes"
  """
  uk_data_street_crimes(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_bool_exp
  ): [uk_data_street_crimes!]!

  """
  fetch aggregated fields from the table: "uk_data.street_crimes"
  """
  uk_data_street_crimes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_bool_exp
  ): uk_data_street_crimes_aggregate!

  """
  fetch data from the table: "uk_data.street_crimes" using primary key columns
  """
  uk_data_street_crimes_by_pk(crime_id: String!): uk_data_street_crimes

  """
  fetch data from the table: "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_with_distance(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): [uk_data_street_crimes_with_distance!]!

  """
  fetch aggregated fields from the table: "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_with_distance_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): uk_data_street_crimes_with_distance_aggregate!

  """
  execute function "uk_data.street_crimes_within_radius" which returns "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_within_radius(
    """
    input parameters for function "uk_data_street_crimes_within_radius"
    """
    args: uk_data_street_crimes_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): [uk_data_street_crimes_with_distance!]!

  """
  execute function "uk_data.street_crimes_within_radius" and query aggregates on result of table type "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_within_radius_aggregate(
    """
    input parameters for function "uk_data_street_crimes_within_radius_aggregate"
    """
    args: uk_data_street_crimes_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): uk_data_street_crimes_with_distance_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_area"
  """
  uk_data_surface_water_area(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_area_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_area_bool_exp
  ): [uk_data_surface_water_area!]!

  """
  fetch aggregated fields from the table: "uk_data.surface_water_area"
  """
  uk_data_surface_water_area_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_area_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_area_bool_exp
  ): uk_data_surface_water_area_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_area" using primary key columns
  """
  uk_data_surface_water_area_by_pk(fid: Int!): uk_data_surface_water_area

  """
  fetch data from the table: "uk_data.surface_water_line"
  """
  uk_data_surface_water_line(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_line_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_line_bool_exp
  ): [uk_data_surface_water_line!]!

  """
  fetch aggregated fields from the table: "uk_data.surface_water_line"
  """
  uk_data_surface_water_line_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_line_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_line_bool_exp
  ): uk_data_surface_water_line_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_line" using primary key columns
  """
  uk_data_surface_water_line_by_pk(fid: Int!): uk_data_surface_water_line

  """
  fetch data from the table: "uk_data.tidal_boundary"
  """
  uk_data_tidal_boundary(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_boundary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_boundary_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_boundary_bool_exp
  ): [uk_data_tidal_boundary!]!

  """
  fetch aggregated fields from the table: "uk_data.tidal_boundary"
  """
  uk_data_tidal_boundary_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_boundary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_boundary_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_boundary_bool_exp
  ): uk_data_tidal_boundary_aggregate!

  """
  fetch data from the table: "uk_data.tidal_boundary" using primary key columns
  """
  uk_data_tidal_boundary_by_pk(fid: Int!): uk_data_tidal_boundary

  """
  fetch data from the table: "uk_data.tidal_water"
  """
  uk_data_tidal_water(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_water_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_water_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_water_bool_exp
  ): [uk_data_tidal_water!]!

  """
  fetch aggregated fields from the table: "uk_data.tidal_water"
  """
  uk_data_tidal_water_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_water_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_water_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_water_bool_exp
  ): uk_data_tidal_water_aggregate!

  """
  fetch data from the table: "uk_data.tidal_water" using primary key columns
  """
  uk_data_tidal_water_by_pk(fid: Int!): uk_data_tidal_water

  """
  fetch data from the table: "uk_data.woodland"
  """
  uk_data_woodland(
    """distinct select on columns"""
    distinct_on: [uk_data_woodland_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_woodland_order_by!]

    """filter the rows returned"""
    where: uk_data_woodland_bool_exp
  ): [uk_data_woodland!]!

  """
  fetch aggregated fields from the table: "uk_data.woodland"
  """
  uk_data_woodland_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_woodland_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_woodland_order_by!]

    """filter the rows returned"""
    where: uk_data_woodland_bool_exp
  ): uk_data_woodland_aggregate!

  """
  fetch data from the table: "uk_data.woodland" using primary key columns
  """
  uk_data_woodland_by_pk(fid: Int!): uk_data_woodland

  """
  fetch data from the table: "uk_data.yield_stats"
  """
  uk_data_yield_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_yield_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_yield_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_yield_stats_bool_exp
  ): [uk_data_yield_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.yield_stats"
  """
  uk_data_yield_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_yield_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_yield_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_yield_stats_bool_exp
  ): uk_data_yield_stats_aggregate!

  """
  fetch data from the table: "uk_data.yield_stats" using primary key columns
  """
  uk_data_yield_stats_by_pk(postcode: String!): uk_data_yield_stats
}

input st_d_within_geography_input {
  distance: Float!
  from: geography!
  use_spheroid: Boolean = true
}

input st_d_within_input {
  distance: Float!
  from: geometry!
}

type subscription_root {
  """
  fetch data from the table: "uk_data.aggregated_charging_point_data"
  """
  uk_data_aggregated_charging_point_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): [uk_data_aggregated_charging_point_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_charging_point_data"
  """
  uk_data_aggregated_charging_point_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): uk_data_aggregated_charging_point_data_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.aggregated_charging_point_data"
  """
  uk_data_aggregated_charging_point_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_aggregated_charging_point_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): [uk_data_aggregated_charging_point_data!]!

  """
  fetch data from the table: "uk_data.aggregated_functional_site_data"
  """
  uk_data_aggregated_functional_site_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_functional_site_data"
  """
  uk_data_aggregated_functional_site_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.aggregated_functional_site_data"
  """
  uk_data_aggregated_functional_site_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_aggregated_functional_site_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  fetch data from the table: "uk_data.aggregated_important_building_data"
  """
  uk_data_aggregated_important_building_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): [uk_data_aggregated_important_building_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_important_building_data"
  """
  uk_data_aggregated_important_building_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): uk_data_aggregated_important_building_data_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.aggregated_important_building_data"
  """
  uk_data_aggregated_important_building_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_aggregated_important_building_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): [uk_data_aggregated_important_building_data!]!

  """
  fetch data from the table: "uk_data.aggregated_railway_station_data"
  """
  uk_data_aggregated_railway_station_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): [uk_data_aggregated_railway_station_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_railway_station_data"
  """
  uk_data_aggregated_railway_station_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): uk_data_aggregated_railway_station_data_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.aggregated_railway_station_data"
  """
  uk_data_aggregated_railway_station_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_aggregated_railway_station_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): [uk_data_aggregated_railway_station_data!]!

  """
  fetch data from the table: "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_aggregated_sites_nearby_data(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  fetch aggregated fields from the table: "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_aggregated_sites_nearby_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_aggregated_sites_nearby_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_aggregated_sites_nearby_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  fetch data from the table: "uk_data.building"
  """
  uk_data_building(
    """distinct select on columns"""
    distinct_on: [uk_data_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_building_order_by!]

    """filter the rows returned"""
    where: uk_data_building_bool_exp
  ): [uk_data_building!]!

  """
  fetch aggregated fields from the table: "uk_data.building"
  """
  uk_data_building_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_building_order_by!]

    """filter the rows returned"""
    where: uk_data_building_bool_exp
  ): uk_data_building_aggregate!

  """
  fetch data from the table: "uk_data.building" using primary key columns
  """
  uk_data_building_by_pk(fid: Int!): uk_data_building

  """
  fetch data from the table in a streaming manner: "uk_data.building"
  """
  uk_data_building_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_building_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_building_bool_exp
  ): [uk_data_building!]!

  """
  fetch data from the table: "uk_data.car_charging_point"
  """
  uk_data_car_charging_point(
    """distinct select on columns"""
    distinct_on: [uk_data_car_charging_point_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_car_charging_point_order_by!]

    """filter the rows returned"""
    where: uk_data_car_charging_point_bool_exp
  ): [uk_data_car_charging_point!]!

  """
  fetch aggregated fields from the table: "uk_data.car_charging_point"
  """
  uk_data_car_charging_point_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_car_charging_point_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_car_charging_point_order_by!]

    """filter the rows returned"""
    where: uk_data_car_charging_point_bool_exp
  ): uk_data_car_charging_point_aggregate!

  """
  fetch data from the table: "uk_data.car_charging_point" using primary key columns
  """
  uk_data_car_charging_point_by_pk(fid: Int!): uk_data_car_charging_point

  """
  fetch data from the table in a streaming manner: "uk_data.car_charging_point"
  """
  uk_data_car_charging_point_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_car_charging_point_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_car_charging_point_bool_exp
  ): [uk_data_car_charging_point!]!

  """
  execute function "uk_data.charging_point_within_radius" which returns "uk_data.aggregated_charging_point_data"
  """
  uk_data_charging_point_within_radius(
    """
    input parameters for function "uk_data_charging_point_within_radius"
    """
    args: uk_data_charging_point_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): [uk_data_aggregated_charging_point_data!]!

  """
  execute function "uk_data.charging_point_within_radius" and query aggregates on result of table type "uk_data.aggregated_charging_point_data"
  """
  uk_data_charging_point_within_radius_aggregate(
    """
    input parameters for function "uk_data_charging_point_within_radius_aggregate"
    """
    args: uk_data_charging_point_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_charging_point_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_charging_point_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_charging_point_data_bool_exp
  ): uk_data_aggregated_charging_point_data_aggregate!

  """
  fetch data from the table: "uk_data.city_details"
  """
  uk_data_city_details(
    """distinct select on columns"""
    distinct_on: [uk_data_city_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_city_details_order_by!]

    """filter the rows returned"""
    where: uk_data_city_details_bool_exp
  ): [uk_data_city_details!]!

  """
  fetch aggregated fields from the table: "uk_data.city_details"
  """
  uk_data_city_details_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_city_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_city_details_order_by!]

    """filter the rows returned"""
    where: uk_data_city_details_bool_exp
  ): uk_data_city_details_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.city_details"
  """
  uk_data_city_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_city_details_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_city_details_bool_exp
  ): [uk_data_city_details!]!

  """
  fetch data from the table: "uk_data.county_details"
  """
  uk_data_county_details(
    """distinct select on columns"""
    distinct_on: [uk_data_county_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_county_details_order_by!]

    """filter the rows returned"""
    where: uk_data_county_details_bool_exp
  ): [uk_data_county_details!]!

  """
  fetch aggregated fields from the table: "uk_data.county_details"
  """
  uk_data_county_details_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_county_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_county_details_order_by!]

    """filter the rows returned"""
    where: uk_data_county_details_bool_exp
  ): uk_data_county_details_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.county_details"
  """
  uk_data_county_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_county_details_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_county_details_bool_exp
  ): [uk_data_county_details!]!

  """
  fetch data from the table: "uk_data.demand_stats"
  """
  uk_data_demand_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_demand_stats_bool_exp
  ): [uk_data_demand_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.demand_stats"
  """
  uk_data_demand_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_demand_stats_bool_exp
  ): uk_data_demand_stats_aggregate!

  """
  fetch data from the table: "uk_data.demand_stats" using primary key columns
  """
  uk_data_demand_stats_by_pk(postcode: String!): uk_data_demand_stats

  """
  fetch data from the table in a streaming manner: "uk_data.demand_stats"
  """
  uk_data_demand_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_demand_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_demand_stats_bool_exp
  ): [uk_data_demand_stats!]!

  """
  fetch data from the table: "uk_data.demographics"
  """
  uk_data_demographics(
    """distinct select on columns"""
    distinct_on: [uk_data_demographics_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demographics_order_by!]

    """filter the rows returned"""
    where: uk_data_demographics_bool_exp
  ): [uk_data_demographics!]!

  """
  fetch aggregated fields from the table: "uk_data.demographics"
  """
  uk_data_demographics_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_demographics_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_demographics_order_by!]

    """filter the rows returned"""
    where: uk_data_demographics_bool_exp
  ): uk_data_demographics_aggregate!

  """
  fetch data from the table: "uk_data.demographics" using primary key columns
  """
  uk_data_demographics_by_pk(postcode: String!): uk_data_demographics

  """
  fetch data from the table in a streaming manner: "uk_data.demographics"
  """
  uk_data_demographics_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_demographics_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_demographics_bool_exp
  ): [uk_data_demographics!]!

  """
  fetch data from the table: "uk_data.electricity_transmission_line"
  """
  uk_data_electricity_transmission_line(
    """distinct select on columns"""
    distinct_on: [uk_data_electricity_transmission_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_electricity_transmission_line_order_by!]

    """filter the rows returned"""
    where: uk_data_electricity_transmission_line_bool_exp
  ): [uk_data_electricity_transmission_line!]!

  """
  fetch aggregated fields from the table: "uk_data.electricity_transmission_line"
  """
  uk_data_electricity_transmission_line_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_electricity_transmission_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_electricity_transmission_line_order_by!]

    """filter the rows returned"""
    where: uk_data_electricity_transmission_line_bool_exp
  ): uk_data_electricity_transmission_line_aggregate!

  """
  fetch data from the table: "uk_data.electricity_transmission_line" using primary key columns
  """
  uk_data_electricity_transmission_line_by_pk(fid: Int!): uk_data_electricity_transmission_line

  """
  fetch data from the table in a streaming manner: "uk_data.electricity_transmission_line"
  """
  uk_data_electricity_transmission_line_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_electricity_transmission_line_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_electricity_transmission_line_bool_exp
  ): [uk_data_electricity_transmission_line!]!

  """
  fetch data from the table: "uk_data.epc_certificates"
  """
  uk_data_epc_certificates(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_certificates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_certificates_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_certificates_bool_exp
  ): [uk_data_epc_certificates!]!

  """
  fetch aggregated fields from the table: "uk_data.epc_certificates"
  """
  uk_data_epc_certificates_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_certificates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_certificates_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_certificates_bool_exp
  ): uk_data_epc_certificates_aggregate!

  """
  fetch data from the table: "uk_data.epc_certificates" using primary key columns
  """
  uk_data_epc_certificates_by_pk(lmk_key: String!): uk_data_epc_certificates

  """
  fetch data from the table in a streaming manner: "uk_data.epc_certificates"
  """
  uk_data_epc_certificates_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_epc_certificates_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_epc_certificates_bool_exp
  ): [uk_data_epc_certificates!]!

  """
  fetch data from the table: "uk_data.epc_recommendations"
  """
  uk_data_epc_recommendations(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_recommendations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_recommendations_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_recommendations_bool_exp
  ): [uk_data_epc_recommendations!]!

  """
  fetch aggregated fields from the table: "uk_data.epc_recommendations"
  """
  uk_data_epc_recommendations_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_epc_recommendations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_epc_recommendations_order_by!]

    """filter the rows returned"""
    where: uk_data_epc_recommendations_bool_exp
  ): uk_data_epc_recommendations_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.epc_recommendations"
  """
  uk_data_epc_recommendations_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_epc_recommendations_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_epc_recommendations_bool_exp
  ): [uk_data_epc_recommendations!]!

  """
  fetch data from the table: "uk_data.flyway_schema_history"
  """
  uk_data_flyway_schema_history(
    """distinct select on columns"""
    distinct_on: [uk_data_flyway_schema_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_flyway_schema_history_order_by!]

    """filter the rows returned"""
    where: uk_data_flyway_schema_history_bool_exp
  ): [uk_data_flyway_schema_history!]!

  """
  fetch aggregated fields from the table: "uk_data.flyway_schema_history"
  """
  uk_data_flyway_schema_history_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_flyway_schema_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_flyway_schema_history_order_by!]

    """filter the rows returned"""
    where: uk_data_flyway_schema_history_bool_exp
  ): uk_data_flyway_schema_history_aggregate!

  """
  fetch data from the table: "uk_data.flyway_schema_history" using primary key columns
  """
  uk_data_flyway_schema_history_by_pk(installed_rank: Int!): uk_data_flyway_schema_history

  """
  fetch data from the table in a streaming manner: "uk_data.flyway_schema_history"
  """
  uk_data_flyway_schema_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_flyway_schema_history_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_flyway_schema_history_bool_exp
  ): [uk_data_flyway_schema_history!]!

  """
  fetch data from the table: "uk_data.foreshore"
  """
  uk_data_foreshore(
    """distinct select on columns"""
    distinct_on: [uk_data_foreshore_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_foreshore_order_by!]

    """filter the rows returned"""
    where: uk_data_foreshore_bool_exp
  ): [uk_data_foreshore!]!

  """
  fetch aggregated fields from the table: "uk_data.foreshore"
  """
  uk_data_foreshore_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_foreshore_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_foreshore_order_by!]

    """filter the rows returned"""
    where: uk_data_foreshore_bool_exp
  ): uk_data_foreshore_aggregate!

  """
  fetch data from the table: "uk_data.foreshore" using primary key columns
  """
  uk_data_foreshore_by_pk(fid: Int!): uk_data_foreshore

  """
  fetch data from the table in a streaming manner: "uk_data.foreshore"
  """
  uk_data_foreshore_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_foreshore_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_foreshore_bool_exp
  ): [uk_data_foreshore!]!

  """
  fetch data from the table: "uk_data.functional_site"
  """
  uk_data_functional_site(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_bool_exp
  ): [uk_data_functional_site!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site"
  """
  uk_data_functional_site_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_bool_exp
  ): uk_data_functional_site_aggregate!

  """
  fetch data from the table: "uk_data.functional_site_air_transport"
  """
  uk_data_functional_site_air_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_air_transport_bool_exp
  ): [uk_data_functional_site_air_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_air_transport"
  """
  uk_data_functional_site_air_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_air_transport_bool_exp
  ): uk_data_functional_site_air_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site_air_transport"
  """
  uk_data_functional_site_air_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_air_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_air_transport_bool_exp
  ): [uk_data_functional_site_air_transport!]!

  """
  fetch data from the table: "uk_data.functional_site_education"
  """
  uk_data_functional_site_education(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_education_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_education_bool_exp
  ): [uk_data_functional_site_education!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_education"
  """
  uk_data_functional_site_education_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_education_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_education_bool_exp
  ): uk_data_functional_site_education_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site_education"
  """
  uk_data_functional_site_education_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_education_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_education_bool_exp
  ): [uk_data_functional_site_education!]!

  """
  fetch data from the table: "uk_data.functional_site_medical_care"
  """
  uk_data_functional_site_medical_care(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_medical_care_bool_exp
  ): [uk_data_functional_site_medical_care!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_medical_care"
  """
  uk_data_functional_site_medical_care_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_medical_care_bool_exp
  ): uk_data_functional_site_medical_care_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site_medical_care"
  """
  uk_data_functional_site_medical_care_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_medical_care_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_medical_care_bool_exp
  ): [uk_data_functional_site_medical_care!]!

  """
  fetch data from the table: "uk_data.functional_site_road_transport"
  """
  uk_data_functional_site_road_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_road_transport_bool_exp
  ): [uk_data_functional_site_road_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_road_transport"
  """
  uk_data_functional_site_road_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_road_transport_bool_exp
  ): uk_data_functional_site_road_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site_road_transport"
  """
  uk_data_functional_site_road_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_road_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_road_transport_bool_exp
  ): [uk_data_functional_site_road_transport!]!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site"
  """
  uk_data_functional_site_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_bool_exp
  ): [uk_data_functional_site!]!

  """
  fetch data from the table: "uk_data.functional_site_water_transport"
  """
  uk_data_functional_site_water_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_water_transport_bool_exp
  ): [uk_data_functional_site_water_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.functional_site_water_transport"
  """
  uk_data_functional_site_water_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_functional_site_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_functional_site_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_functional_site_water_transport_bool_exp
  ): uk_data_functional_site_water_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.functional_site_water_transport"
  """
  uk_data_functional_site_water_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_functional_site_water_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_functional_site_water_transport_bool_exp
  ): [uk_data_functional_site_water_transport!]!

  """
  execute function "uk_data.functional_sites_within_radius" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius(
    """
    input parameters for function "uk_data_functional_sites_within_radius"
    """
    args: uk_data_functional_sites_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_aggregate"
    """
    args: uk_data_functional_sites_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_air_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_air_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_air_transport"
    """
    args: uk_data_functional_sites_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_air_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_air_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_air_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_education" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_education(
    """
    input parameters for function "uk_data_functional_sites_within_radius_education"
    """
    args: uk_data_functional_sites_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_education" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_education_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_education_aggregate"
    """
    args: uk_data_functional_sites_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_medical_care" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_medical_care(
    """
    input parameters for function "uk_data_functional_sites_within_radius_medical_care"
    """
    args: uk_data_functional_sites_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_medical_care" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_medical_care_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_medical_care_aggregate"
    """
    args: uk_data_functional_sites_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_road_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_road_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_road_transport"
    """
    args: uk_data_functional_sites_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_road_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_road_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_road_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  execute function "uk_data.functional_sites_within_radius_water_transport" which returns "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_water_transport(
    """
    input parameters for function "uk_data_functional_sites_within_radius_water_transport"
    """
    args: uk_data_functional_sites_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): [uk_data_aggregated_functional_site_data!]!

  """
  execute function "uk_data.functional_sites_within_radius_water_transport" and query aggregates on result of table type "uk_data.aggregated_functional_site_data"
  """
  uk_data_functional_sites_within_radius_water_transport_aggregate(
    """
    input parameters for function "uk_data_functional_sites_within_radius_water_transport_aggregate"
    """
    args: uk_data_functional_sites_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_functional_site_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_functional_site_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_functional_site_data_bool_exp
  ): uk_data_aggregated_functional_site_data_aggregate!

  """
  fetch data from the table: "uk_data.glasshouse"
  """
  uk_data_glasshouse(
    """distinct select on columns"""
    distinct_on: [uk_data_glasshouse_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_glasshouse_order_by!]

    """filter the rows returned"""
    where: uk_data_glasshouse_bool_exp
  ): [uk_data_glasshouse!]!

  """
  fetch aggregated fields from the table: "uk_data.glasshouse"
  """
  uk_data_glasshouse_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_glasshouse_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_glasshouse_order_by!]

    """filter the rows returned"""
    where: uk_data_glasshouse_bool_exp
  ): uk_data_glasshouse_aggregate!

  """
  fetch data from the table: "uk_data.glasshouse" using primary key columns
  """
  uk_data_glasshouse_by_pk(fid: Int!): uk_data_glasshouse

  """
  fetch data from the table in a streaming manner: "uk_data.glasshouse"
  """
  uk_data_glasshouse_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_glasshouse_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_glasshouse_bool_exp
  ): [uk_data_glasshouse!]!

  """
  fetch data from the table: "uk_data.growth_stats"
  """
  uk_data_growth_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_growth_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_growth_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_growth_stats_bool_exp
  ): [uk_data_growth_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.growth_stats"
  """
  uk_data_growth_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_growth_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_growth_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_growth_stats_bool_exp
  ): uk_data_growth_stats_aggregate!

  """
  fetch data from the table: "uk_data.growth_stats" using primary key columns
  """
  uk_data_growth_stats_by_pk(postcode: String!): uk_data_growth_stats

  """
  fetch data from the table in a streaming manner: "uk_data.growth_stats"
  """
  uk_data_growth_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_growth_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_growth_stats_bool_exp
  ): [uk_data_growth_stats!]!

  """
  fetch data from the table: "uk_data.hmo_stats"
  """
  uk_data_hmo_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_hmo_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_hmo_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_hmo_stats_bool_exp
  ): [uk_data_hmo_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.hmo_stats"
  """
  uk_data_hmo_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_hmo_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_hmo_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_hmo_stats_bool_exp
  ): uk_data_hmo_stats_aggregate!

  """
  fetch data from the table: "uk_data.hmo_stats" using primary key columns
  """
  uk_data_hmo_stats_by_pk(outcode: String!): uk_data_hmo_stats

  """
  fetch data from the table in a streaming manner: "uk_data.hmo_stats"
  """
  uk_data_hmo_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_hmo_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_hmo_stats_bool_exp
  ): [uk_data_hmo_stats!]!

  """
  fetch data from the table: "uk_data.house_price_index"
  """
  uk_data_house_price_index(
    """distinct select on columns"""
    distinct_on: [uk_data_house_price_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_house_price_index_order_by!]

    """filter the rows returned"""
    where: uk_data_house_price_index_bool_exp
  ): [uk_data_house_price_index!]!

  """
  fetch aggregated fields from the table: "uk_data.house_price_index"
  """
  uk_data_house_price_index_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_house_price_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_house_price_index_order_by!]

    """filter the rows returned"""
    where: uk_data_house_price_index_bool_exp
  ): uk_data_house_price_index_aggregate!

  """
  fetch data from the table: "uk_data.house_price_index" using primary key columns
  """
  uk_data_house_price_index_by_pk(areacode: String!, date: String!, regionname: String!): uk_data_house_price_index

  """
  fetch data from the table in a streaming manner: "uk_data.house_price_index"
  """
  uk_data_house_price_index_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_house_price_index_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_house_price_index_bool_exp
  ): [uk_data_house_price_index!]!

  """
  fetch data from the table: "uk_data.important_building"
  """
  uk_data_important_building(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_bool_exp
  ): [uk_data_important_building!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building"
  """
  uk_data_important_building_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_bool_exp
  ): uk_data_important_building_aggregate!

  """
  fetch data from the table: "uk_data.important_building_air_transport"
  """
  uk_data_important_building_air_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_air_transport_bool_exp
  ): [uk_data_important_building_air_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_air_transport"
  """
  uk_data_important_building_air_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_air_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_air_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_air_transport_bool_exp
  ): uk_data_important_building_air_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_air_transport"
  """
  uk_data_important_building_air_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_air_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_air_transport_bool_exp
  ): [uk_data_important_building_air_transport!]!

  """
  fetch data from the table: "uk_data.important_building_attraction_and_leisure"
  """
  uk_data_important_building_attraction_and_leisure(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_attraction_and_leisure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_attraction_and_leisure_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_attraction_and_leisure_bool_exp
  ): [uk_data_important_building_attraction_and_leisure!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_attraction_and_leisure"
  """
  uk_data_important_building_attraction_and_leisure_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_attraction_and_leisure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_attraction_and_leisure_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_attraction_and_leisure_bool_exp
  ): uk_data_important_building_attraction_and_leisure_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_attraction_and_leisure"
  """
  uk_data_important_building_attraction_and_leisure_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_attraction_and_leisure_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_attraction_and_leisure_bool_exp
  ): [uk_data_important_building_attraction_and_leisure!]!

  """
  fetch data from the table: "uk_data.important_building" using primary key columns
  """
  uk_data_important_building_by_pk(fid: Int!): uk_data_important_building

  """
  fetch data from the table: "uk_data.important_building_cultural_facility"
  """
  uk_data_important_building_cultural_facility(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_cultural_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_cultural_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_cultural_facility_bool_exp
  ): [uk_data_important_building_cultural_facility!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_cultural_facility"
  """
  uk_data_important_building_cultural_facility_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_cultural_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_cultural_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_cultural_facility_bool_exp
  ): uk_data_important_building_cultural_facility_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_cultural_facility"
  """
  uk_data_important_building_cultural_facility_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_cultural_facility_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_cultural_facility_bool_exp
  ): [uk_data_important_building_cultural_facility!]!

  """
  fetch data from the table: "uk_data.important_building_education"
  """
  uk_data_important_building_education(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_education_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_education_bool_exp
  ): [uk_data_important_building_education!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_education"
  """
  uk_data_important_building_education_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_education_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_education_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_education_bool_exp
  ): uk_data_important_building_education_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_education"
  """
  uk_data_important_building_education_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_education_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_education_bool_exp
  ): [uk_data_important_building_education!]!

  """
  fetch data from the table: "uk_data.important_building_emergency_service"
  """
  uk_data_important_building_emergency_service(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_emergency_service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_emergency_service_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_emergency_service_bool_exp
  ): [uk_data_important_building_emergency_service!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_emergency_service"
  """
  uk_data_important_building_emergency_service_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_emergency_service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_emergency_service_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_emergency_service_bool_exp
  ): uk_data_important_building_emergency_service_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_emergency_service"
  """
  uk_data_important_building_emergency_service_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_emergency_service_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_emergency_service_bool_exp
  ): [uk_data_important_building_emergency_service!]!

  """
  fetch data from the table: "uk_data.important_building_medical_care"
  """
  uk_data_important_building_medical_care(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_medical_care_bool_exp
  ): [uk_data_important_building_medical_care!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_medical_care"
  """
  uk_data_important_building_medical_care_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_medical_care_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_medical_care_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_medical_care_bool_exp
  ): uk_data_important_building_medical_care_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_medical_care"
  """
  uk_data_important_building_medical_care_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_medical_care_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_medical_care_bool_exp
  ): [uk_data_important_building_medical_care!]!

  """
  fetch data from the table: "uk_data.important_building_religious_buildings"
  """
  uk_data_important_building_religious_buildings(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_religious_buildings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_religious_buildings_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_religious_buildings_bool_exp
  ): [uk_data_important_building_religious_buildings!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_religious_buildings"
  """
  uk_data_important_building_religious_buildings_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_religious_buildings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_religious_buildings_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_religious_buildings_bool_exp
  ): uk_data_important_building_religious_buildings_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_religious_buildings"
  """
  uk_data_important_building_religious_buildings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_religious_buildings_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_religious_buildings_bool_exp
  ): [uk_data_important_building_religious_buildings!]!

  """
  fetch data from the table: "uk_data.important_building_retail"
  """
  uk_data_important_building_retail(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_retail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_retail_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_retail_bool_exp
  ): [uk_data_important_building_retail!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_retail"
  """
  uk_data_important_building_retail_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_retail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_retail_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_retail_bool_exp
  ): uk_data_important_building_retail_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_retail"
  """
  uk_data_important_building_retail_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_retail_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_retail_bool_exp
  ): [uk_data_important_building_retail!]!

  """
  fetch data from the table: "uk_data.important_building_road_transport"
  """
  uk_data_important_building_road_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_road_transport_bool_exp
  ): [uk_data_important_building_road_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_road_transport"
  """
  uk_data_important_building_road_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_road_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_road_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_road_transport_bool_exp
  ): uk_data_important_building_road_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_road_transport"
  """
  uk_data_important_building_road_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_road_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_road_transport_bool_exp
  ): [uk_data_important_building_road_transport!]!

  """
  fetch data from the table: "uk_data.important_building_sports_or_exercise_facility"
  """
  uk_data_important_building_sports_or_exercise_facility(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_sports_or_exercise_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_sports_or_exercise_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_sports_or_exercise_facility_bool_exp
  ): [uk_data_important_building_sports_or_exercise_facility!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_sports_or_exercise_facility"
  """
  uk_data_important_building_sports_or_exercise_facility_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_sports_or_exercise_facility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_sports_or_exercise_facility_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_sports_or_exercise_facility_bool_exp
  ): uk_data_important_building_sports_or_exercise_facility_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_sports_or_exercise_facility"
  """
  uk_data_important_building_sports_or_exercise_facility_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_sports_or_exercise_facility_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_sports_or_exercise_facility_bool_exp
  ): [uk_data_important_building_sports_or_exercise_facility!]!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building"
  """
  uk_data_important_building_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_bool_exp
  ): [uk_data_important_building!]!

  """
  fetch data from the table: "uk_data.important_building_water_transport"
  """
  uk_data_important_building_water_transport(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_water_transport_bool_exp
  ): [uk_data_important_building_water_transport!]!

  """
  fetch aggregated fields from the table: "uk_data.important_building_water_transport"
  """
  uk_data_important_building_water_transport_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_important_building_water_transport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_important_building_water_transport_order_by!]

    """filter the rows returned"""
    where: uk_data_important_building_water_transport_bool_exp
  ): uk_data_important_building_water_transport_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.important_building_water_transport"
  """
  uk_data_important_building_water_transport_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_important_building_water_transport_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_important_building_water_transport_bool_exp
  ): [uk_data_important_building_water_transport!]!

  """
  fetch data from the table: "uk_data.motorway_junction"
  """
  uk_data_motorway_junction(
    """distinct select on columns"""
    distinct_on: [uk_data_motorway_junction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_motorway_junction_order_by!]

    """filter the rows returned"""
    where: uk_data_motorway_junction_bool_exp
  ): [uk_data_motorway_junction!]!

  """
  fetch aggregated fields from the table: "uk_data.motorway_junction"
  """
  uk_data_motorway_junction_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_motorway_junction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_motorway_junction_order_by!]

    """filter the rows returned"""
    where: uk_data_motorway_junction_bool_exp
  ): uk_data_motorway_junction_aggregate!

  """
  fetch data from the table: "uk_data.motorway_junction" using primary key columns
  """
  uk_data_motorway_junction_by_pk(fid: Int!): uk_data_motorway_junction

  """
  fetch data from the table in a streaming manner: "uk_data.motorway_junction"
  """
  uk_data_motorway_junction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_motorway_junction_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_motorway_junction_bool_exp
  ): [uk_data_motorway_junction!]!

  """
  fetch data from the table: "uk_data.named_place"
  """
  uk_data_named_place(
    """distinct select on columns"""
    distinct_on: [uk_data_named_place_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_named_place_order_by!]

    """filter the rows returned"""
    where: uk_data_named_place_bool_exp
  ): [uk_data_named_place!]!

  """
  fetch aggregated fields from the table: "uk_data.named_place"
  """
  uk_data_named_place_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_named_place_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_named_place_order_by!]

    """filter the rows returned"""
    where: uk_data_named_place_bool_exp
  ): uk_data_named_place_aggregate!

  """
  fetch data from the table: "uk_data.named_place" using primary key columns
  """
  uk_data_named_place_by_pk(fid: Int!): uk_data_named_place

  """
  fetch data from the table in a streaming manner: "uk_data.named_place"
  """
  uk_data_named_place_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_named_place_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_named_place_bool_exp
  ): [uk_data_named_place!]!

  """
  fetch data from the table: "uk_data.osmaps_data"
  """
  uk_data_osmaps_data(
    """distinct select on columns"""
    distinct_on: [uk_data_osmaps_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_osmaps_data_order_by!]

    """filter the rows returned"""
    where: uk_data_osmaps_data_bool_exp
  ): [uk_data_osmaps_data!]!

  """
  fetch aggregated fields from the table: "uk_data.osmaps_data"
  """
  uk_data_osmaps_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_osmaps_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_osmaps_data_order_by!]

    """filter the rows returned"""
    where: uk_data_osmaps_data_bool_exp
  ): uk_data_osmaps_data_aggregate!

  """
  fetch data from the table: "uk_data.osmaps_data" using primary key columns
  """
  uk_data_osmaps_data_by_pk(id: bigint!): uk_data_osmaps_data

  """
  fetch data from the table in a streaming manner: "uk_data.osmaps_data"
  """
  uk_data_osmaps_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_osmaps_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_osmaps_data_bool_exp
  ): [uk_data_osmaps_data!]!

  """
  fetch data from the table: "uk_data.outcode_stats"
  """
  uk_data_outcode_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_outcode_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcode_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_outcode_stats_bool_exp
  ): [uk_data_outcode_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.outcode_stats"
  """
  uk_data_outcode_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_outcode_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcode_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_outcode_stats_bool_exp
  ): uk_data_outcode_stats_aggregate!

  """
  fetch data from the table: "uk_data.outcode_stats" using primary key columns
  """
  uk_data_outcode_stats_by_pk(outcode: String!): uk_data_outcode_stats

  """
  fetch data from the table in a streaming manner: "uk_data.outcode_stats"
  """
  uk_data_outcode_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_outcode_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_outcode_stats_bool_exp
  ): [uk_data_outcode_stats!]!

  """
  fetch data from the table: "uk_data.outcodes"
  """
  uk_data_outcodes(
    """distinct select on columns"""
    distinct_on: [uk_data_outcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_outcodes_bool_exp
  ): [uk_data_outcodes!]!

  """
  fetch aggregated fields from the table: "uk_data.outcodes"
  """
  uk_data_outcodes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_outcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_outcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_outcodes_bool_exp
  ): uk_data_outcodes_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.outcodes"
  """
  uk_data_outcodes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_outcodes_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_outcodes_bool_exp
  ): [uk_data_outcodes!]!

  """
  execute function "uk_data.place_of_worship_within_radius" which returns "uk_data.aggregated_important_building_data"
  """
  uk_data_place_of_worship_within_radius(
    """
    input parameters for function "uk_data_place_of_worship_within_radius"
    """
    args: uk_data_place_of_worship_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): [uk_data_aggregated_important_building_data!]!

  """
  execute function "uk_data.place_of_worship_within_radius" and query aggregates on result of table type "uk_data.aggregated_important_building_data"
  """
  uk_data_place_of_worship_within_radius_aggregate(
    """
    input parameters for function "uk_data_place_of_worship_within_radius_aggregate"
    """
    args: uk_data_place_of_worship_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_important_building_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_important_building_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_important_building_data_bool_exp
  ): uk_data_aggregated_important_building_data_aggregate!

  """
  fetch data from the table: "uk_data.police_force_neighbourhoods"
  """
  uk_data_police_force_neighbourhoods(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): [uk_data_police_force_neighbourhoods!]!

  """
  fetch aggregated fields from the table: "uk_data.police_force_neighbourhoods"
  """
  uk_data_police_force_neighbourhoods_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): uk_data_police_force_neighbourhoods_aggregate!

  """
  fetch data from the table: "uk_data.police_force_neighbourhoods" using primary key columns
  """
  uk_data_police_force_neighbourhoods_by_pk(neighbourhood: String!, police_force_id: String!): uk_data_police_force_neighbourhoods

  """
  fetch data from the table in a streaming manner: "uk_data.police_force_neighbourhoods"
  """
  uk_data_police_force_neighbourhoods_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_police_force_neighbourhoods_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): [uk_data_police_force_neighbourhoods!]!

  """
  fetch data from the table: "uk_data.police_forces"
  """
  uk_data_police_forces(
    """distinct select on columns"""
    distinct_on: [uk_data_police_forces_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_forces_order_by!]

    """filter the rows returned"""
    where: uk_data_police_forces_bool_exp
  ): [uk_data_police_forces!]!

  """
  fetch aggregated fields from the table: "uk_data.police_forces"
  """
  uk_data_police_forces_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_police_forces_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_forces_order_by!]

    """filter the rows returned"""
    where: uk_data_police_forces_bool_exp
  ): uk_data_police_forces_aggregate!

  """
  fetch data from the table: "uk_data.police_forces" using primary key columns
  """
  uk_data_police_forces_by_pk(id: String!): uk_data_police_forces

  """
  fetch data from the table in a streaming manner: "uk_data.police_forces"
  """
  uk_data_police_forces_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_police_forces_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_police_forces_bool_exp
  ): [uk_data_police_forces!]!

  """
  fetch data from the table: "uk_data.population_projection_by_area"
  """
  uk_data_population_projection_by_area(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_area_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_area_bool_exp
  ): [uk_data_population_projection_by_area!]!

  """
  fetch aggregated fields from the table: "uk_data.population_projection_by_area"
  """
  uk_data_population_projection_by_area_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_area_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_area_bool_exp
  ): uk_data_population_projection_by_area_aggregate!

  """
  fetch data from the table: "uk_data.population_projection_by_area" using primary key columns
  """
  uk_data_population_projection_by_area_by_pk(AREA: String!): uk_data_population_projection_by_area

  """
  fetch data from the table in a streaming manner: "uk_data.population_projection_by_area"
  """
  uk_data_population_projection_by_area_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_population_projection_by_area_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_population_projection_by_area_bool_exp
  ): [uk_data_population_projection_by_area!]!

  """
  fetch data from the table: "uk_data.population_projection_by_country"
  """
  uk_data_population_projection_by_country(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_country_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_country_bool_exp
  ): [uk_data_population_projection_by_country!]!

  """
  fetch aggregated fields from the table: "uk_data.population_projection_by_country"
  """
  uk_data_population_projection_by_country_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_population_projection_by_country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_population_projection_by_country_order_by!]

    """filter the rows returned"""
    where: uk_data_population_projection_by_country_bool_exp
  ): uk_data_population_projection_by_country_aggregate!

  """
  fetch data from the table: "uk_data.population_projection_by_country" using primary key columns
  """
  uk_data_population_projection_by_country_by_pk(country: String!): uk_data_population_projection_by_country

  """
  fetch data from the table in a streaming manner: "uk_data.population_projection_by_country"
  """
  uk_data_population_projection_by_country_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_population_projection_by_country_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_population_projection_by_country_bool_exp
  ): [uk_data_population_projection_by_country!]!

  """
  fetch data from the table: "uk_data.postcode_sectors"
  """
  uk_data_postcode_sectors(
    """distinct select on columns"""
    distinct_on: [uk_data_postcode_sectors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcode_sectors_order_by!]

    """filter the rows returned"""
    where: uk_data_postcode_sectors_bool_exp
  ): [uk_data_postcode_sectors!]!

  """
  fetch aggregated fields from the table: "uk_data.postcode_sectors"
  """
  uk_data_postcode_sectors_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_postcode_sectors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcode_sectors_order_by!]

    """filter the rows returned"""
    where: uk_data_postcode_sectors_bool_exp
  ): uk_data_postcode_sectors_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.postcode_sectors"
  """
  uk_data_postcode_sectors_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_postcode_sectors_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_postcode_sectors_bool_exp
  ): [uk_data_postcode_sectors!]!

  """
  fetch data from the table: "uk_data.postcodes"
  """
  uk_data_postcodes(
    """distinct select on columns"""
    distinct_on: [uk_data_postcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_postcodes_bool_exp
  ): [uk_data_postcodes!]!

  """
  fetch aggregated fields from the table: "uk_data.postcodes"
  """
  uk_data_postcodes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_postcodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_postcodes_order_by!]

    """filter the rows returned"""
    where: uk_data_postcodes_bool_exp
  ): uk_data_postcodes_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.postcodes"
  """
  uk_data_postcodes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_postcodes_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_postcodes_bool_exp
  ): [uk_data_postcodes!]!

  """
  fetch data from the table: "uk_data.price_paid_data"
  """
  uk_data_price_paid_data(
    """distinct select on columns"""
    distinct_on: [uk_data_price_paid_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_price_paid_data_order_by!]

    """filter the rows returned"""
    where: uk_data_price_paid_data_bool_exp
  ): [uk_data_price_paid_data!]!

  """
  fetch aggregated fields from the table: "uk_data.price_paid_data"
  """
  uk_data_price_paid_data_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_price_paid_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_price_paid_data_order_by!]

    """filter the rows returned"""
    where: uk_data_price_paid_data_bool_exp
  ): uk_data_price_paid_data_aggregate!

  """
  fetch data from the table: "uk_data.price_paid_data" using primary key columns
  """
  uk_data_price_paid_data_by_pk(deed_date: timestamp!, unique_id: String!): uk_data_price_paid_data

  """
  fetch data from the table in a streaming manner: "uk_data.price_paid_data"
  """
  uk_data_price_paid_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_price_paid_data_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_price_paid_data_bool_exp
  ): [uk_data_price_paid_data!]!

  """
  fetch data from the table: "uk_data.property_records"
  """
  uk_data_property_records(
    """distinct select on columns"""
    distinct_on: [uk_data_property_records_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_property_records_order_by!]

    """filter the rows returned"""
    where: uk_data_property_records_bool_exp
  ): [uk_data_property_records!]!

  """
  fetch aggregated fields from the table: "uk_data.property_records"
  """
  uk_data_property_records_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_property_records_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_property_records_order_by!]

    """filter the rows returned"""
    where: uk_data_property_records_bool_exp
  ): uk_data_property_records_aggregate!

  """
  fetch data from the table: "uk_data.property_records" using primary key columns
  """
  uk_data_property_records_by_pk(uprn: bigint!): uk_data_property_records

  """
  fetch data from the table in a streaming manner: "uk_data.property_records"
  """
  uk_data_property_records_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_property_records_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_property_records_bool_exp
  ): [uk_data_property_records!]!

  """
  fetch data from the table: "uk_data.railway_station"
  """
  uk_data_railway_station(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_station_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_station_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_station_bool_exp
  ): [uk_data_railway_station!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_station"
  """
  uk_data_railway_station_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_station_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_station_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_station_bool_exp
  ): uk_data_railway_station_aggregate!

  """
  fetch data from the table: "uk_data.railway_station" using primary key columns
  """
  uk_data_railway_station_by_pk(fid: Int!): uk_data_railway_station

  """
  fetch data from the table in a streaming manner: "uk_data.railway_station"
  """
  uk_data_railway_station_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_railway_station_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_railway_station_bool_exp
  ): [uk_data_railway_station!]!

  """
  execute function "uk_data.railway_stations_within_radius" which returns "uk_data.aggregated_railway_station_data"
  """
  uk_data_railway_stations_within_radius(
    """
    input parameters for function "uk_data_railway_stations_within_radius"
    """
    args: uk_data_railway_stations_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): [uk_data_aggregated_railway_station_data!]!

  """
  execute function "uk_data.railway_stations_within_radius" and query aggregates on result of table type "uk_data.aggregated_railway_station_data"
  """
  uk_data_railway_stations_within_radius_aggregate(
    """
    input parameters for function "uk_data_railway_stations_within_radius_aggregate"
    """
    args: uk_data_railway_stations_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_railway_station_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_railway_station_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_railway_station_data_bool_exp
  ): uk_data_aggregated_railway_station_data_aggregate!

  """
  fetch data from the table: "uk_data.railway_track"
  """
  uk_data_railway_track(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_track_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_track_bool_exp
  ): [uk_data_railway_track!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_track"
  """
  uk_data_railway_track_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_track_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_track_bool_exp
  ): uk_data_railway_track_aggregate!

  """
  fetch data from the table: "uk_data.railway_track" using primary key columns
  """
  uk_data_railway_track_by_pk(fid: Int!): uk_data_railway_track

  """
  fetch data from the table in a streaming manner: "uk_data.railway_track"
  """
  uk_data_railway_track_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_railway_track_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_railway_track_bool_exp
  ): [uk_data_railway_track!]!

  """
  fetch data from the table: "uk_data.railway_tunnel"
  """
  uk_data_railway_tunnel(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_tunnel_bool_exp
  ): [uk_data_railway_tunnel!]!

  """
  fetch aggregated fields from the table: "uk_data.railway_tunnel"
  """
  uk_data_railway_tunnel_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_railway_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_railway_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_railway_tunnel_bool_exp
  ): uk_data_railway_tunnel_aggregate!

  """
  fetch data from the table: "uk_data.railway_tunnel" using primary key columns
  """
  uk_data_railway_tunnel_by_pk(fid: Int!): uk_data_railway_tunnel

  """
  fetch data from the table in a streaming manner: "uk_data.railway_tunnel"
  """
  uk_data_railway_tunnel_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_railway_tunnel_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_railway_tunnel_bool_exp
  ): [uk_data_railway_tunnel!]!

  """
  fetch data from the table: "uk_data.rent_demand_stats"
  """
  uk_data_rent_demand_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_rent_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_rent_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_rent_demand_stats_bool_exp
  ): [uk_data_rent_demand_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.rent_demand_stats"
  """
  uk_data_rent_demand_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_rent_demand_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_rent_demand_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_rent_demand_stats_bool_exp
  ): uk_data_rent_demand_stats_aggregate!

  """
  fetch data from the table: "uk_data.rent_demand_stats" using primary key columns
  """
  uk_data_rent_demand_stats_by_pk(outcode: String!): uk_data_rent_demand_stats

  """
  fetch data from the table in a streaming manner: "uk_data.rent_demand_stats"
  """
  uk_data_rent_demand_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_rent_demand_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_rent_demand_stats_bool_exp
  ): [uk_data_rent_demand_stats!]!

  """
  fetch data from the table: "uk_data.road"
  """
  uk_data_road(
    """distinct select on columns"""
    distinct_on: [uk_data_road_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_order_by!]

    """filter the rows returned"""
    where: uk_data_road_bool_exp
  ): [uk_data_road!]!

  """
  fetch aggregated fields from the table: "uk_data.road"
  """
  uk_data_road_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_road_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_order_by!]

    """filter the rows returned"""
    where: uk_data_road_bool_exp
  ): uk_data_road_aggregate!

  """fetch data from the table: "uk_data.road" using primary key columns"""
  uk_data_road_by_pk(fid: Int!): uk_data_road

  """
  fetch data from the table in a streaming manner: "uk_data.road"
  """
  uk_data_road_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_road_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_road_bool_exp
  ): [uk_data_road!]!

  """
  fetch data from the table: "uk_data.road_tunnel"
  """
  uk_data_road_tunnel(
    """distinct select on columns"""
    distinct_on: [uk_data_road_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_road_tunnel_bool_exp
  ): [uk_data_road_tunnel!]!

  """
  fetch aggregated fields from the table: "uk_data.road_tunnel"
  """
  uk_data_road_tunnel_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_road_tunnel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_road_tunnel_order_by!]

    """filter the rows returned"""
    where: uk_data_road_tunnel_bool_exp
  ): uk_data_road_tunnel_aggregate!

  """
  fetch data from the table: "uk_data.road_tunnel" using primary key columns
  """
  uk_data_road_tunnel_by_pk(fid: Int!): uk_data_road_tunnel

  """
  fetch data from the table in a streaming manner: "uk_data.road_tunnel"
  """
  uk_data_road_tunnel_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_road_tunnel_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_road_tunnel_bool_exp
  ): [uk_data_road_tunnel!]!

  """
  fetch data from the table: "uk_data.roundabout"
  """
  uk_data_roundabout(
    """distinct select on columns"""
    distinct_on: [uk_data_roundabout_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_roundabout_order_by!]

    """filter the rows returned"""
    where: uk_data_roundabout_bool_exp
  ): [uk_data_roundabout!]!

  """
  fetch aggregated fields from the table: "uk_data.roundabout"
  """
  uk_data_roundabout_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_roundabout_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_roundabout_order_by!]

    """filter the rows returned"""
    where: uk_data_roundabout_bool_exp
  ): uk_data_roundabout_aggregate!

  """
  fetch data from the table: "uk_data.roundabout" using primary key columns
  """
  uk_data_roundabout_by_pk(fid: Int!): uk_data_roundabout

  """
  fetch data from the table in a streaming manner: "uk_data.roundabout"
  """
  uk_data_roundabout_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_roundabout_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_roundabout_bool_exp
  ): [uk_data_roundabout!]!

  """
  fetch data from the table: "uk_data.schools"
  """
  uk_data_schools(
    """distinct select on columns"""
    distinct_on: [uk_data_schools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_schools_order_by!]

    """filter the rows returned"""
    where: uk_data_schools_bool_exp
  ): [uk_data_schools!]!

  """
  fetch aggregated fields from the table: "uk_data.schools"
  """
  uk_data_schools_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_schools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_schools_order_by!]

    """filter the rows returned"""
    where: uk_data_schools_bool_exp
  ): uk_data_schools_aggregate!

  """fetch data from the table: "uk_data.schools" using primary key columns"""
  uk_data_schools_by_pk(postcode: String!): uk_data_schools

  """
  fetch data from the table in a streaming manner: "uk_data.schools"
  """
  uk_data_schools_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_schools_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_schools_bool_exp
  ): [uk_data_schools!]!

  """
  execute function "uk_data.sites_nearby_within_radius_air_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_air_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_air_transport"
    """
    args: uk_data_sites_nearby_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_air_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_air_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_air_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_air_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_attraction_and_leisure" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_attraction_and_leisure(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_attraction_and_leisure"
    """
    args: uk_data_sites_nearby_within_radius_attraction_and_leisure_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_attraction_and_leisure" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_attraction_and_leisure_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_attraction_and_leisure_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_attraction_and_leisure_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_cultural_facility" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_cultural_facility(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_cultural_facility"
    """
    args: uk_data_sites_nearby_within_radius_cultural_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_cultural_facility" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_cultural_facility_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_cultural_facility_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_cultural_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_education" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_education(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_education"
    """
    args: uk_data_sites_nearby_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_education" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_education_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_education_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_education_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_emergency_service" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_emergency_service(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_emergency_service"
    """
    args: uk_data_sites_nearby_within_radius_emergency_service_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_emergency_service" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_emergency_service_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_emergency_service_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_emergency_service_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_medical_care" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_medical_care(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_medical_care"
    """
    args: uk_data_sites_nearby_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_medical_care" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_medical_care_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_medical_care_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_medical_care_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_religious_buildings" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_religious_buildings(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_religious_buildings"
    """
    args: uk_data_sites_nearby_within_radius_religious_buildings_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_religious_buildings" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_religious_buildings_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_religious_buildings_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_religious_buildings_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_retail" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_retail(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_retail"
    """
    args: uk_data_sites_nearby_within_radius_retail_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_retail" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_retail_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_retail_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_retail_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_road_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_road_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_road_transport"
    """
    args: uk_data_sites_nearby_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_road_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_road_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_road_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_road_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_sports_or_exercise_facility" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_sports_or_exercise_facility(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_sports_or_exercise_facility"
    """
    args: uk_data_sites_nearby_within_radius_sports_or_exercise_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_sports_or_exercise_facility" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_sports_or_exercise_facility_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_sports_or_exercise_facility_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_sports_or_exercise_facility_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  execute function "uk_data.sites_nearby_within_radius_water_transport" which returns "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_water_transport(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_water_transport"
    """
    args: uk_data_sites_nearby_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): [uk_data_aggregated_sites_nearby_data!]!

  """
  execute function "uk_data.sites_nearby_within_radius_water_transport" and query aggregates on result of table type "uk_data.aggregated_sites_nearby_data"
  """
  uk_data_sites_nearby_within_radius_water_transport_aggregate(
    """
    input parameters for function "uk_data_sites_nearby_within_radius_water_transport_aggregate"
    """
    args: uk_data_sites_nearby_within_radius_water_transport_args!

    """distinct select on columns"""
    distinct_on: [uk_data_aggregated_sites_nearby_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_aggregated_sites_nearby_data_order_by!]

    """filter the rows returned"""
    where: uk_data_aggregated_sites_nearby_data_bool_exp
  ): uk_data_aggregated_sites_nearby_data_aggregate!

  """
  fetch data from the table: "uk_data.street_crimes"
  """
  uk_data_street_crimes(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_bool_exp
  ): [uk_data_street_crimes!]!

  """
  fetch aggregated fields from the table: "uk_data.street_crimes"
  """
  uk_data_street_crimes_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_bool_exp
  ): uk_data_street_crimes_aggregate!

  """
  fetch data from the table: "uk_data.street_crimes" using primary key columns
  """
  uk_data_street_crimes_by_pk(crime_id: String!): uk_data_street_crimes

  """
  fetch data from the table in a streaming manner: "uk_data.street_crimes"
  """
  uk_data_street_crimes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_street_crimes_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_street_crimes_bool_exp
  ): [uk_data_street_crimes!]!

  """
  fetch data from the table: "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_with_distance(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): [uk_data_street_crimes_with_distance!]!

  """
  fetch aggregated fields from the table: "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_with_distance_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): uk_data_street_crimes_with_distance_aggregate!

  """
  fetch data from the table in a streaming manner: "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_with_distance_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_street_crimes_with_distance_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): [uk_data_street_crimes_with_distance!]!

  """
  execute function "uk_data.street_crimes_within_radius" which returns "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_within_radius(
    """
    input parameters for function "uk_data_street_crimes_within_radius"
    """
    args: uk_data_street_crimes_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): [uk_data_street_crimes_with_distance!]!

  """
  execute function "uk_data.street_crimes_within_radius" and query aggregates on result of table type "uk_data.street_crimes_with_distance"
  """
  uk_data_street_crimes_within_radius_aggregate(
    """
    input parameters for function "uk_data_street_crimes_within_radius_aggregate"
    """
    args: uk_data_street_crimes_within_radius_args!

    """distinct select on columns"""
    distinct_on: [uk_data_street_crimes_with_distance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_street_crimes_with_distance_order_by!]

    """filter the rows returned"""
    where: uk_data_street_crimes_with_distance_bool_exp
  ): uk_data_street_crimes_with_distance_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_area"
  """
  uk_data_surface_water_area(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_area_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_area_bool_exp
  ): [uk_data_surface_water_area!]!

  """
  fetch aggregated fields from the table: "uk_data.surface_water_area"
  """
  uk_data_surface_water_area_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_area_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_area_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_area_bool_exp
  ): uk_data_surface_water_area_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_area" using primary key columns
  """
  uk_data_surface_water_area_by_pk(fid: Int!): uk_data_surface_water_area

  """
  fetch data from the table in a streaming manner: "uk_data.surface_water_area"
  """
  uk_data_surface_water_area_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_surface_water_area_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_surface_water_area_bool_exp
  ): [uk_data_surface_water_area!]!

  """
  fetch data from the table: "uk_data.surface_water_line"
  """
  uk_data_surface_water_line(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_line_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_line_bool_exp
  ): [uk_data_surface_water_line!]!

  """
  fetch aggregated fields from the table: "uk_data.surface_water_line"
  """
  uk_data_surface_water_line_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_surface_water_line_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_surface_water_line_order_by!]

    """filter the rows returned"""
    where: uk_data_surface_water_line_bool_exp
  ): uk_data_surface_water_line_aggregate!

  """
  fetch data from the table: "uk_data.surface_water_line" using primary key columns
  """
  uk_data_surface_water_line_by_pk(fid: Int!): uk_data_surface_water_line

  """
  fetch data from the table in a streaming manner: "uk_data.surface_water_line"
  """
  uk_data_surface_water_line_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_surface_water_line_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_surface_water_line_bool_exp
  ): [uk_data_surface_water_line!]!

  """
  fetch data from the table: "uk_data.tidal_boundary"
  """
  uk_data_tidal_boundary(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_boundary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_boundary_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_boundary_bool_exp
  ): [uk_data_tidal_boundary!]!

  """
  fetch aggregated fields from the table: "uk_data.tidal_boundary"
  """
  uk_data_tidal_boundary_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_boundary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_boundary_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_boundary_bool_exp
  ): uk_data_tidal_boundary_aggregate!

  """
  fetch data from the table: "uk_data.tidal_boundary" using primary key columns
  """
  uk_data_tidal_boundary_by_pk(fid: Int!): uk_data_tidal_boundary

  """
  fetch data from the table in a streaming manner: "uk_data.tidal_boundary"
  """
  uk_data_tidal_boundary_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_tidal_boundary_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_tidal_boundary_bool_exp
  ): [uk_data_tidal_boundary!]!

  """
  fetch data from the table: "uk_data.tidal_water"
  """
  uk_data_tidal_water(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_water_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_water_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_water_bool_exp
  ): [uk_data_tidal_water!]!

  """
  fetch aggregated fields from the table: "uk_data.tidal_water"
  """
  uk_data_tidal_water_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_tidal_water_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_tidal_water_order_by!]

    """filter the rows returned"""
    where: uk_data_tidal_water_bool_exp
  ): uk_data_tidal_water_aggregate!

  """
  fetch data from the table: "uk_data.tidal_water" using primary key columns
  """
  uk_data_tidal_water_by_pk(fid: Int!): uk_data_tidal_water

  """
  fetch data from the table in a streaming manner: "uk_data.tidal_water"
  """
  uk_data_tidal_water_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_tidal_water_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_tidal_water_bool_exp
  ): [uk_data_tidal_water!]!

  """
  fetch data from the table: "uk_data.woodland"
  """
  uk_data_woodland(
    """distinct select on columns"""
    distinct_on: [uk_data_woodland_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_woodland_order_by!]

    """filter the rows returned"""
    where: uk_data_woodland_bool_exp
  ): [uk_data_woodland!]!

  """
  fetch aggregated fields from the table: "uk_data.woodland"
  """
  uk_data_woodland_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_woodland_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_woodland_order_by!]

    """filter the rows returned"""
    where: uk_data_woodland_bool_exp
  ): uk_data_woodland_aggregate!

  """
  fetch data from the table: "uk_data.woodland" using primary key columns
  """
  uk_data_woodland_by_pk(fid: Int!): uk_data_woodland

  """
  fetch data from the table in a streaming manner: "uk_data.woodland"
  """
  uk_data_woodland_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_woodland_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_woodland_bool_exp
  ): [uk_data_woodland!]!

  """
  fetch data from the table: "uk_data.yield_stats"
  """
  uk_data_yield_stats(
    """distinct select on columns"""
    distinct_on: [uk_data_yield_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_yield_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_yield_stats_bool_exp
  ): [uk_data_yield_stats!]!

  """
  fetch aggregated fields from the table: "uk_data.yield_stats"
  """
  uk_data_yield_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_yield_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_yield_stats_order_by!]

    """filter the rows returned"""
    where: uk_data_yield_stats_bool_exp
  ): uk_data_yield_stats_aggregate!

  """
  fetch data from the table: "uk_data.yield_stats" using primary key columns
  """
  uk_data_yield_stats_by_pk(postcode: String!): uk_data_yield_stats

  """
  fetch data from the table in a streaming manner: "uk_data.yield_stats"
  """
  uk_data_yield_stats_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uk_data_yield_stats_stream_cursor_input]!

    """filter the rows returned"""
    where: uk_data_yield_stats_bool_exp
  ): [uk_data_yield_stats!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "uk_data.aggregated_charging_point_data"
"""
type uk_data_aggregated_charging_point_data {
  charge_method: String
  distance: float8
  type: String
}

"""
aggregated selection of "uk_data.aggregated_charging_point_data"
"""
type uk_data_aggregated_charging_point_data_aggregate {
  aggregate: uk_data_aggregated_charging_point_data_aggregate_fields
  nodes: [uk_data_aggregated_charging_point_data!]!
}

"""
aggregate fields of "uk_data.aggregated_charging_point_data"
"""
type uk_data_aggregated_charging_point_data_aggregate_fields {
  avg: uk_data_aggregated_charging_point_data_avg_fields
  count(columns: [uk_data_aggregated_charging_point_data_select_column!], distinct: Boolean): Int!
  max: uk_data_aggregated_charging_point_data_max_fields
  min: uk_data_aggregated_charging_point_data_min_fields
  stddev: uk_data_aggregated_charging_point_data_stddev_fields
  stddev_pop: uk_data_aggregated_charging_point_data_stddev_pop_fields
  stddev_samp: uk_data_aggregated_charging_point_data_stddev_samp_fields
  sum: uk_data_aggregated_charging_point_data_sum_fields
  var_pop: uk_data_aggregated_charging_point_data_var_pop_fields
  var_samp: uk_data_aggregated_charging_point_data_var_samp_fields
  variance: uk_data_aggregated_charging_point_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_aggregated_charging_point_data_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.aggregated_charging_point_data". All fields are combined with a logical 'AND'.
"""
input uk_data_aggregated_charging_point_data_bool_exp {
  _and: [uk_data_aggregated_charging_point_data_bool_exp!]
  _not: uk_data_aggregated_charging_point_data_bool_exp
  _or: [uk_data_aggregated_charging_point_data_bool_exp!]
  charge_method: String_comparison_exp
  distance: float8_comparison_exp
  type: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.aggregated_charging_point_data"
"""
input uk_data_aggregated_charging_point_data_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.aggregated_charging_point_data"
"""
input uk_data_aggregated_charging_point_data_insert_input {
  charge_method: String
  distance: float8
  type: String
}

"""aggregate max on columns"""
type uk_data_aggregated_charging_point_data_max_fields {
  charge_method: String
  distance: float8
  type: String
}

"""aggregate min on columns"""
type uk_data_aggregated_charging_point_data_min_fields {
  charge_method: String
  distance: float8
  type: String
}

"""
response of any mutation on the table "uk_data.aggregated_charging_point_data"
"""
type uk_data_aggregated_charging_point_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_aggregated_charging_point_data!]!
}

"""
Ordering options when selecting data from "uk_data.aggregated_charging_point_data".
"""
input uk_data_aggregated_charging_point_data_order_by {
  charge_method: order_by
  distance: order_by
  type: order_by
}

"""
select columns of table "uk_data.aggregated_charging_point_data"
"""
enum uk_data_aggregated_charging_point_data_select_column {
  """column name"""
  charge_method

  """column name"""
  distance

  """column name"""
  type
}

"""
input type for updating data in table "uk_data.aggregated_charging_point_data"
"""
input uk_data_aggregated_charging_point_data_set_input {
  charge_method: String
  distance: float8
  type: String
}

"""aggregate stddev on columns"""
type uk_data_aggregated_charging_point_data_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_aggregated_charging_point_data_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_aggregated_charging_point_data_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_aggregated_charging_point_data"
"""
input uk_data_aggregated_charging_point_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_aggregated_charging_point_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_aggregated_charging_point_data_stream_cursor_value_input {
  charge_method: String
  distance: float8
  type: String
}

"""aggregate sum on columns"""
type uk_data_aggregated_charging_point_data_sum_fields {
  distance: float8
}

input uk_data_aggregated_charging_point_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_aggregated_charging_point_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_aggregated_charging_point_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_aggregated_charging_point_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_aggregated_charging_point_data_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_aggregated_charging_point_data_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_aggregated_charging_point_data_variance_fields {
  distance: Float
}

"""
columns and relationships of "uk_data.aggregated_functional_site_data"
"""
type uk_data_aggregated_functional_site_data {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
aggregated selection of "uk_data.aggregated_functional_site_data"
"""
type uk_data_aggregated_functional_site_data_aggregate {
  aggregate: uk_data_aggregated_functional_site_data_aggregate_fields
  nodes: [uk_data_aggregated_functional_site_data!]!
}

"""
aggregate fields of "uk_data.aggregated_functional_site_data"
"""
type uk_data_aggregated_functional_site_data_aggregate_fields {
  avg: uk_data_aggregated_functional_site_data_avg_fields
  count(columns: [uk_data_aggregated_functional_site_data_select_column!], distinct: Boolean): Int!
  max: uk_data_aggregated_functional_site_data_max_fields
  min: uk_data_aggregated_functional_site_data_min_fields
  stddev: uk_data_aggregated_functional_site_data_stddev_fields
  stddev_pop: uk_data_aggregated_functional_site_data_stddev_pop_fields
  stddev_samp: uk_data_aggregated_functional_site_data_stddev_samp_fields
  sum: uk_data_aggregated_functional_site_data_sum_fields
  var_pop: uk_data_aggregated_functional_site_data_var_pop_fields
  var_samp: uk_data_aggregated_functional_site_data_var_samp_fields
  variance: uk_data_aggregated_functional_site_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_aggregated_functional_site_data_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.aggregated_functional_site_data". All fields are combined with a logical 'AND'.
"""
input uk_data_aggregated_functional_site_data_bool_exp {
  _and: [uk_data_aggregated_functional_site_data_bool_exp!]
  _not: uk_data_aggregated_functional_site_data_bool_exp
  _or: [uk_data_aggregated_functional_site_data_bool_exp!]
  classification: String_comparison_exp
  distance: float8_comparison_exp
  distinctive_name: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.aggregated_functional_site_data"
"""
input uk_data_aggregated_functional_site_data_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.aggregated_functional_site_data"
"""
input uk_data_aggregated_functional_site_data_insert_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate max on columns"""
type uk_data_aggregated_functional_site_data_max_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate min on columns"""
type uk_data_aggregated_functional_site_data_min_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
response of any mutation on the table "uk_data.aggregated_functional_site_data"
"""
type uk_data_aggregated_functional_site_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_aggregated_functional_site_data!]!
}

"""
Ordering options when selecting data from "uk_data.aggregated_functional_site_data".
"""
input uk_data_aggregated_functional_site_data_order_by {
  classification: order_by
  distance: order_by
  distinctive_name: order_by
}

"""
select columns of table "uk_data.aggregated_functional_site_data"
"""
enum uk_data_aggregated_functional_site_data_select_column {
  """column name"""
  classification

  """column name"""
  distance

  """column name"""
  distinctive_name
}

"""
input type for updating data in table "uk_data.aggregated_functional_site_data"
"""
input uk_data_aggregated_functional_site_data_set_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate stddev on columns"""
type uk_data_aggregated_functional_site_data_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_aggregated_functional_site_data_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_aggregated_functional_site_data_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_aggregated_functional_site_data"
"""
input uk_data_aggregated_functional_site_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_aggregated_functional_site_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_aggregated_functional_site_data_stream_cursor_value_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate sum on columns"""
type uk_data_aggregated_functional_site_data_sum_fields {
  distance: float8
}

input uk_data_aggregated_functional_site_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_aggregated_functional_site_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_aggregated_functional_site_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_aggregated_functional_site_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_aggregated_functional_site_data_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_aggregated_functional_site_data_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_aggregated_functional_site_data_variance_fields {
  distance: Float
}

"""
columns and relationships of "uk_data.aggregated_important_building_data"
"""
type uk_data_aggregated_important_building_data {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
aggregated selection of "uk_data.aggregated_important_building_data"
"""
type uk_data_aggregated_important_building_data_aggregate {
  aggregate: uk_data_aggregated_important_building_data_aggregate_fields
  nodes: [uk_data_aggregated_important_building_data!]!
}

"""
aggregate fields of "uk_data.aggregated_important_building_data"
"""
type uk_data_aggregated_important_building_data_aggregate_fields {
  avg: uk_data_aggregated_important_building_data_avg_fields
  count(columns: [uk_data_aggregated_important_building_data_select_column!], distinct: Boolean): Int!
  max: uk_data_aggregated_important_building_data_max_fields
  min: uk_data_aggregated_important_building_data_min_fields
  stddev: uk_data_aggregated_important_building_data_stddev_fields
  stddev_pop: uk_data_aggregated_important_building_data_stddev_pop_fields
  stddev_samp: uk_data_aggregated_important_building_data_stddev_samp_fields
  sum: uk_data_aggregated_important_building_data_sum_fields
  var_pop: uk_data_aggregated_important_building_data_var_pop_fields
  var_samp: uk_data_aggregated_important_building_data_var_samp_fields
  variance: uk_data_aggregated_important_building_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_aggregated_important_building_data_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.aggregated_important_building_data". All fields are combined with a logical 'AND'.
"""
input uk_data_aggregated_important_building_data_bool_exp {
  _and: [uk_data_aggregated_important_building_data_bool_exp!]
  _not: uk_data_aggregated_important_building_data_bool_exp
  _or: [uk_data_aggregated_important_building_data_bool_exp!]
  classification: String_comparison_exp
  distance: float8_comparison_exp
  distinctive_name: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.aggregated_important_building_data"
"""
input uk_data_aggregated_important_building_data_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.aggregated_important_building_data"
"""
input uk_data_aggregated_important_building_data_insert_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate max on columns"""
type uk_data_aggregated_important_building_data_max_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate min on columns"""
type uk_data_aggregated_important_building_data_min_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
response of any mutation on the table "uk_data.aggregated_important_building_data"
"""
type uk_data_aggregated_important_building_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_aggregated_important_building_data!]!
}

"""
Ordering options when selecting data from "uk_data.aggregated_important_building_data".
"""
input uk_data_aggregated_important_building_data_order_by {
  classification: order_by
  distance: order_by
  distinctive_name: order_by
}

"""
select columns of table "uk_data.aggregated_important_building_data"
"""
enum uk_data_aggregated_important_building_data_select_column {
  """column name"""
  classification

  """column name"""
  distance

  """column name"""
  distinctive_name
}

"""
input type for updating data in table "uk_data.aggregated_important_building_data"
"""
input uk_data_aggregated_important_building_data_set_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate stddev on columns"""
type uk_data_aggregated_important_building_data_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_aggregated_important_building_data_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_aggregated_important_building_data_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_aggregated_important_building_data"
"""
input uk_data_aggregated_important_building_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_aggregated_important_building_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_aggregated_important_building_data_stream_cursor_value_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate sum on columns"""
type uk_data_aggregated_important_building_data_sum_fields {
  distance: float8
}

input uk_data_aggregated_important_building_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_aggregated_important_building_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_aggregated_important_building_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_aggregated_important_building_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_aggregated_important_building_data_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_aggregated_important_building_data_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_aggregated_important_building_data_variance_fields {
  distance: Float
}

"""
columns and relationships of "uk_data.aggregated_railway_station_data"
"""
type uk_data_aggregated_railway_station_data {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
aggregated selection of "uk_data.aggregated_railway_station_data"
"""
type uk_data_aggregated_railway_station_data_aggregate {
  aggregate: uk_data_aggregated_railway_station_data_aggregate_fields
  nodes: [uk_data_aggregated_railway_station_data!]!
}

"""
aggregate fields of "uk_data.aggregated_railway_station_data"
"""
type uk_data_aggregated_railway_station_data_aggregate_fields {
  avg: uk_data_aggregated_railway_station_data_avg_fields
  count(columns: [uk_data_aggregated_railway_station_data_select_column!], distinct: Boolean): Int!
  max: uk_data_aggregated_railway_station_data_max_fields
  min: uk_data_aggregated_railway_station_data_min_fields
  stddev: uk_data_aggregated_railway_station_data_stddev_fields
  stddev_pop: uk_data_aggregated_railway_station_data_stddev_pop_fields
  stddev_samp: uk_data_aggregated_railway_station_data_stddev_samp_fields
  sum: uk_data_aggregated_railway_station_data_sum_fields
  var_pop: uk_data_aggregated_railway_station_data_var_pop_fields
  var_samp: uk_data_aggregated_railway_station_data_var_samp_fields
  variance: uk_data_aggregated_railway_station_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_aggregated_railway_station_data_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.aggregated_railway_station_data". All fields are combined with a logical 'AND'.
"""
input uk_data_aggregated_railway_station_data_bool_exp {
  _and: [uk_data_aggregated_railway_station_data_bool_exp!]
  _not: uk_data_aggregated_railway_station_data_bool_exp
  _or: [uk_data_aggregated_railway_station_data_bool_exp!]
  classification: String_comparison_exp
  distance: float8_comparison_exp
  distinctive_name: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.aggregated_railway_station_data"
"""
input uk_data_aggregated_railway_station_data_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.aggregated_railway_station_data"
"""
input uk_data_aggregated_railway_station_data_insert_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate max on columns"""
type uk_data_aggregated_railway_station_data_max_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate min on columns"""
type uk_data_aggregated_railway_station_data_min_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
response of any mutation on the table "uk_data.aggregated_railway_station_data"
"""
type uk_data_aggregated_railway_station_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_aggregated_railway_station_data!]!
}

"""
Ordering options when selecting data from "uk_data.aggregated_railway_station_data".
"""
input uk_data_aggregated_railway_station_data_order_by {
  classification: order_by
  distance: order_by
  distinctive_name: order_by
}

"""
select columns of table "uk_data.aggregated_railway_station_data"
"""
enum uk_data_aggregated_railway_station_data_select_column {
  """column name"""
  classification

  """column name"""
  distance

  """column name"""
  distinctive_name
}

"""
input type for updating data in table "uk_data.aggregated_railway_station_data"
"""
input uk_data_aggregated_railway_station_data_set_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate stddev on columns"""
type uk_data_aggregated_railway_station_data_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_aggregated_railway_station_data_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_aggregated_railway_station_data_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_aggregated_railway_station_data"
"""
input uk_data_aggregated_railway_station_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_aggregated_railway_station_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_aggregated_railway_station_data_stream_cursor_value_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate sum on columns"""
type uk_data_aggregated_railway_station_data_sum_fields {
  distance: float8
}

input uk_data_aggregated_railway_station_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_aggregated_railway_station_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_aggregated_railway_station_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_aggregated_railway_station_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_aggregated_railway_station_data_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_aggregated_railway_station_data_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_aggregated_railway_station_data_variance_fields {
  distance: Float
}

"""
columns and relationships of "uk_data.aggregated_sites_nearby_data"
"""
type uk_data_aggregated_sites_nearby_data {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
aggregated selection of "uk_data.aggregated_sites_nearby_data"
"""
type uk_data_aggregated_sites_nearby_data_aggregate {
  aggregate: uk_data_aggregated_sites_nearby_data_aggregate_fields
  nodes: [uk_data_aggregated_sites_nearby_data!]!
}

"""
aggregate fields of "uk_data.aggregated_sites_nearby_data"
"""
type uk_data_aggregated_sites_nearby_data_aggregate_fields {
  avg: uk_data_aggregated_sites_nearby_data_avg_fields
  count(columns: [uk_data_aggregated_sites_nearby_data_select_column!], distinct: Boolean): Int!
  max: uk_data_aggregated_sites_nearby_data_max_fields
  min: uk_data_aggregated_sites_nearby_data_min_fields
  stddev: uk_data_aggregated_sites_nearby_data_stddev_fields
  stddev_pop: uk_data_aggregated_sites_nearby_data_stddev_pop_fields
  stddev_samp: uk_data_aggregated_sites_nearby_data_stddev_samp_fields
  sum: uk_data_aggregated_sites_nearby_data_sum_fields
  var_pop: uk_data_aggregated_sites_nearby_data_var_pop_fields
  var_samp: uk_data_aggregated_sites_nearby_data_var_samp_fields
  variance: uk_data_aggregated_sites_nearby_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_aggregated_sites_nearby_data_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.aggregated_sites_nearby_data". All fields are combined with a logical 'AND'.
"""
input uk_data_aggregated_sites_nearby_data_bool_exp {
  _and: [uk_data_aggregated_sites_nearby_data_bool_exp!]
  _not: uk_data_aggregated_sites_nearby_data_bool_exp
  _or: [uk_data_aggregated_sites_nearby_data_bool_exp!]
  classification: String_comparison_exp
  distance: float8_comparison_exp
  distinctive_name: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.aggregated_sites_nearby_data"
"""
input uk_data_aggregated_sites_nearby_data_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.aggregated_sites_nearby_data"
"""
input uk_data_aggregated_sites_nearby_data_insert_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate max on columns"""
type uk_data_aggregated_sites_nearby_data_max_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate min on columns"""
type uk_data_aggregated_sites_nearby_data_min_fields {
  classification: String
  distance: float8
  distinctive_name: String
}

"""
response of any mutation on the table "uk_data.aggregated_sites_nearby_data"
"""
type uk_data_aggregated_sites_nearby_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_aggregated_sites_nearby_data!]!
}

"""
Ordering options when selecting data from "uk_data.aggregated_sites_nearby_data".
"""
input uk_data_aggregated_sites_nearby_data_order_by {
  classification: order_by
  distance: order_by
  distinctive_name: order_by
}

"""
select columns of table "uk_data.aggregated_sites_nearby_data"
"""
enum uk_data_aggregated_sites_nearby_data_select_column {
  """column name"""
  classification

  """column name"""
  distance

  """column name"""
  distinctive_name
}

"""
input type for updating data in table "uk_data.aggregated_sites_nearby_data"
"""
input uk_data_aggregated_sites_nearby_data_set_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate stddev on columns"""
type uk_data_aggregated_sites_nearby_data_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_aggregated_sites_nearby_data_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_aggregated_sites_nearby_data_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_aggregated_sites_nearby_data"
"""
input uk_data_aggregated_sites_nearby_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_aggregated_sites_nearby_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_aggregated_sites_nearby_data_stream_cursor_value_input {
  classification: String
  distance: float8
  distinctive_name: String
}

"""aggregate sum on columns"""
type uk_data_aggregated_sites_nearby_data_sum_fields {
  distance: float8
}

input uk_data_aggregated_sites_nearby_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_aggregated_sites_nearby_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_aggregated_sites_nearby_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_aggregated_sites_nearby_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_aggregated_sites_nearby_data_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_aggregated_sites_nearby_data_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_aggregated_sites_nearby_data_variance_fields {
  distance: Float
}

"""
columns and relationships of "uk_data.building"
"""
type uk_data_building {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.building"
"""
type uk_data_building_aggregate {
  aggregate: uk_data_building_aggregate_fields
  nodes: [uk_data_building!]!
}

"""
aggregate fields of "uk_data.building"
"""
type uk_data_building_aggregate_fields {
  avg: uk_data_building_avg_fields
  count(columns: [uk_data_building_select_column!], distinct: Boolean): Int!
  max: uk_data_building_max_fields
  min: uk_data_building_min_fields
  stddev: uk_data_building_stddev_fields
  stddev_pop: uk_data_building_stddev_pop_fields
  stddev_samp: uk_data_building_stddev_samp_fields
  sum: uk_data_building_sum_fields
  var_pop: uk_data_building_var_pop_fields
  var_samp: uk_data_building_var_samp_fields
  variance: uk_data_building_variance_fields
}

"""aggregate avg on columns"""
type uk_data_building_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.building". All fields are combined with a logical 'AND'.
"""
input uk_data_building_bool_exp {
  _and: [uk_data_building_bool_exp!]
  _not: uk_data_building_bool_exp
  _or: [uk_data_building_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.building"
"""
enum uk_data_building_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  building_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.building"
"""
input uk_data_building_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.building"
"""
input uk_data_building_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_building_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_building_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.building"
"""
type uk_data_building_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_building!]!
}

"""
on_conflict condition type for table "uk_data.building"
"""
input uk_data_building_on_conflict {
  constraint: uk_data_building_constraint!
  update_columns: [uk_data_building_update_column!]! = []
  where: uk_data_building_bool_exp
}

"""Ordering options when selecting data from "uk_data.building"."""
input uk_data_building_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.building"""
input uk_data_building_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.building"
"""
enum uk_data_building_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.building"
"""
input uk_data_building_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_building_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_building_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_building_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_building"
"""
input uk_data_building_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_building_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_building_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_building_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.building"
"""
enum uk_data_building_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_building_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_building_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_building_set_input

  """filter the rows which have to be updated"""
  where: uk_data_building_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_building_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_building_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_building_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.car_charging_point"
"""
type uk_data_car_charging_point {
  charge_method: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
  rated_voltage: Int
  type: String
}

"""
aggregated selection of "uk_data.car_charging_point"
"""
type uk_data_car_charging_point_aggregate {
  aggregate: uk_data_car_charging_point_aggregate_fields
  nodes: [uk_data_car_charging_point!]!
}

"""
aggregate fields of "uk_data.car_charging_point"
"""
type uk_data_car_charging_point_aggregate_fields {
  avg: uk_data_car_charging_point_avg_fields
  count(columns: [uk_data_car_charging_point_select_column!], distinct: Boolean): Int!
  max: uk_data_car_charging_point_max_fields
  min: uk_data_car_charging_point_min_fields
  stddev: uk_data_car_charging_point_stddev_fields
  stddev_pop: uk_data_car_charging_point_stddev_pop_fields
  stddev_samp: uk_data_car_charging_point_stddev_samp_fields
  sum: uk_data_car_charging_point_sum_fields
  var_pop: uk_data_car_charging_point_var_pop_fields
  var_samp: uk_data_car_charging_point_var_samp_fields
  variance: uk_data_car_charging_point_variance_fields
}

"""aggregate avg on columns"""
type uk_data_car_charging_point_avg_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""
Boolean expression to filter rows from the table "uk_data.car_charging_point". All fields are combined with a logical 'AND'.
"""
input uk_data_car_charging_point_bool_exp {
  _and: [uk_data_car_charging_point_bool_exp!]
  _not: uk_data_car_charging_point_bool_exp
  _or: [uk_data_car_charging_point_bool_exp!]
  charge_method: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  rated_voltage: Int_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.car_charging_point"
"""
enum uk_data_car_charging_point_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  car_charging_point_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.car_charging_point"
"""
input uk_data_car_charging_point_inc_input {
  feature_code: Int
  fid: Int
  rated_voltage: Int
}

"""
input type for inserting data into table "uk_data.car_charging_point"
"""
input uk_data_car_charging_point_insert_input {
  charge_method: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  rated_voltage: Int
  type: String
}

"""aggregate max on columns"""
type uk_data_car_charging_point_max_fields {
  charge_method: String
  feature_code: Int
  fid: Int
  id: String
  rated_voltage: Int
  type: String
}

"""aggregate min on columns"""
type uk_data_car_charging_point_min_fields {
  charge_method: String
  feature_code: Int
  fid: Int
  id: String
  rated_voltage: Int
  type: String
}

"""
response of any mutation on the table "uk_data.car_charging_point"
"""
type uk_data_car_charging_point_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_car_charging_point!]!
}

"""
on_conflict condition type for table "uk_data.car_charging_point"
"""
input uk_data_car_charging_point_on_conflict {
  constraint: uk_data_car_charging_point_constraint!
  update_columns: [uk_data_car_charging_point_update_column!]! = []
  where: uk_data_car_charging_point_bool_exp
}

"""
Ordering options when selecting data from "uk_data.car_charging_point".
"""
input uk_data_car_charging_point_order_by {
  charge_method: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  rated_voltage: order_by
  type: order_by
}

"""primary key columns input for table: uk_data.car_charging_point"""
input uk_data_car_charging_point_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.car_charging_point"
"""
enum uk_data_car_charging_point_select_column {
  """column name"""
  charge_method

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  rated_voltage

  """column name"""
  type
}

"""
input type for updating data in table "uk_data.car_charging_point"
"""
input uk_data_car_charging_point_set_input {
  charge_method: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  rated_voltage: Int
  type: String
}

"""aggregate stddev on columns"""
type uk_data_car_charging_point_stddev_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_car_charging_point_stddev_pop_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_car_charging_point_stddev_samp_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""
Streaming cursor of the table "uk_data_car_charging_point"
"""
input uk_data_car_charging_point_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_car_charging_point_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_car_charging_point_stream_cursor_value_input {
  charge_method: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  rated_voltage: Int
  type: String
}

"""aggregate sum on columns"""
type uk_data_car_charging_point_sum_fields {
  feature_code: Int
  fid: Int
  rated_voltage: Int
}

"""
update columns of table "uk_data.car_charging_point"
"""
enum uk_data_car_charging_point_update_column {
  """column name"""
  charge_method

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  rated_voltage

  """column name"""
  type
}

input uk_data_car_charging_point_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_car_charging_point_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_car_charging_point_set_input

  """filter the rows which have to be updated"""
  where: uk_data_car_charging_point_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_car_charging_point_var_pop_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""aggregate var_samp on columns"""
type uk_data_car_charging_point_var_samp_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

"""aggregate variance on columns"""
type uk_data_car_charging_point_variance_fields {
  feature_code: Float
  fid: Float
  rated_voltage: Float
}

input uk_data_charging_point_within_radius_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.city_details"
"""
type uk_data_city_details {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""
aggregated selection of "uk_data.city_details"
"""
type uk_data_city_details_aggregate {
  aggregate: uk_data_city_details_aggregate_fields
  nodes: [uk_data_city_details!]!
}

"""
aggregate fields of "uk_data.city_details"
"""
type uk_data_city_details_aggregate_fields {
  avg: uk_data_city_details_avg_fields
  count(columns: [uk_data_city_details_select_column!], distinct: Boolean): Int!
  max: uk_data_city_details_max_fields
  min: uk_data_city_details_min_fields
  stddev: uk_data_city_details_stddev_fields
  stddev_pop: uk_data_city_details_stddev_pop_fields
  stddev_samp: uk_data_city_details_stddev_samp_fields
  sum: uk_data_city_details_sum_fields
  var_pop: uk_data_city_details_var_pop_fields
  var_samp: uk_data_city_details_var_samp_fields
  variance: uk_data_city_details_variance_fields
}

"""aggregate avg on columns"""
type uk_data_city_details_avg_fields {
  shutterstockid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.city_details". All fields are combined with a logical 'AND'.
"""
input uk_data_city_details_bool_exp {
  _and: [uk_data_city_details_bool_exp!]
  _not: uk_data_city_details_bool_exp
  _or: [uk_data_city_details_bool_exp!]
  city: String_comparison_exp
  description: String_comparison_exp
  h2: String_comparison_exp
  h3: String_comparison_exp
  imagelink: String_comparison_exp
  imgalt: String_comparison_exp
  shutterstockid: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.city_details"
"""
input uk_data_city_details_inc_input {
  shutterstockid: bigint
}

"""
input type for inserting data into table "uk_data.city_details"
"""
input uk_data_city_details_insert_input {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""aggregate max on columns"""
type uk_data_city_details_max_fields {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""aggregate min on columns"""
type uk_data_city_details_min_fields {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""
response of any mutation on the table "uk_data.city_details"
"""
type uk_data_city_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_city_details!]!
}

"""Ordering options when selecting data from "uk_data.city_details"."""
input uk_data_city_details_order_by {
  city: order_by
  description: order_by
  h2: order_by
  h3: order_by
  imagelink: order_by
  imgalt: order_by
  shutterstockid: order_by
}

"""
select columns of table "uk_data.city_details"
"""
enum uk_data_city_details_select_column {
  """column name"""
  city

  """column name"""
  description

  """column name"""
  h2

  """column name"""
  h3

  """column name"""
  imagelink

  """column name"""
  imgalt

  """column name"""
  shutterstockid
}

"""
input type for updating data in table "uk_data.city_details"
"""
input uk_data_city_details_set_input {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""aggregate stddev on columns"""
type uk_data_city_details_stddev_fields {
  shutterstockid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_city_details_stddev_pop_fields {
  shutterstockid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_city_details_stddev_samp_fields {
  shutterstockid: Float
}

"""
Streaming cursor of the table "uk_data_city_details"
"""
input uk_data_city_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_city_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_city_details_stream_cursor_value_input {
  city: String
  description: String
  h2: String
  h3: String
  imagelink: String
  imgalt: String
  shutterstockid: bigint
}

"""aggregate sum on columns"""
type uk_data_city_details_sum_fields {
  shutterstockid: bigint
}

input uk_data_city_details_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_city_details_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_city_details_set_input

  """filter the rows which have to be updated"""
  where: uk_data_city_details_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_city_details_var_pop_fields {
  shutterstockid: Float
}

"""aggregate var_samp on columns"""
type uk_data_city_details_var_samp_fields {
  shutterstockid: Float
}

"""aggregate variance on columns"""
type uk_data_city_details_variance_fields {
  shutterstockid: Float
}

"""
columns and relationships of "uk_data.county_details"
"""
type uk_data_county_details {
  county: String
  description: String!
  region: String
}

"""
aggregated selection of "uk_data.county_details"
"""
type uk_data_county_details_aggregate {
  aggregate: uk_data_county_details_aggregate_fields
  nodes: [uk_data_county_details!]!
}

"""
aggregate fields of "uk_data.county_details"
"""
type uk_data_county_details_aggregate_fields {
  count(columns: [uk_data_county_details_select_column!], distinct: Boolean): Int!
  max: uk_data_county_details_max_fields
  min: uk_data_county_details_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.county_details". All fields are combined with a logical 'AND'.
"""
input uk_data_county_details_bool_exp {
  _and: [uk_data_county_details_bool_exp!]
  _not: uk_data_county_details_bool_exp
  _or: [uk_data_county_details_bool_exp!]
  county: String_comparison_exp
  description: String_comparison_exp
  region: String_comparison_exp
}

"""
input type for inserting data into table "uk_data.county_details"
"""
input uk_data_county_details_insert_input {
  county: String
  description: String
  region: String
}

"""aggregate max on columns"""
type uk_data_county_details_max_fields {
  county: String
  description: String
  region: String
}

"""aggregate min on columns"""
type uk_data_county_details_min_fields {
  county: String
  description: String
  region: String
}

"""
response of any mutation on the table "uk_data.county_details"
"""
type uk_data_county_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_county_details!]!
}

"""Ordering options when selecting data from "uk_data.county_details"."""
input uk_data_county_details_order_by {
  county: order_by
  description: order_by
  region: order_by
}

"""
select columns of table "uk_data.county_details"
"""
enum uk_data_county_details_select_column {
  """column name"""
  county

  """column name"""
  description

  """column name"""
  region
}

"""
input type for updating data in table "uk_data.county_details"
"""
input uk_data_county_details_set_input {
  county: String
  description: String
  region: String
}

"""
Streaming cursor of the table "uk_data_county_details"
"""
input uk_data_county_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_county_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_county_details_stream_cursor_value_input {
  county: String
  description: String
  region: String
}

input uk_data_county_details_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_county_details_set_input

  """filter the rows which have to be updated"""
  where: uk_data_county_details_bool_exp!
}

"""
columns and relationships of "uk_data.demand_stats"
"""
type uk_data_demand_stats {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String!
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""
aggregated selection of "uk_data.demand_stats"
"""
type uk_data_demand_stats_aggregate {
  aggregate: uk_data_demand_stats_aggregate_fields
  nodes: [uk_data_demand_stats!]!
}

"""
aggregate fields of "uk_data.demand_stats"
"""
type uk_data_demand_stats_aggregate_fields {
  avg: uk_data_demand_stats_avg_fields
  count(columns: [uk_data_demand_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_demand_stats_max_fields
  min: uk_data_demand_stats_min_fields
  stddev: uk_data_demand_stats_stddev_fields
  stddev_pop: uk_data_demand_stats_stddev_pop_fields
  stddev_samp: uk_data_demand_stats_stddev_samp_fields
  sum: uk_data_demand_stats_sum_fields
  var_pop: uk_data_demand_stats_var_pop_fields
  var_samp: uk_data_demand_stats_var_samp_fields
  variance: uk_data_demand_stats_variance_fields
}

"""aggregate avg on columns"""
type uk_data_demand_stats_avg_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""
Boolean expression to filter rows from the table "uk_data.demand_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_demand_stats_bool_exp {
  _and: [uk_data_demand_stats_bool_exp!]
  _not: uk_data_demand_stats_bool_exp
  _or: [uk_data_demand_stats_bool_exp!]
  average_sales_per_month: Int_comparison_exp
  days_on_market: Int_comparison_exp
  demand_rating: String_comparison_exp
  last_update: timestamp_comparison_exp
  months_of_inventory: String_comparison_exp
  postcode: String_comparison_exp
  radius: String_comparison_exp
  total_for_sale: Int_comparison_exp
  turnover_per_month: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.demand_stats"
"""
enum uk_data_demand_stats_constraint {
  """
  unique or primary key constraint on columns "postcode"
  """
  demand_stats_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.demand_stats"
"""
input uk_data_demand_stats_inc_input {
  average_sales_per_month: Int
  days_on_market: Int
  total_for_sale: Int
}

"""
input type for inserting data into table "uk_data.demand_stats"
"""
input uk_data_demand_stats_insert_input {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""aggregate max on columns"""
type uk_data_demand_stats_max_fields {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""aggregate min on columns"""
type uk_data_demand_stats_min_fields {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""
response of any mutation on the table "uk_data.demand_stats"
"""
type uk_data_demand_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_demand_stats!]!
}

"""
on_conflict condition type for table "uk_data.demand_stats"
"""
input uk_data_demand_stats_on_conflict {
  constraint: uk_data_demand_stats_constraint!
  update_columns: [uk_data_demand_stats_update_column!]! = []
  where: uk_data_demand_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.demand_stats"."""
input uk_data_demand_stats_order_by {
  average_sales_per_month: order_by
  days_on_market: order_by
  demand_rating: order_by
  last_update: order_by
  months_of_inventory: order_by
  postcode: order_by
  radius: order_by
  total_for_sale: order_by
  turnover_per_month: order_by
}

"""primary key columns input for table: uk_data.demand_stats"""
input uk_data_demand_stats_pk_columns_input {
  postcode: String!
}

"""
select columns of table "uk_data.demand_stats"
"""
enum uk_data_demand_stats_select_column {
  """column name"""
  average_sales_per_month

  """column name"""
  days_on_market

  """column name"""
  demand_rating

  """column name"""
  last_update

  """column name"""
  months_of_inventory

  """column name"""
  postcode

  """column name"""
  radius

  """column name"""
  total_for_sale

  """column name"""
  turnover_per_month
}

"""
input type for updating data in table "uk_data.demand_stats"
"""
input uk_data_demand_stats_set_input {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""aggregate stddev on columns"""
type uk_data_demand_stats_stddev_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_demand_stats_stddev_pop_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_demand_stats_stddev_samp_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""
Streaming cursor of the table "uk_data_demand_stats"
"""
input uk_data_demand_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_demand_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_demand_stats_stream_cursor_value_input {
  average_sales_per_month: Int
  days_on_market: Int
  demand_rating: String
  last_update: timestamp
  months_of_inventory: String
  postcode: String
  radius: String
  total_for_sale: Int
  turnover_per_month: String
}

"""aggregate sum on columns"""
type uk_data_demand_stats_sum_fields {
  average_sales_per_month: Int
  days_on_market: Int
  total_for_sale: Int
}

"""
update columns of table "uk_data.demand_stats"
"""
enum uk_data_demand_stats_update_column {
  """column name"""
  average_sales_per_month

  """column name"""
  days_on_market

  """column name"""
  demand_rating

  """column name"""
  last_update

  """column name"""
  months_of_inventory

  """column name"""
  postcode

  """column name"""
  radius

  """column name"""
  total_for_sale

  """column name"""
  turnover_per_month
}

input uk_data_demand_stats_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_demand_stats_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_demand_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_demand_stats_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_demand_stats_var_pop_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""aggregate var_samp on columns"""
type uk_data_demand_stats_var_samp_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""aggregate variance on columns"""
type uk_data_demand_stats_variance_fields {
  average_sales_per_month: Float
  days_on_market: Float
  total_for_sale: Float
}

"""
columns and relationships of "uk_data.demographics"
"""
type uk_data_demographics {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String!
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""
aggregated selection of "uk_data.demographics"
"""
type uk_data_demographics_aggregate {
  aggregate: uk_data_demographics_aggregate_fields
  nodes: [uk_data_demographics!]!
}

"""
aggregate fields of "uk_data.demographics"
"""
type uk_data_demographics_aggregate_fields {
  avg: uk_data_demographics_avg_fields
  count(columns: [uk_data_demographics_select_column!], distinct: Boolean): Int!
  max: uk_data_demographics_max_fields
  min: uk_data_demographics_min_fields
  stddev: uk_data_demographics_stddev_fields
  stddev_pop: uk_data_demographics_stddev_pop_fields
  stddev_samp: uk_data_demographics_stddev_samp_fields
  sum: uk_data_demographics_sum_fields
  var_pop: uk_data_demographics_var_pop_fields
  var_samp: uk_data_demographics_var_samp_fields
  variance: uk_data_demographics_variance_fields
}

"""aggregate avg on columns"""
type uk_data_demographics_avg_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""
Boolean expression to filter rows from the table "uk_data.demographics". All fields are combined with a logical 'AND'.
"""
input uk_data_demographics_bool_exp {
  _and: [uk_data_demographics_bool_exp!]
  _not: uk_data_demographics_bool_exp
  _or: [uk_data_demographics_bool_exp!]
  age_0_4: float8_comparison_exp
  age_5_9: float8_comparison_exp
  age_10_14: float8_comparison_exp
  age_15_19: float8_comparison_exp
  age_20_24: float8_comparison_exp
  age_25_29: float8_comparison_exp
  age_30_34: float8_comparison_exp
  age_35_39: float8_comparison_exp
  age_40_44: float8_comparison_exp
  age_45_49: float8_comparison_exp
  age_50_54: float8_comparison_exp
  age_55_59: float8_comparison_exp
  age_60_64: float8_comparison_exp
  age_65_69: float8_comparison_exp
  age_70_74: float8_comparison_exp
  age_75_79: float8_comparison_exp
  age_80_84: float8_comparison_exp
  age_85_89: float8_comparison_exp
  commute_method_at_home: float8_comparison_exp
  commute_method_bicycle: float8_comparison_exp
  commute_method_bus: float8_comparison_exp
  commute_method_car_driver: float8_comparison_exp
  commute_method_car_passenger: float8_comparison_exp
  commute_method_foot: float8_comparison_exp
  commute_method_motorcycle: float8_comparison_exp
  commute_method_other: float8_comparison_exp
  commute_method_taxi: float8_comparison_exp
  commute_method_train: float8_comparison_exp
  commute_method_underground_light_rail: float8_comparison_exp
  constituences: String_comparison_exp
  deprivation: float8_comparison_exp
  health: float8_comparison_exp
  politics_brexit_party: float8_comparison_exp
  politics_conservative: float8_comparison_exp
  politics_green: float8_comparison_exp
  politics_labour: float8_comparison_exp
  politics_labour_coop: float8_comparison_exp
  politics_lib_dem: float8_comparison_exp
  postcode: String_comparison_exp
  proportion_with_degree: float8_comparison_exp
  social_grade_l1_l2_l3: float8_comparison_exp
  social_grade_l4_l5_l6: float8_comparison_exp
  social_grade_l7: float8_comparison_exp
  social_grade_l8_l9: float8_comparison_exp
  social_grade_l10_l11: float8_comparison_exp
  social_grade_l12: float8_comparison_exp
  social_grade_l13: float8_comparison_exp
  social_grade_l14: float8_comparison_exp
  vehicles_per_household: float8_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.demographics"
"""
enum uk_data_demographics_constraint {
  """
  unique or primary key constraint on columns "postcode"
  """
  demographics_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.demographics"
"""
input uk_data_demographics_inc_input {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""
input type for inserting data into table "uk_data.demographics"
"""
input uk_data_demographics_insert_input {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""aggregate max on columns"""
type uk_data_demographics_max_fields {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""aggregate min on columns"""
type uk_data_demographics_min_fields {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""
response of any mutation on the table "uk_data.demographics"
"""
type uk_data_demographics_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_demographics!]!
}

"""
on_conflict condition type for table "uk_data.demographics"
"""
input uk_data_demographics_on_conflict {
  constraint: uk_data_demographics_constraint!
  update_columns: [uk_data_demographics_update_column!]! = []
  where: uk_data_demographics_bool_exp
}

"""Ordering options when selecting data from "uk_data.demographics"."""
input uk_data_demographics_order_by {
  age_0_4: order_by
  age_5_9: order_by
  age_10_14: order_by
  age_15_19: order_by
  age_20_24: order_by
  age_25_29: order_by
  age_30_34: order_by
  age_35_39: order_by
  age_40_44: order_by
  age_45_49: order_by
  age_50_54: order_by
  age_55_59: order_by
  age_60_64: order_by
  age_65_69: order_by
  age_70_74: order_by
  age_75_79: order_by
  age_80_84: order_by
  age_85_89: order_by
  commute_method_at_home: order_by
  commute_method_bicycle: order_by
  commute_method_bus: order_by
  commute_method_car_driver: order_by
  commute_method_car_passenger: order_by
  commute_method_foot: order_by
  commute_method_motorcycle: order_by
  commute_method_other: order_by
  commute_method_taxi: order_by
  commute_method_train: order_by
  commute_method_underground_light_rail: order_by
  constituences: order_by
  deprivation: order_by
  health: order_by
  politics_brexit_party: order_by
  politics_conservative: order_by
  politics_green: order_by
  politics_labour: order_by
  politics_labour_coop: order_by
  politics_lib_dem: order_by
  postcode: order_by
  proportion_with_degree: order_by
  social_grade_l1_l2_l3: order_by
  social_grade_l4_l5_l6: order_by
  social_grade_l7: order_by
  social_grade_l8_l9: order_by
  social_grade_l10_l11: order_by
  social_grade_l12: order_by
  social_grade_l13: order_by
  social_grade_l14: order_by
  vehicles_per_household: order_by
}

"""primary key columns input for table: uk_data.demographics"""
input uk_data_demographics_pk_columns_input {
  postcode: String!
}

"""
select columns of table "uk_data.demographics"
"""
enum uk_data_demographics_select_column {
  """column name"""
  age_0_4

  """column name"""
  age_5_9

  """column name"""
  age_10_14

  """column name"""
  age_15_19

  """column name"""
  age_20_24

  """column name"""
  age_25_29

  """column name"""
  age_30_34

  """column name"""
  age_35_39

  """column name"""
  age_40_44

  """column name"""
  age_45_49

  """column name"""
  age_50_54

  """column name"""
  age_55_59

  """column name"""
  age_60_64

  """column name"""
  age_65_69

  """column name"""
  age_70_74

  """column name"""
  age_75_79

  """column name"""
  age_80_84

  """column name"""
  age_85_89

  """column name"""
  commute_method_at_home

  """column name"""
  commute_method_bicycle

  """column name"""
  commute_method_bus

  """column name"""
  commute_method_car_driver

  """column name"""
  commute_method_car_passenger

  """column name"""
  commute_method_foot

  """column name"""
  commute_method_motorcycle

  """column name"""
  commute_method_other

  """column name"""
  commute_method_taxi

  """column name"""
  commute_method_train

  """column name"""
  commute_method_underground_light_rail

  """column name"""
  constituences

  """column name"""
  deprivation

  """column name"""
  health

  """column name"""
  politics_brexit_party

  """column name"""
  politics_conservative

  """column name"""
  politics_green

  """column name"""
  politics_labour

  """column name"""
  politics_labour_coop

  """column name"""
  politics_lib_dem

  """column name"""
  postcode

  """column name"""
  proportion_with_degree

  """column name"""
  social_grade_l1_l2_l3

  """column name"""
  social_grade_l4_l5_l6

  """column name"""
  social_grade_l7

  """column name"""
  social_grade_l8_l9

  """column name"""
  social_grade_l10_l11

  """column name"""
  social_grade_l12

  """column name"""
  social_grade_l13

  """column name"""
  social_grade_l14

  """column name"""
  vehicles_per_household
}

"""
input type for updating data in table "uk_data.demographics"
"""
input uk_data_demographics_set_input {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""aggregate stddev on columns"""
type uk_data_demographics_stddev_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_demographics_stddev_pop_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_demographics_stddev_samp_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""
Streaming cursor of the table "uk_data_demographics"
"""
input uk_data_demographics_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_demographics_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_demographics_stream_cursor_value_input {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  constituences: String
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  postcode: String
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""aggregate sum on columns"""
type uk_data_demographics_sum_fields {
  age_0_4: float8
  age_5_9: float8
  age_10_14: float8
  age_15_19: float8
  age_20_24: float8
  age_25_29: float8
  age_30_34: float8
  age_35_39: float8
  age_40_44: float8
  age_45_49: float8
  age_50_54: float8
  age_55_59: float8
  age_60_64: float8
  age_65_69: float8
  age_70_74: float8
  age_75_79: float8
  age_80_84: float8
  age_85_89: float8
  commute_method_at_home: float8
  commute_method_bicycle: float8
  commute_method_bus: float8
  commute_method_car_driver: float8
  commute_method_car_passenger: float8
  commute_method_foot: float8
  commute_method_motorcycle: float8
  commute_method_other: float8
  commute_method_taxi: float8
  commute_method_train: float8
  commute_method_underground_light_rail: float8
  deprivation: float8
  health: float8
  politics_brexit_party: float8
  politics_conservative: float8
  politics_green: float8
  politics_labour: float8
  politics_labour_coop: float8
  politics_lib_dem: float8
  proportion_with_degree: float8
  social_grade_l1_l2_l3: float8
  social_grade_l4_l5_l6: float8
  social_grade_l7: float8
  social_grade_l8_l9: float8
  social_grade_l10_l11: float8
  social_grade_l12: float8
  social_grade_l13: float8
  social_grade_l14: float8
  vehicles_per_household: float8
}

"""
update columns of table "uk_data.demographics"
"""
enum uk_data_demographics_update_column {
  """column name"""
  age_0_4

  """column name"""
  age_5_9

  """column name"""
  age_10_14

  """column name"""
  age_15_19

  """column name"""
  age_20_24

  """column name"""
  age_25_29

  """column name"""
  age_30_34

  """column name"""
  age_35_39

  """column name"""
  age_40_44

  """column name"""
  age_45_49

  """column name"""
  age_50_54

  """column name"""
  age_55_59

  """column name"""
  age_60_64

  """column name"""
  age_65_69

  """column name"""
  age_70_74

  """column name"""
  age_75_79

  """column name"""
  age_80_84

  """column name"""
  age_85_89

  """column name"""
  commute_method_at_home

  """column name"""
  commute_method_bicycle

  """column name"""
  commute_method_bus

  """column name"""
  commute_method_car_driver

  """column name"""
  commute_method_car_passenger

  """column name"""
  commute_method_foot

  """column name"""
  commute_method_motorcycle

  """column name"""
  commute_method_other

  """column name"""
  commute_method_taxi

  """column name"""
  commute_method_train

  """column name"""
  commute_method_underground_light_rail

  """column name"""
  constituences

  """column name"""
  deprivation

  """column name"""
  health

  """column name"""
  politics_brexit_party

  """column name"""
  politics_conservative

  """column name"""
  politics_green

  """column name"""
  politics_labour

  """column name"""
  politics_labour_coop

  """column name"""
  politics_lib_dem

  """column name"""
  postcode

  """column name"""
  proportion_with_degree

  """column name"""
  social_grade_l1_l2_l3

  """column name"""
  social_grade_l4_l5_l6

  """column name"""
  social_grade_l7

  """column name"""
  social_grade_l8_l9

  """column name"""
  social_grade_l10_l11

  """column name"""
  social_grade_l12

  """column name"""
  social_grade_l13

  """column name"""
  social_grade_l14

  """column name"""
  vehicles_per_household
}

input uk_data_demographics_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_demographics_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_demographics_set_input

  """filter the rows which have to be updated"""
  where: uk_data_demographics_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_demographics_var_pop_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""aggregate var_samp on columns"""
type uk_data_demographics_var_samp_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""aggregate variance on columns"""
type uk_data_demographics_variance_fields {
  age_0_4: Float
  age_5_9: Float
  age_10_14: Float
  age_15_19: Float
  age_20_24: Float
  age_25_29: Float
  age_30_34: Float
  age_35_39: Float
  age_40_44: Float
  age_45_49: Float
  age_50_54: Float
  age_55_59: Float
  age_60_64: Float
  age_65_69: Float
  age_70_74: Float
  age_75_79: Float
  age_80_84: Float
  age_85_89: Float
  commute_method_at_home: Float
  commute_method_bicycle: Float
  commute_method_bus: Float
  commute_method_car_driver: Float
  commute_method_car_passenger: Float
  commute_method_foot: Float
  commute_method_motorcycle: Float
  commute_method_other: Float
  commute_method_taxi: Float
  commute_method_train: Float
  commute_method_underground_light_rail: Float
  deprivation: Float
  health: Float
  politics_brexit_party: Float
  politics_conservative: Float
  politics_green: Float
  politics_labour: Float
  politics_labour_coop: Float
  politics_lib_dem: Float
  proportion_with_degree: Float
  social_grade_l1_l2_l3: Float
  social_grade_l4_l5_l6: Float
  social_grade_l7: Float
  social_grade_l8_l9: Float
  social_grade_l10_l11: Float
  social_grade_l12: Float
  social_grade_l13: Float
  social_grade_l14: Float
  vehicles_per_household: Float
}

"""
columns and relationships of "uk_data.electricity_transmission_line"
"""
type uk_data_electricity_transmission_line {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.electricity_transmission_line"
"""
type uk_data_electricity_transmission_line_aggregate {
  aggregate: uk_data_electricity_transmission_line_aggregate_fields
  nodes: [uk_data_electricity_transmission_line!]!
}

"""
aggregate fields of "uk_data.electricity_transmission_line"
"""
type uk_data_electricity_transmission_line_aggregate_fields {
  avg: uk_data_electricity_transmission_line_avg_fields
  count(columns: [uk_data_electricity_transmission_line_select_column!], distinct: Boolean): Int!
  max: uk_data_electricity_transmission_line_max_fields
  min: uk_data_electricity_transmission_line_min_fields
  stddev: uk_data_electricity_transmission_line_stddev_fields
  stddev_pop: uk_data_electricity_transmission_line_stddev_pop_fields
  stddev_samp: uk_data_electricity_transmission_line_stddev_samp_fields
  sum: uk_data_electricity_transmission_line_sum_fields
  var_pop: uk_data_electricity_transmission_line_var_pop_fields
  var_samp: uk_data_electricity_transmission_line_var_samp_fields
  variance: uk_data_electricity_transmission_line_variance_fields
}

"""aggregate avg on columns"""
type uk_data_electricity_transmission_line_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.electricity_transmission_line". All fields are combined with a logical 'AND'.
"""
input uk_data_electricity_transmission_line_bool_exp {
  _and: [uk_data_electricity_transmission_line_bool_exp!]
  _not: uk_data_electricity_transmission_line_bool_exp
  _or: [uk_data_electricity_transmission_line_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.electricity_transmission_line"
"""
enum uk_data_electricity_transmission_line_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  electricity_transmission_line_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.electricity_transmission_line"
"""
input uk_data_electricity_transmission_line_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.electricity_transmission_line"
"""
input uk_data_electricity_transmission_line_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_electricity_transmission_line_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_electricity_transmission_line_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.electricity_transmission_line"
"""
type uk_data_electricity_transmission_line_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_electricity_transmission_line!]!
}

"""
on_conflict condition type for table "uk_data.electricity_transmission_line"
"""
input uk_data_electricity_transmission_line_on_conflict {
  constraint: uk_data_electricity_transmission_line_constraint!
  update_columns: [uk_data_electricity_transmission_line_update_column!]! = []
  where: uk_data_electricity_transmission_line_bool_exp
}

"""
Ordering options when selecting data from "uk_data.electricity_transmission_line".
"""
input uk_data_electricity_transmission_line_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
primary key columns input for table: uk_data.electricity_transmission_line
"""
input uk_data_electricity_transmission_line_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.electricity_transmission_line"
"""
enum uk_data_electricity_transmission_line_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.electricity_transmission_line"
"""
input uk_data_electricity_transmission_line_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_electricity_transmission_line_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_electricity_transmission_line_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_electricity_transmission_line_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_electricity_transmission_line"
"""
input uk_data_electricity_transmission_line_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_electricity_transmission_line_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_electricity_transmission_line_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_electricity_transmission_line_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.electricity_transmission_line"
"""
enum uk_data_electricity_transmission_line_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_electricity_transmission_line_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_electricity_transmission_line_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_electricity_transmission_line_set_input

  """filter the rows which have to be updated"""
  where: uk_data_electricity_transmission_line_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_electricity_transmission_line_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_electricity_transmission_line_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_electricity_transmission_line_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.epc_certificates"
"""
type uk_data_epc_certificates {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int!
  current_energy_rating: String!
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String!
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String!
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String!
  posttown: String
  potential_energy_efficiency: Int!
  potential_energy_rating: String!
  property_type: String!
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""
aggregated selection of "uk_data.epc_certificates"
"""
type uk_data_epc_certificates_aggregate {
  aggregate: uk_data_epc_certificates_aggregate_fields
  nodes: [uk_data_epc_certificates!]!
}

"""
aggregate fields of "uk_data.epc_certificates"
"""
type uk_data_epc_certificates_aggregate_fields {
  avg: uk_data_epc_certificates_avg_fields
  count(columns: [uk_data_epc_certificates_select_column!], distinct: Boolean): Int!
  max: uk_data_epc_certificates_max_fields
  min: uk_data_epc_certificates_min_fields
  stddev: uk_data_epc_certificates_stddev_fields
  stddev_pop: uk_data_epc_certificates_stddev_pop_fields
  stddev_samp: uk_data_epc_certificates_stddev_samp_fields
  sum: uk_data_epc_certificates_sum_fields
  var_pop: uk_data_epc_certificates_var_pop_fields
  var_samp: uk_data_epc_certificates_var_samp_fields
  variance: uk_data_epc_certificates_variance_fields
}

"""aggregate avg on columns"""
type uk_data_epc_certificates_avg_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""
Boolean expression to filter rows from the table "uk_data.epc_certificates". All fields are combined with a logical 'AND'.
"""
input uk_data_epc_certificates_bool_exp {
  _and: [uk_data_epc_certificates_bool_exp!]
  _not: uk_data_epc_certificates_bool_exp
  _or: [uk_data_epc_certificates_bool_exp!]
  address: String_comparison_exp
  address1: String_comparison_exp
  address2: String_comparison_exp
  address3: String_comparison_exp
  building_reference_number: String_comparison_exp
  built_form: String_comparison_exp
  co2_emiss_curr_per_floor_area: numeric_comparison_exp
  co2_emissions_current: numeric_comparison_exp
  co2_emissions_potential: numeric_comparison_exp
  constituency: String_comparison_exp
  constituency_label: String_comparison_exp
  construction_age_band: String_comparison_exp
  county: String_comparison_exp
  current_energy_efficiency: Int_comparison_exp
  current_energy_rating: String_comparison_exp
  energy_consumption_current: numeric_comparison_exp
  energy_consumption_potential: Int_comparison_exp
  energy_tariff: String_comparison_exp
  environment_impact_current: numeric_comparison_exp
  environment_impact_potential: numeric_comparison_exp
  extension_count: Int_comparison_exp
  fixed_lighting_outlets_count: Int_comparison_exp
  flat_storey_count: numeric_comparison_exp
  flat_top_storey: bpchar_comparison_exp
  floor_description: String_comparison_exp
  floor_energy_eff: String_comparison_exp
  floor_env_eff: String_comparison_exp
  floor_height: numeric_comparison_exp
  floor_level: String_comparison_exp
  glazed_area: String_comparison_exp
  glazed_type: String_comparison_exp
  heat_loss_corridor: String_comparison_exp
  heating_cost_current: numeric_comparison_exp
  heating_cost_potential: numeric_comparison_exp
  hot_water_cost_current: numeric_comparison_exp
  hot_water_cost_potential: numeric_comparison_exp
  hot_water_energy_eff: String_comparison_exp
  hot_water_env_eff: String_comparison_exp
  hotwater_description: String_comparison_exp
  inspection_date: String_comparison_exp
  last_update: timestamp_comparison_exp
  lighting_cost_current: numeric_comparison_exp
  lighting_cost_potential: numeric_comparison_exp
  lighting_description: String_comparison_exp
  lighting_energy_eff: String_comparison_exp
  lighting_env_eff: String_comparison_exp
  lmk_key: String_comparison_exp
  local_authority: String_comparison_exp
  local_authority_label: String_comparison_exp
  lodgement_date: String_comparison_exp
  lodgement_datetime: String_comparison_exp
  low_energy_fixed_light_count: Int_comparison_exp
  low_energy_lighting: Int_comparison_exp
  main_fuel: String_comparison_exp
  main_heating_controls: String_comparison_exp
  mainheat_description: String_comparison_exp
  mainheat_energy_eff: String_comparison_exp
  mainheat_env_eff: String_comparison_exp
  mainheatc_energy_eff: String_comparison_exp
  mainheatc_env_eff: String_comparison_exp
  mainheatcont_description: String_comparison_exp
  mains_gas_flag: String_comparison_exp
  mechanical_ventilation: String_comparison_exp
  multi_glaze_proportion: Int_comparison_exp
  number_habitable_rooms: Int_comparison_exp
  number_heated_rooms: Int_comparison_exp
  number_open_fireplaces: Int_comparison_exp
  photo_supply: numeric_comparison_exp
  postcode: String_comparison_exp
  posttown: String_comparison_exp
  potential_energy_efficiency: Int_comparison_exp
  potential_energy_rating: String_comparison_exp
  property_type: String_comparison_exp
  roof_description: String_comparison_exp
  roof_energy_eff: String_comparison_exp
  roof_env_eff: String_comparison_exp
  secondheat_description: String_comparison_exp
  sheating_energy_eff: String_comparison_exp
  sheating_env_eff: String_comparison_exp
  solar_water_heating_flag: bpchar_comparison_exp
  tenure: String_comparison_exp
  total_floor_area: numeric_comparison_exp
  transaction_type: String_comparison_exp
  unheated_corridor_length: numeric_comparison_exp
  uprn: bigint_comparison_exp
  uprn_source: String_comparison_exp
  walls_description: String_comparison_exp
  walls_energy_eff: String_comparison_exp
  walls_env_eff: String_comparison_exp
  wind_turbine_count: Int_comparison_exp
  windows_description: String_comparison_exp
  windows_energy_eff: String_comparison_exp
  windows_env_eff: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.epc_certificates"
"""
enum uk_data_epc_certificates_constraint {
  """
  unique or primary key constraint on columns "lmk_key"
  """
  epc_certificates_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.epc_certificates"
"""
input uk_data_epc_certificates_inc_input {
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  current_energy_efficiency: Int
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  floor_height: numeric
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  potential_energy_efficiency: Int
  total_floor_area: numeric
  unheated_corridor_length: numeric
  uprn: bigint
  wind_turbine_count: Int
}

"""
input type for inserting data into table "uk_data.epc_certificates"
"""
input uk_data_epc_certificates_insert_input {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int
  current_energy_rating: String
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String
  posttown: String
  potential_energy_efficiency: Int
  potential_energy_rating: String
  property_type: String
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""aggregate max on columns"""
type uk_data_epc_certificates_max_fields {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int
  current_energy_rating: String
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String
  posttown: String
  potential_energy_efficiency: Int
  potential_energy_rating: String
  property_type: String
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""aggregate min on columns"""
type uk_data_epc_certificates_min_fields {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int
  current_energy_rating: String
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String
  posttown: String
  potential_energy_efficiency: Int
  potential_energy_rating: String
  property_type: String
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""
response of any mutation on the table "uk_data.epc_certificates"
"""
type uk_data_epc_certificates_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_epc_certificates!]!
}

"""
on_conflict condition type for table "uk_data.epc_certificates"
"""
input uk_data_epc_certificates_on_conflict {
  constraint: uk_data_epc_certificates_constraint!
  update_columns: [uk_data_epc_certificates_update_column!]! = []
  where: uk_data_epc_certificates_bool_exp
}

"""Ordering options when selecting data from "uk_data.epc_certificates"."""
input uk_data_epc_certificates_order_by {
  address: order_by
  address1: order_by
  address2: order_by
  address3: order_by
  building_reference_number: order_by
  built_form: order_by
  co2_emiss_curr_per_floor_area: order_by
  co2_emissions_current: order_by
  co2_emissions_potential: order_by
  constituency: order_by
  constituency_label: order_by
  construction_age_band: order_by
  county: order_by
  current_energy_efficiency: order_by
  current_energy_rating: order_by
  energy_consumption_current: order_by
  energy_consumption_potential: order_by
  energy_tariff: order_by
  environment_impact_current: order_by
  environment_impact_potential: order_by
  extension_count: order_by
  fixed_lighting_outlets_count: order_by
  flat_storey_count: order_by
  flat_top_storey: order_by
  floor_description: order_by
  floor_energy_eff: order_by
  floor_env_eff: order_by
  floor_height: order_by
  floor_level: order_by
  glazed_area: order_by
  glazed_type: order_by
  heat_loss_corridor: order_by
  heating_cost_current: order_by
  heating_cost_potential: order_by
  hot_water_cost_current: order_by
  hot_water_cost_potential: order_by
  hot_water_energy_eff: order_by
  hot_water_env_eff: order_by
  hotwater_description: order_by
  inspection_date: order_by
  last_update: order_by
  lighting_cost_current: order_by
  lighting_cost_potential: order_by
  lighting_description: order_by
  lighting_energy_eff: order_by
  lighting_env_eff: order_by
  lmk_key: order_by
  local_authority: order_by
  local_authority_label: order_by
  lodgement_date: order_by
  lodgement_datetime: order_by
  low_energy_fixed_light_count: order_by
  low_energy_lighting: order_by
  main_fuel: order_by
  main_heating_controls: order_by
  mainheat_description: order_by
  mainheat_energy_eff: order_by
  mainheat_env_eff: order_by
  mainheatc_energy_eff: order_by
  mainheatc_env_eff: order_by
  mainheatcont_description: order_by
  mains_gas_flag: order_by
  mechanical_ventilation: order_by
  multi_glaze_proportion: order_by
  number_habitable_rooms: order_by
  number_heated_rooms: order_by
  number_open_fireplaces: order_by
  photo_supply: order_by
  postcode: order_by
  posttown: order_by
  potential_energy_efficiency: order_by
  potential_energy_rating: order_by
  property_type: order_by
  roof_description: order_by
  roof_energy_eff: order_by
  roof_env_eff: order_by
  secondheat_description: order_by
  sheating_energy_eff: order_by
  sheating_env_eff: order_by
  solar_water_heating_flag: order_by
  tenure: order_by
  total_floor_area: order_by
  transaction_type: order_by
  unheated_corridor_length: order_by
  uprn: order_by
  uprn_source: order_by
  walls_description: order_by
  walls_energy_eff: order_by
  walls_env_eff: order_by
  wind_turbine_count: order_by
  windows_description: order_by
  windows_energy_eff: order_by
  windows_env_eff: order_by
}

"""primary key columns input for table: uk_data.epc_certificates"""
input uk_data_epc_certificates_pk_columns_input {
  lmk_key: String!
}

"""
select columns of table "uk_data.epc_certificates"
"""
enum uk_data_epc_certificates_select_column {
  """column name"""
  address

  """column name"""
  address1

  """column name"""
  address2

  """column name"""
  address3

  """column name"""
  building_reference_number

  """column name"""
  built_form

  """column name"""
  co2_emiss_curr_per_floor_area

  """column name"""
  co2_emissions_current

  """column name"""
  co2_emissions_potential

  """column name"""
  constituency

  """column name"""
  constituency_label

  """column name"""
  construction_age_band

  """column name"""
  county

  """column name"""
  current_energy_efficiency

  """column name"""
  current_energy_rating

  """column name"""
  energy_consumption_current

  """column name"""
  energy_consumption_potential

  """column name"""
  energy_tariff

  """column name"""
  environment_impact_current

  """column name"""
  environment_impact_potential

  """column name"""
  extension_count

  """column name"""
  fixed_lighting_outlets_count

  """column name"""
  flat_storey_count

  """column name"""
  flat_top_storey

  """column name"""
  floor_description

  """column name"""
  floor_energy_eff

  """column name"""
  floor_env_eff

  """column name"""
  floor_height

  """column name"""
  floor_level

  """column name"""
  glazed_area

  """column name"""
  glazed_type

  """column name"""
  heat_loss_corridor

  """column name"""
  heating_cost_current

  """column name"""
  heating_cost_potential

  """column name"""
  hot_water_cost_current

  """column name"""
  hot_water_cost_potential

  """column name"""
  hot_water_energy_eff

  """column name"""
  hot_water_env_eff

  """column name"""
  hotwater_description

  """column name"""
  inspection_date

  """column name"""
  last_update

  """column name"""
  lighting_cost_current

  """column name"""
  lighting_cost_potential

  """column name"""
  lighting_description

  """column name"""
  lighting_energy_eff

  """column name"""
  lighting_env_eff

  """column name"""
  lmk_key

  """column name"""
  local_authority

  """column name"""
  local_authority_label

  """column name"""
  lodgement_date

  """column name"""
  lodgement_datetime

  """column name"""
  low_energy_fixed_light_count

  """column name"""
  low_energy_lighting

  """column name"""
  main_fuel

  """column name"""
  main_heating_controls

  """column name"""
  mainheat_description

  """column name"""
  mainheat_energy_eff

  """column name"""
  mainheat_env_eff

  """column name"""
  mainheatc_energy_eff

  """column name"""
  mainheatc_env_eff

  """column name"""
  mainheatcont_description

  """column name"""
  mains_gas_flag

  """column name"""
  mechanical_ventilation

  """column name"""
  multi_glaze_proportion

  """column name"""
  number_habitable_rooms

  """column name"""
  number_heated_rooms

  """column name"""
  number_open_fireplaces

  """column name"""
  photo_supply

  """column name"""
  postcode

  """column name"""
  posttown

  """column name"""
  potential_energy_efficiency

  """column name"""
  potential_energy_rating

  """column name"""
  property_type

  """column name"""
  roof_description

  """column name"""
  roof_energy_eff

  """column name"""
  roof_env_eff

  """column name"""
  secondheat_description

  """column name"""
  sheating_energy_eff

  """column name"""
  sheating_env_eff

  """column name"""
  solar_water_heating_flag

  """column name"""
  tenure

  """column name"""
  total_floor_area

  """column name"""
  transaction_type

  """column name"""
  unheated_corridor_length

  """column name"""
  uprn

  """column name"""
  uprn_source

  """column name"""
  walls_description

  """column name"""
  walls_energy_eff

  """column name"""
  walls_env_eff

  """column name"""
  wind_turbine_count

  """column name"""
  windows_description

  """column name"""
  windows_energy_eff

  """column name"""
  windows_env_eff
}

"""
input type for updating data in table "uk_data.epc_certificates"
"""
input uk_data_epc_certificates_set_input {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int
  current_energy_rating: String
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String
  posttown: String
  potential_energy_efficiency: Int
  potential_energy_rating: String
  property_type: String
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""aggregate stddev on columns"""
type uk_data_epc_certificates_stddev_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_epc_certificates_stddev_pop_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_epc_certificates_stddev_samp_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""
Streaming cursor of the table "uk_data_epc_certificates"
"""
input uk_data_epc_certificates_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_epc_certificates_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_epc_certificates_stream_cursor_value_input {
  address: String
  address1: String
  address2: String
  address3: String
  building_reference_number: String
  built_form: String
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  constituency: String
  constituency_label: String
  construction_age_band: String
  county: String
  current_energy_efficiency: Int
  current_energy_rating: String
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  energy_tariff: String
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  flat_top_storey: bpchar
  floor_description: String
  floor_energy_eff: String
  floor_env_eff: String
  floor_height: numeric
  floor_level: String
  glazed_area: String
  glazed_type: String
  heat_loss_corridor: String
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  hot_water_energy_eff: String
  hot_water_env_eff: String
  hotwater_description: String
  inspection_date: String
  last_update: timestamp
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  lighting_description: String
  lighting_energy_eff: String
  lighting_env_eff: String
  lmk_key: String
  local_authority: String
  local_authority_label: String
  lodgement_date: String
  lodgement_datetime: String
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  main_fuel: String
  main_heating_controls: String
  mainheat_description: String
  mainheat_energy_eff: String
  mainheat_env_eff: String
  mainheatc_energy_eff: String
  mainheatc_env_eff: String
  mainheatcont_description: String
  mains_gas_flag: String
  mechanical_ventilation: String
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  postcode: String
  posttown: String
  potential_energy_efficiency: Int
  potential_energy_rating: String
  property_type: String
  roof_description: String
  roof_energy_eff: String
  roof_env_eff: String
  secondheat_description: String
  sheating_energy_eff: String
  sheating_env_eff: String
  solar_water_heating_flag: bpchar
  tenure: String
  total_floor_area: numeric
  transaction_type: String
  unheated_corridor_length: numeric
  uprn: bigint
  uprn_source: String
  walls_description: String
  walls_energy_eff: String
  walls_env_eff: String
  wind_turbine_count: Int
  windows_description: String
  windows_energy_eff: String
  windows_env_eff: String
}

"""aggregate sum on columns"""
type uk_data_epc_certificates_sum_fields {
  co2_emiss_curr_per_floor_area: numeric
  co2_emissions_current: numeric
  co2_emissions_potential: numeric
  current_energy_efficiency: Int
  energy_consumption_current: numeric
  energy_consumption_potential: Int
  environment_impact_current: numeric
  environment_impact_potential: numeric
  extension_count: Int
  fixed_lighting_outlets_count: Int
  flat_storey_count: numeric
  floor_height: numeric
  heating_cost_current: numeric
  heating_cost_potential: numeric
  hot_water_cost_current: numeric
  hot_water_cost_potential: numeric
  lighting_cost_current: numeric
  lighting_cost_potential: numeric
  low_energy_fixed_light_count: Int
  low_energy_lighting: Int
  multi_glaze_proportion: Int
  number_habitable_rooms: Int
  number_heated_rooms: Int
  number_open_fireplaces: Int
  photo_supply: numeric
  potential_energy_efficiency: Int
  total_floor_area: numeric
  unheated_corridor_length: numeric
  uprn: bigint
  wind_turbine_count: Int
}

"""
update columns of table "uk_data.epc_certificates"
"""
enum uk_data_epc_certificates_update_column {
  """column name"""
  address

  """column name"""
  address1

  """column name"""
  address2

  """column name"""
  address3

  """column name"""
  building_reference_number

  """column name"""
  built_form

  """column name"""
  co2_emiss_curr_per_floor_area

  """column name"""
  co2_emissions_current

  """column name"""
  co2_emissions_potential

  """column name"""
  constituency

  """column name"""
  constituency_label

  """column name"""
  construction_age_band

  """column name"""
  county

  """column name"""
  current_energy_efficiency

  """column name"""
  current_energy_rating

  """column name"""
  energy_consumption_current

  """column name"""
  energy_consumption_potential

  """column name"""
  energy_tariff

  """column name"""
  environment_impact_current

  """column name"""
  environment_impact_potential

  """column name"""
  extension_count

  """column name"""
  fixed_lighting_outlets_count

  """column name"""
  flat_storey_count

  """column name"""
  flat_top_storey

  """column name"""
  floor_description

  """column name"""
  floor_energy_eff

  """column name"""
  floor_env_eff

  """column name"""
  floor_height

  """column name"""
  floor_level

  """column name"""
  glazed_area

  """column name"""
  glazed_type

  """column name"""
  heat_loss_corridor

  """column name"""
  heating_cost_current

  """column name"""
  heating_cost_potential

  """column name"""
  hot_water_cost_current

  """column name"""
  hot_water_cost_potential

  """column name"""
  hot_water_energy_eff

  """column name"""
  hot_water_env_eff

  """column name"""
  hotwater_description

  """column name"""
  inspection_date

  """column name"""
  last_update

  """column name"""
  lighting_cost_current

  """column name"""
  lighting_cost_potential

  """column name"""
  lighting_description

  """column name"""
  lighting_energy_eff

  """column name"""
  lighting_env_eff

  """column name"""
  lmk_key

  """column name"""
  local_authority

  """column name"""
  local_authority_label

  """column name"""
  lodgement_date

  """column name"""
  lodgement_datetime

  """column name"""
  low_energy_fixed_light_count

  """column name"""
  low_energy_lighting

  """column name"""
  main_fuel

  """column name"""
  main_heating_controls

  """column name"""
  mainheat_description

  """column name"""
  mainheat_energy_eff

  """column name"""
  mainheat_env_eff

  """column name"""
  mainheatc_energy_eff

  """column name"""
  mainheatc_env_eff

  """column name"""
  mainheatcont_description

  """column name"""
  mains_gas_flag

  """column name"""
  mechanical_ventilation

  """column name"""
  multi_glaze_proportion

  """column name"""
  number_habitable_rooms

  """column name"""
  number_heated_rooms

  """column name"""
  number_open_fireplaces

  """column name"""
  photo_supply

  """column name"""
  postcode

  """column name"""
  posttown

  """column name"""
  potential_energy_efficiency

  """column name"""
  potential_energy_rating

  """column name"""
  property_type

  """column name"""
  roof_description

  """column name"""
  roof_energy_eff

  """column name"""
  roof_env_eff

  """column name"""
  secondheat_description

  """column name"""
  sheating_energy_eff

  """column name"""
  sheating_env_eff

  """column name"""
  solar_water_heating_flag

  """column name"""
  tenure

  """column name"""
  total_floor_area

  """column name"""
  transaction_type

  """column name"""
  unheated_corridor_length

  """column name"""
  uprn

  """column name"""
  uprn_source

  """column name"""
  walls_description

  """column name"""
  walls_energy_eff

  """column name"""
  walls_env_eff

  """column name"""
  wind_turbine_count

  """column name"""
  windows_description

  """column name"""
  windows_energy_eff

  """column name"""
  windows_env_eff
}

input uk_data_epc_certificates_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_epc_certificates_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_epc_certificates_set_input

  """filter the rows which have to be updated"""
  where: uk_data_epc_certificates_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_epc_certificates_var_pop_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""aggregate var_samp on columns"""
type uk_data_epc_certificates_var_samp_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""aggregate variance on columns"""
type uk_data_epc_certificates_variance_fields {
  co2_emiss_curr_per_floor_area: Float
  co2_emissions_current: Float
  co2_emissions_potential: Float
  current_energy_efficiency: Float
  energy_consumption_current: Float
  energy_consumption_potential: Float
  environment_impact_current: Float
  environment_impact_potential: Float
  extension_count: Float
  fixed_lighting_outlets_count: Float
  flat_storey_count: Float
  floor_height: Float
  heating_cost_current: Float
  heating_cost_potential: Float
  hot_water_cost_current: Float
  hot_water_cost_potential: Float
  lighting_cost_current: Float
  lighting_cost_potential: Float
  low_energy_fixed_light_count: Float
  low_energy_lighting: Float
  multi_glaze_proportion: Float
  number_habitable_rooms: Float
  number_heated_rooms: Float
  number_open_fireplaces: Float
  photo_supply: Float
  potential_energy_efficiency: Float
  total_floor_area: Float
  unheated_corridor_length: Float
  uprn: Float
  wind_turbine_count: Float
}

"""
columns and relationships of "uk_data.epc_recommendations"
"""
type uk_data_epc_recommendations {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int!
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String!
}

"""
aggregated selection of "uk_data.epc_recommendations"
"""
type uk_data_epc_recommendations_aggregate {
  aggregate: uk_data_epc_recommendations_aggregate_fields
  nodes: [uk_data_epc_recommendations!]!
}

"""
aggregate fields of "uk_data.epc_recommendations"
"""
type uk_data_epc_recommendations_aggregate_fields {
  avg: uk_data_epc_recommendations_avg_fields
  count(columns: [uk_data_epc_recommendations_select_column!], distinct: Boolean): Int!
  max: uk_data_epc_recommendations_max_fields
  min: uk_data_epc_recommendations_min_fields
  stddev: uk_data_epc_recommendations_stddev_fields
  stddev_pop: uk_data_epc_recommendations_stddev_pop_fields
  stddev_samp: uk_data_epc_recommendations_stddev_samp_fields
  sum: uk_data_epc_recommendations_sum_fields
  var_pop: uk_data_epc_recommendations_var_pop_fields
  var_samp: uk_data_epc_recommendations_var_samp_fields
  variance: uk_data_epc_recommendations_variance_fields
}

"""aggregate avg on columns"""
type uk_data_epc_recommendations_avg_fields {
  improvement_id: Float
  improvement_item: Float
}

"""
Boolean expression to filter rows from the table "uk_data.epc_recommendations". All fields are combined with a logical 'AND'.
"""
input uk_data_epc_recommendations_bool_exp {
  _and: [uk_data_epc_recommendations_bool_exp!]
  _not: uk_data_epc_recommendations_bool_exp
  _or: [uk_data_epc_recommendations_bool_exp!]
  improvement_descr_text: String_comparison_exp
  improvement_id: Int_comparison_exp
  improvement_id_text: String_comparison_exp
  improvement_item: Int_comparison_exp
  improvement_summary_text: String_comparison_exp
  indicative_cost: String_comparison_exp
  last_update: timestamp_comparison_exp
  lmk_key: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.epc_recommendations"
"""
input uk_data_epc_recommendations_inc_input {
  improvement_id: Int
  improvement_item: Int
}

"""
input type for inserting data into table "uk_data.epc_recommendations"
"""
input uk_data_epc_recommendations_insert_input {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String
}

"""aggregate max on columns"""
type uk_data_epc_recommendations_max_fields {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String
}

"""aggregate min on columns"""
type uk_data_epc_recommendations_min_fields {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String
}

"""
response of any mutation on the table "uk_data.epc_recommendations"
"""
type uk_data_epc_recommendations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_epc_recommendations!]!
}

"""
Ordering options when selecting data from "uk_data.epc_recommendations".
"""
input uk_data_epc_recommendations_order_by {
  improvement_descr_text: order_by
  improvement_id: order_by
  improvement_id_text: order_by
  improvement_item: order_by
  improvement_summary_text: order_by
  indicative_cost: order_by
  last_update: order_by
  lmk_key: order_by
}

"""
select columns of table "uk_data.epc_recommendations"
"""
enum uk_data_epc_recommendations_select_column {
  """column name"""
  improvement_descr_text

  """column name"""
  improvement_id

  """column name"""
  improvement_id_text

  """column name"""
  improvement_item

  """column name"""
  improvement_summary_text

  """column name"""
  indicative_cost

  """column name"""
  last_update

  """column name"""
  lmk_key
}

"""
input type for updating data in table "uk_data.epc_recommendations"
"""
input uk_data_epc_recommendations_set_input {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String
}

"""aggregate stddev on columns"""
type uk_data_epc_recommendations_stddev_fields {
  improvement_id: Float
  improvement_item: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_epc_recommendations_stddev_pop_fields {
  improvement_id: Float
  improvement_item: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_epc_recommendations_stddev_samp_fields {
  improvement_id: Float
  improvement_item: Float
}

"""
Streaming cursor of the table "uk_data_epc_recommendations"
"""
input uk_data_epc_recommendations_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_epc_recommendations_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_epc_recommendations_stream_cursor_value_input {
  improvement_descr_text: String
  improvement_id: Int
  improvement_id_text: String
  improvement_item: Int
  improvement_summary_text: String
  indicative_cost: String
  last_update: timestamp
  lmk_key: String
}

"""aggregate sum on columns"""
type uk_data_epc_recommendations_sum_fields {
  improvement_id: Int
  improvement_item: Int
}

input uk_data_epc_recommendations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_epc_recommendations_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_epc_recommendations_set_input

  """filter the rows which have to be updated"""
  where: uk_data_epc_recommendations_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_epc_recommendations_var_pop_fields {
  improvement_id: Float
  improvement_item: Float
}

"""aggregate var_samp on columns"""
type uk_data_epc_recommendations_var_samp_fields {
  improvement_id: Float
  improvement_item: Float
}

"""aggregate variance on columns"""
type uk_data_epc_recommendations_variance_fields {
  improvement_id: Float
  improvement_item: Float
}

"""
columns and relationships of "uk_data.flyway_schema_history"
"""
type uk_data_flyway_schema_history {
  checksum: Int
  description: String!
  execution_time: Int!
  installed_by: String!
  installed_on: timestamp!
  installed_rank: Int!
  script: String!
  success: Boolean!
  type: String!
  version: String
}

"""
aggregated selection of "uk_data.flyway_schema_history"
"""
type uk_data_flyway_schema_history_aggregate {
  aggregate: uk_data_flyway_schema_history_aggregate_fields
  nodes: [uk_data_flyway_schema_history!]!
}

"""
aggregate fields of "uk_data.flyway_schema_history"
"""
type uk_data_flyway_schema_history_aggregate_fields {
  avg: uk_data_flyway_schema_history_avg_fields
  count(columns: [uk_data_flyway_schema_history_select_column!], distinct: Boolean): Int!
  max: uk_data_flyway_schema_history_max_fields
  min: uk_data_flyway_schema_history_min_fields
  stddev: uk_data_flyway_schema_history_stddev_fields
  stddev_pop: uk_data_flyway_schema_history_stddev_pop_fields
  stddev_samp: uk_data_flyway_schema_history_stddev_samp_fields
  sum: uk_data_flyway_schema_history_sum_fields
  var_pop: uk_data_flyway_schema_history_var_pop_fields
  var_samp: uk_data_flyway_schema_history_var_samp_fields
  variance: uk_data_flyway_schema_history_variance_fields
}

"""aggregate avg on columns"""
type uk_data_flyway_schema_history_avg_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""
Boolean expression to filter rows from the table "uk_data.flyway_schema_history". All fields are combined with a logical 'AND'.
"""
input uk_data_flyway_schema_history_bool_exp {
  _and: [uk_data_flyway_schema_history_bool_exp!]
  _not: uk_data_flyway_schema_history_bool_exp
  _or: [uk_data_flyway_schema_history_bool_exp!]
  checksum: Int_comparison_exp
  description: String_comparison_exp
  execution_time: Int_comparison_exp
  installed_by: String_comparison_exp
  installed_on: timestamp_comparison_exp
  installed_rank: Int_comparison_exp
  script: String_comparison_exp
  success: Boolean_comparison_exp
  type: String_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.flyway_schema_history"
"""
enum uk_data_flyway_schema_history_constraint {
  """
  unique or primary key constraint on columns "installed_rank"
  """
  flyway_schema_history_pk
}

"""
input type for incrementing numeric columns in table "uk_data.flyway_schema_history"
"""
input uk_data_flyway_schema_history_inc_input {
  checksum: Int
  execution_time: Int
  installed_rank: Int
}

"""
input type for inserting data into table "uk_data.flyway_schema_history"
"""
input uk_data_flyway_schema_history_insert_input {
  checksum: Int
  description: String
  execution_time: Int
  installed_by: String
  installed_on: timestamp
  installed_rank: Int
  script: String
  success: Boolean
  type: String
  version: String
}

"""aggregate max on columns"""
type uk_data_flyway_schema_history_max_fields {
  checksum: Int
  description: String
  execution_time: Int
  installed_by: String
  installed_on: timestamp
  installed_rank: Int
  script: String
  type: String
  version: String
}

"""aggregate min on columns"""
type uk_data_flyway_schema_history_min_fields {
  checksum: Int
  description: String
  execution_time: Int
  installed_by: String
  installed_on: timestamp
  installed_rank: Int
  script: String
  type: String
  version: String
}

"""
response of any mutation on the table "uk_data.flyway_schema_history"
"""
type uk_data_flyway_schema_history_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_flyway_schema_history!]!
}

"""
on_conflict condition type for table "uk_data.flyway_schema_history"
"""
input uk_data_flyway_schema_history_on_conflict {
  constraint: uk_data_flyway_schema_history_constraint!
  update_columns: [uk_data_flyway_schema_history_update_column!]! = []
  where: uk_data_flyway_schema_history_bool_exp
}

"""
Ordering options when selecting data from "uk_data.flyway_schema_history".
"""
input uk_data_flyway_schema_history_order_by {
  checksum: order_by
  description: order_by
  execution_time: order_by
  installed_by: order_by
  installed_on: order_by
  installed_rank: order_by
  script: order_by
  success: order_by
  type: order_by
  version: order_by
}

"""primary key columns input for table: uk_data.flyway_schema_history"""
input uk_data_flyway_schema_history_pk_columns_input {
  installed_rank: Int!
}

"""
select columns of table "uk_data.flyway_schema_history"
"""
enum uk_data_flyway_schema_history_select_column {
  """column name"""
  checksum

  """column name"""
  description

  """column name"""
  execution_time

  """column name"""
  installed_by

  """column name"""
  installed_on

  """column name"""
  installed_rank

  """column name"""
  script

  """column name"""
  success

  """column name"""
  type

  """column name"""
  version
}

"""
input type for updating data in table "uk_data.flyway_schema_history"
"""
input uk_data_flyway_schema_history_set_input {
  checksum: Int
  description: String
  execution_time: Int
  installed_by: String
  installed_on: timestamp
  installed_rank: Int
  script: String
  success: Boolean
  type: String
  version: String
}

"""aggregate stddev on columns"""
type uk_data_flyway_schema_history_stddev_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_flyway_schema_history_stddev_pop_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_flyway_schema_history_stddev_samp_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""
Streaming cursor of the table "uk_data_flyway_schema_history"
"""
input uk_data_flyway_schema_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_flyway_schema_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_flyway_schema_history_stream_cursor_value_input {
  checksum: Int
  description: String
  execution_time: Int
  installed_by: String
  installed_on: timestamp
  installed_rank: Int
  script: String
  success: Boolean
  type: String
  version: String
}

"""aggregate sum on columns"""
type uk_data_flyway_schema_history_sum_fields {
  checksum: Int
  execution_time: Int
  installed_rank: Int
}

"""
update columns of table "uk_data.flyway_schema_history"
"""
enum uk_data_flyway_schema_history_update_column {
  """column name"""
  checksum

  """column name"""
  description

  """column name"""
  execution_time

  """column name"""
  installed_by

  """column name"""
  installed_on

  """column name"""
  installed_rank

  """column name"""
  script

  """column name"""
  success

  """column name"""
  type

  """column name"""
  version
}

input uk_data_flyway_schema_history_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_flyway_schema_history_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_flyway_schema_history_set_input

  """filter the rows which have to be updated"""
  where: uk_data_flyway_schema_history_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_flyway_schema_history_var_pop_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""aggregate var_samp on columns"""
type uk_data_flyway_schema_history_var_samp_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""aggregate variance on columns"""
type uk_data_flyway_schema_history_variance_fields {
  checksum: Float
  execution_time: Float
  installed_rank: Float
}

"""
columns and relationships of "uk_data.foreshore"
"""
type uk_data_foreshore {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.foreshore"
"""
type uk_data_foreshore_aggregate {
  aggregate: uk_data_foreshore_aggregate_fields
  nodes: [uk_data_foreshore!]!
}

"""
aggregate fields of "uk_data.foreshore"
"""
type uk_data_foreshore_aggregate_fields {
  avg: uk_data_foreshore_avg_fields
  count(columns: [uk_data_foreshore_select_column!], distinct: Boolean): Int!
  max: uk_data_foreshore_max_fields
  min: uk_data_foreshore_min_fields
  stddev: uk_data_foreshore_stddev_fields
  stddev_pop: uk_data_foreshore_stddev_pop_fields
  stddev_samp: uk_data_foreshore_stddev_samp_fields
  sum: uk_data_foreshore_sum_fields
  var_pop: uk_data_foreshore_var_pop_fields
  var_samp: uk_data_foreshore_var_samp_fields
  variance: uk_data_foreshore_variance_fields
}

"""aggregate avg on columns"""
type uk_data_foreshore_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.foreshore". All fields are combined with a logical 'AND'.
"""
input uk_data_foreshore_bool_exp {
  _and: [uk_data_foreshore_bool_exp!]
  _not: uk_data_foreshore_bool_exp
  _or: [uk_data_foreshore_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.foreshore"
"""
enum uk_data_foreshore_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  foreshore_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.foreshore"
"""
input uk_data_foreshore_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.foreshore"
"""
input uk_data_foreshore_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_foreshore_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_foreshore_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.foreshore"
"""
type uk_data_foreshore_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_foreshore!]!
}

"""
on_conflict condition type for table "uk_data.foreshore"
"""
input uk_data_foreshore_on_conflict {
  constraint: uk_data_foreshore_constraint!
  update_columns: [uk_data_foreshore_update_column!]! = []
  where: uk_data_foreshore_bool_exp
}

"""Ordering options when selecting data from "uk_data.foreshore"."""
input uk_data_foreshore_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.foreshore"""
input uk_data_foreshore_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.foreshore"
"""
enum uk_data_foreshore_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.foreshore"
"""
input uk_data_foreshore_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_foreshore_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_foreshore_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_foreshore_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_foreshore"
"""
input uk_data_foreshore_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_foreshore_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_foreshore_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_foreshore_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.foreshore"
"""
enum uk_data_foreshore_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_foreshore_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_foreshore_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_foreshore_set_input

  """filter the rows which have to be updated"""
  where: uk_data_foreshore_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_foreshore_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_foreshore_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_foreshore_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.functional_site"
"""
type uk_data_functional_site {
  classification: String
  distinctive_name: String
  feature_code: Int!
  fid: Int!
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site"
"""
type uk_data_functional_site_aggregate {
  aggregate: uk_data_functional_site_aggregate_fields
  nodes: [uk_data_functional_site!]!
}

"""
aggregate fields of "uk_data.functional_site"
"""
type uk_data_functional_site_aggregate_fields {
  avg: uk_data_functional_site_avg_fields
  count(columns: [uk_data_functional_site_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_max_fields
  min: uk_data_functional_site_min_fields
  stddev: uk_data_functional_site_stddev_fields
  stddev_pop: uk_data_functional_site_stddev_pop_fields
  stddev_samp: uk_data_functional_site_stddev_samp_fields
  sum: uk_data_functional_site_sum_fields
  var_pop: uk_data_functional_site_var_pop_fields
  var_samp: uk_data_functional_site_var_samp_fields
  variance: uk_data_functional_site_variance_fields
}

"""
columns and relationships of "uk_data.functional_site_air_transport"
"""
type uk_data_functional_site_air_transport {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site_air_transport"
"""
type uk_data_functional_site_air_transport_aggregate {
  aggregate: uk_data_functional_site_air_transport_aggregate_fields
  nodes: [uk_data_functional_site_air_transport!]!
}

"""
aggregate fields of "uk_data.functional_site_air_transport"
"""
type uk_data_functional_site_air_transport_aggregate_fields {
  avg: uk_data_functional_site_air_transport_avg_fields
  count(columns: [uk_data_functional_site_air_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_air_transport_max_fields
  min: uk_data_functional_site_air_transport_min_fields
  stddev: uk_data_functional_site_air_transport_stddev_fields
  stddev_pop: uk_data_functional_site_air_transport_stddev_pop_fields
  stddev_samp: uk_data_functional_site_air_transport_stddev_samp_fields
  sum: uk_data_functional_site_air_transport_sum_fields
  var_pop: uk_data_functional_site_air_transport_var_pop_fields
  var_samp: uk_data_functional_site_air_transport_var_samp_fields
  variance: uk_data_functional_site_air_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_functional_site_air_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site_air_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_air_transport_bool_exp {
  _and: [uk_data_functional_site_air_transport_bool_exp!]
  _not: uk_data_functional_site_air_transport_bool_exp
  _or: [uk_data_functional_site_air_transport_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_functional_site_air_transport_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""aggregate min on columns"""
type uk_data_functional_site_air_transport_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
Ordering options when selecting data from "uk_data.functional_site_air_transport".
"""
input uk_data_functional_site_air_transport_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
select columns of table "uk_data.functional_site_air_transport"
"""
enum uk_data_functional_site_air_transport_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""aggregate stddev on columns"""
type uk_data_functional_site_air_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_air_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_air_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site_air_transport"
"""
input uk_data_functional_site_air_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_air_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_air_transport_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_air_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_air_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_air_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_air_transport_variance_fields {
  feature_code: Float
  fid: Float
}

"""aggregate avg on columns"""
type uk_data_functional_site_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_bool_exp {
  _and: [uk_data_functional_site_bool_exp!]
  _not: uk_data_functional_site_bool_exp
  _or: [uk_data_functional_site_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""
columns and relationships of "uk_data.functional_site_education"
"""
type uk_data_functional_site_education {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site_education"
"""
type uk_data_functional_site_education_aggregate {
  aggregate: uk_data_functional_site_education_aggregate_fields
  nodes: [uk_data_functional_site_education!]!
}

"""
aggregate fields of "uk_data.functional_site_education"
"""
type uk_data_functional_site_education_aggregate_fields {
  avg: uk_data_functional_site_education_avg_fields
  count(columns: [uk_data_functional_site_education_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_education_max_fields
  min: uk_data_functional_site_education_min_fields
  stddev: uk_data_functional_site_education_stddev_fields
  stddev_pop: uk_data_functional_site_education_stddev_pop_fields
  stddev_samp: uk_data_functional_site_education_stddev_samp_fields
  sum: uk_data_functional_site_education_sum_fields
  var_pop: uk_data_functional_site_education_var_pop_fields
  var_samp: uk_data_functional_site_education_var_samp_fields
  variance: uk_data_functional_site_education_variance_fields
}

"""aggregate avg on columns"""
type uk_data_functional_site_education_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site_education". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_education_bool_exp {
  _and: [uk_data_functional_site_education_bool_exp!]
  _not: uk_data_functional_site_education_bool_exp
  _or: [uk_data_functional_site_education_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_functional_site_education_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""aggregate min on columns"""
type uk_data_functional_site_education_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
Ordering options when selecting data from "uk_data.functional_site_education".
"""
input uk_data_functional_site_education_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
select columns of table "uk_data.functional_site_education"
"""
enum uk_data_functional_site_education_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""aggregate stddev on columns"""
type uk_data_functional_site_education_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_education_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_education_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site_education"
"""
input uk_data_functional_site_education_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_education_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_education_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_education_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_education_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_education_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_education_variance_fields {
  feature_code: Float
  fid: Float
}

"""
input type for incrementing numeric columns in table "uk_data.functional_site"
"""
input uk_data_functional_site_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.functional_site"
"""
input uk_data_functional_site_insert_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate max on columns"""
type uk_data_functional_site_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
columns and relationships of "uk_data.functional_site_medical_care"
"""
type uk_data_functional_site_medical_care {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site_medical_care"
"""
type uk_data_functional_site_medical_care_aggregate {
  aggregate: uk_data_functional_site_medical_care_aggregate_fields
  nodes: [uk_data_functional_site_medical_care!]!
}

"""
aggregate fields of "uk_data.functional_site_medical_care"
"""
type uk_data_functional_site_medical_care_aggregate_fields {
  avg: uk_data_functional_site_medical_care_avg_fields
  count(columns: [uk_data_functional_site_medical_care_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_medical_care_max_fields
  min: uk_data_functional_site_medical_care_min_fields
  stddev: uk_data_functional_site_medical_care_stddev_fields
  stddev_pop: uk_data_functional_site_medical_care_stddev_pop_fields
  stddev_samp: uk_data_functional_site_medical_care_stddev_samp_fields
  sum: uk_data_functional_site_medical_care_sum_fields
  var_pop: uk_data_functional_site_medical_care_var_pop_fields
  var_samp: uk_data_functional_site_medical_care_var_samp_fields
  variance: uk_data_functional_site_medical_care_variance_fields
}

"""aggregate avg on columns"""
type uk_data_functional_site_medical_care_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site_medical_care". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_medical_care_bool_exp {
  _and: [uk_data_functional_site_medical_care_bool_exp!]
  _not: uk_data_functional_site_medical_care_bool_exp
  _or: [uk_data_functional_site_medical_care_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_functional_site_medical_care_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""aggregate min on columns"""
type uk_data_functional_site_medical_care_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
Ordering options when selecting data from "uk_data.functional_site_medical_care".
"""
input uk_data_functional_site_medical_care_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
select columns of table "uk_data.functional_site_medical_care"
"""
enum uk_data_functional_site_medical_care_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""aggregate stddev on columns"""
type uk_data_functional_site_medical_care_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_medical_care_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_medical_care_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site_medical_care"
"""
input uk_data_functional_site_medical_care_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_medical_care_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_medical_care_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_medical_care_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_medical_care_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_medical_care_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_medical_care_variance_fields {
  feature_code: Float
  fid: Float
}

"""aggregate min on columns"""
type uk_data_functional_site_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
response of any mutation on the table "uk_data.functional_site"
"""
type uk_data_functional_site_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_functional_site!]!
}

"""Ordering options when selecting data from "uk_data.functional_site"."""
input uk_data_functional_site_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
columns and relationships of "uk_data.functional_site_road_transport"
"""
type uk_data_functional_site_road_transport {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site_road_transport"
"""
type uk_data_functional_site_road_transport_aggregate {
  aggregate: uk_data_functional_site_road_transport_aggregate_fields
  nodes: [uk_data_functional_site_road_transport!]!
}

"""
aggregate fields of "uk_data.functional_site_road_transport"
"""
type uk_data_functional_site_road_transport_aggregate_fields {
  avg: uk_data_functional_site_road_transport_avg_fields
  count(columns: [uk_data_functional_site_road_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_road_transport_max_fields
  min: uk_data_functional_site_road_transport_min_fields
  stddev: uk_data_functional_site_road_transport_stddev_fields
  stddev_pop: uk_data_functional_site_road_transport_stddev_pop_fields
  stddev_samp: uk_data_functional_site_road_transport_stddev_samp_fields
  sum: uk_data_functional_site_road_transport_sum_fields
  var_pop: uk_data_functional_site_road_transport_var_pop_fields
  var_samp: uk_data_functional_site_road_transport_var_samp_fields
  variance: uk_data_functional_site_road_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_functional_site_road_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site_road_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_road_transport_bool_exp {
  _and: [uk_data_functional_site_road_transport_bool_exp!]
  _not: uk_data_functional_site_road_transport_bool_exp
  _or: [uk_data_functional_site_road_transport_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_functional_site_road_transport_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""aggregate min on columns"""
type uk_data_functional_site_road_transport_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
Ordering options when selecting data from "uk_data.functional_site_road_transport".
"""
input uk_data_functional_site_road_transport_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
select columns of table "uk_data.functional_site_road_transport"
"""
enum uk_data_functional_site_road_transport_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""aggregate stddev on columns"""
type uk_data_functional_site_road_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_road_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_road_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site_road_transport"
"""
input uk_data_functional_site_road_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_road_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_road_transport_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_road_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_road_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_road_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_road_transport_variance_fields {
  feature_code: Float
  fid: Float
}

"""
select columns of table "uk_data.functional_site"
"""
enum uk_data_functional_site_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""
input type for updating data in table "uk_data.functional_site"
"""
input uk_data_functional_site_set_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate stddev on columns"""
type uk_data_functional_site_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site"
"""
input uk_data_functional_site_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_sum_fields {
  feature_code: Int
  fid: Int
}

input uk_data_functional_site_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_functional_site_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_functional_site_set_input

  """filter the rows which have to be updated"""
  where: uk_data_functional_site_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.functional_site_water_transport"
"""
type uk_data_functional_site_water_transport {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""
aggregated selection of "uk_data.functional_site_water_transport"
"""
type uk_data_functional_site_water_transport_aggregate {
  aggregate: uk_data_functional_site_water_transport_aggregate_fields
  nodes: [uk_data_functional_site_water_transport!]!
}

"""
aggregate fields of "uk_data.functional_site_water_transport"
"""
type uk_data_functional_site_water_transport_aggregate_fields {
  avg: uk_data_functional_site_water_transport_avg_fields
  count(columns: [uk_data_functional_site_water_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_functional_site_water_transport_max_fields
  min: uk_data_functional_site_water_transport_min_fields
  stddev: uk_data_functional_site_water_transport_stddev_fields
  stddev_pop: uk_data_functional_site_water_transport_stddev_pop_fields
  stddev_samp: uk_data_functional_site_water_transport_stddev_samp_fields
  sum: uk_data_functional_site_water_transport_sum_fields
  var_pop: uk_data_functional_site_water_transport_var_pop_fields
  var_samp: uk_data_functional_site_water_transport_var_samp_fields
  variance: uk_data_functional_site_water_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_functional_site_water_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.functional_site_water_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_functional_site_water_transport_bool_exp {
  _and: [uk_data_functional_site_water_transport_bool_exp!]
  _not: uk_data_functional_site_water_transport_bool_exp
  _or: [uk_data_functional_site_water_transport_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  site_theme: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_functional_site_water_transport_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""aggregate min on columns"""
type uk_data_functional_site_water_transport_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
  site_theme: String
}

"""
Ordering options when selecting data from "uk_data.functional_site_water_transport".
"""
input uk_data_functional_site_water_transport_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  site_theme: order_by
}

"""
select columns of table "uk_data.functional_site_water_transport"
"""
enum uk_data_functional_site_water_transport_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  site_theme
}

"""aggregate stddev on columns"""
type uk_data_functional_site_water_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_functional_site_water_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_functional_site_water_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_functional_site_water_transport"
"""
input uk_data_functional_site_water_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_functional_site_water_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_functional_site_water_transport_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  site_theme: String
}

"""aggregate sum on columns"""
type uk_data_functional_site_water_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_functional_site_water_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_functional_site_water_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_functional_site_water_transport_variance_fields {
  feature_code: Float
  fid: Float
}

input uk_data_functional_sites_within_radius_air_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_functional_sites_within_radius_args {
  input_site_theme: String
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_functional_sites_within_radius_education_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_functional_sites_within_radius_medical_care_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_functional_sites_within_radius_road_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_functional_sites_within_radius_water_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.glasshouse"
"""
type uk_data_glasshouse {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.glasshouse"
"""
type uk_data_glasshouse_aggregate {
  aggregate: uk_data_glasshouse_aggregate_fields
  nodes: [uk_data_glasshouse!]!
}

"""
aggregate fields of "uk_data.glasshouse"
"""
type uk_data_glasshouse_aggregate_fields {
  avg: uk_data_glasshouse_avg_fields
  count(columns: [uk_data_glasshouse_select_column!], distinct: Boolean): Int!
  max: uk_data_glasshouse_max_fields
  min: uk_data_glasshouse_min_fields
  stddev: uk_data_glasshouse_stddev_fields
  stddev_pop: uk_data_glasshouse_stddev_pop_fields
  stddev_samp: uk_data_glasshouse_stddev_samp_fields
  sum: uk_data_glasshouse_sum_fields
  var_pop: uk_data_glasshouse_var_pop_fields
  var_samp: uk_data_glasshouse_var_samp_fields
  variance: uk_data_glasshouse_variance_fields
}

"""aggregate avg on columns"""
type uk_data_glasshouse_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.glasshouse". All fields are combined with a logical 'AND'.
"""
input uk_data_glasshouse_bool_exp {
  _and: [uk_data_glasshouse_bool_exp!]
  _not: uk_data_glasshouse_bool_exp
  _or: [uk_data_glasshouse_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.glasshouse"
"""
enum uk_data_glasshouse_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  glasshouse_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.glasshouse"
"""
input uk_data_glasshouse_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.glasshouse"
"""
input uk_data_glasshouse_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_glasshouse_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_glasshouse_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.glasshouse"
"""
type uk_data_glasshouse_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_glasshouse!]!
}

"""
on_conflict condition type for table "uk_data.glasshouse"
"""
input uk_data_glasshouse_on_conflict {
  constraint: uk_data_glasshouse_constraint!
  update_columns: [uk_data_glasshouse_update_column!]! = []
  where: uk_data_glasshouse_bool_exp
}

"""Ordering options when selecting data from "uk_data.glasshouse"."""
input uk_data_glasshouse_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.glasshouse"""
input uk_data_glasshouse_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.glasshouse"
"""
enum uk_data_glasshouse_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.glasshouse"
"""
input uk_data_glasshouse_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_glasshouse_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_glasshouse_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_glasshouse_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_glasshouse"
"""
input uk_data_glasshouse_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_glasshouse_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_glasshouse_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_glasshouse_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.glasshouse"
"""
enum uk_data_glasshouse_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_glasshouse_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_glasshouse_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_glasshouse_set_input

  """filter the rows which have to be updated"""
  where: uk_data_glasshouse_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_glasshouse_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_glasshouse_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_glasshouse_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.growth_stats"
"""
type uk_data_growth_stats {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String!
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""
aggregated selection of "uk_data.growth_stats"
"""
type uk_data_growth_stats_aggregate {
  aggregate: uk_data_growth_stats_aggregate_fields
  nodes: [uk_data_growth_stats!]!
}

"""
aggregate fields of "uk_data.growth_stats"
"""
type uk_data_growth_stats_aggregate_fields {
  count(columns: [uk_data_growth_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_growth_stats_max_fields
  min: uk_data_growth_stats_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.growth_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_growth_stats_bool_exp {
  _and: [uk_data_growth_stats_bool_exp!]
  _not: uk_data_growth_stats_bool_exp
  _or: [uk_data_growth_stats_bool_exp!]
  growth1year: String_comparison_exp
  growth2year: String_comparison_exp
  growth3year: String_comparison_exp
  growth4year: String_comparison_exp
  growth5year: String_comparison_exp
  growth6year: String_comparison_exp
  last_update: timestamp_comparison_exp
  month1year: String_comparison_exp
  month2year: String_comparison_exp
  month3year: String_comparison_exp
  month4year: String_comparison_exp
  month5year: String_comparison_exp
  month6year: String_comparison_exp
  postcode: String_comparison_exp
  price1year: String_comparison_exp
  price2year: String_comparison_exp
  price3year: String_comparison_exp
  price4year: String_comparison_exp
  price5year: String_comparison_exp
  price6year: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.growth_stats"
"""
enum uk_data_growth_stats_constraint {
  """
  unique or primary key constraint on columns "postcode"
  """
  growth_stats_pkey
}

"""
input type for inserting data into table "uk_data.growth_stats"
"""
input uk_data_growth_stats_insert_input {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""aggregate max on columns"""
type uk_data_growth_stats_max_fields {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""aggregate min on columns"""
type uk_data_growth_stats_min_fields {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""
response of any mutation on the table "uk_data.growth_stats"
"""
type uk_data_growth_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_growth_stats!]!
}

"""
on_conflict condition type for table "uk_data.growth_stats"
"""
input uk_data_growth_stats_on_conflict {
  constraint: uk_data_growth_stats_constraint!
  update_columns: [uk_data_growth_stats_update_column!]! = []
  where: uk_data_growth_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.growth_stats"."""
input uk_data_growth_stats_order_by {
  growth1year: order_by
  growth2year: order_by
  growth3year: order_by
  growth4year: order_by
  growth5year: order_by
  growth6year: order_by
  last_update: order_by
  month1year: order_by
  month2year: order_by
  month3year: order_by
  month4year: order_by
  month5year: order_by
  month6year: order_by
  postcode: order_by
  price1year: order_by
  price2year: order_by
  price3year: order_by
  price4year: order_by
  price5year: order_by
  price6year: order_by
}

"""primary key columns input for table: uk_data.growth_stats"""
input uk_data_growth_stats_pk_columns_input {
  postcode: String!
}

"""
select columns of table "uk_data.growth_stats"
"""
enum uk_data_growth_stats_select_column {
  """column name"""
  growth1year

  """column name"""
  growth2year

  """column name"""
  growth3year

  """column name"""
  growth4year

  """column name"""
  growth5year

  """column name"""
  growth6year

  """column name"""
  last_update

  """column name"""
  month1year

  """column name"""
  month2year

  """column name"""
  month3year

  """column name"""
  month4year

  """column name"""
  month5year

  """column name"""
  month6year

  """column name"""
  postcode

  """column name"""
  price1year

  """column name"""
  price2year

  """column name"""
  price3year

  """column name"""
  price4year

  """column name"""
  price5year

  """column name"""
  price6year
}

"""
input type for updating data in table "uk_data.growth_stats"
"""
input uk_data_growth_stats_set_input {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""
Streaming cursor of the table "uk_data_growth_stats"
"""
input uk_data_growth_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_growth_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_growth_stats_stream_cursor_value_input {
  growth1year: String
  growth2year: String
  growth3year: String
  growth4year: String
  growth5year: String
  growth6year: String
  last_update: timestamp
  month1year: String
  month2year: String
  month3year: String
  month4year: String
  month5year: String
  month6year: String
  postcode: String
  price1year: String
  price2year: String
  price3year: String
  price4year: String
  price5year: String
  price6year: String
}

"""
update columns of table "uk_data.growth_stats"
"""
enum uk_data_growth_stats_update_column {
  """column name"""
  growth1year

  """column name"""
  growth2year

  """column name"""
  growth3year

  """column name"""
  growth4year

  """column name"""
  growth5year

  """column name"""
  growth6year

  """column name"""
  last_update

  """column name"""
  month1year

  """column name"""
  month2year

  """column name"""
  month3year

  """column name"""
  month4year

  """column name"""
  month5year

  """column name"""
  month6year

  """column name"""
  postcode

  """column name"""
  price1year

  """column name"""
  price2year

  """column name"""
  price3year

  """column name"""
  price4year

  """column name"""
  price5year

  """column name"""
  price6year
}

input uk_data_growth_stats_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_growth_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_growth_stats_bool_exp!
}

"""
columns and relationships of "uk_data.hmo_stats"
"""
type uk_data_hmo_stats {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String!
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""
aggregated selection of "uk_data.hmo_stats"
"""
type uk_data_hmo_stats_aggregate {
  aggregate: uk_data_hmo_stats_aggregate_fields
  nodes: [uk_data_hmo_stats!]!
}

"""
aggregate fields of "uk_data.hmo_stats"
"""
type uk_data_hmo_stats_aggregate_fields {
  avg: uk_data_hmo_stats_avg_fields
  count(columns: [uk_data_hmo_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_hmo_stats_max_fields
  min: uk_data_hmo_stats_min_fields
  stddev: uk_data_hmo_stats_stddev_fields
  stddev_pop: uk_data_hmo_stats_stddev_pop_fields
  stddev_samp: uk_data_hmo_stats_stddev_samp_fields
  sum: uk_data_hmo_stats_sum_fields
  var_pop: uk_data_hmo_stats_var_pop_fields
  var_samp: uk_data_hmo_stats_var_samp_fields
  variance: uk_data_hmo_stats_variance_fields
}

"""aggregate avg on columns"""
type uk_data_hmo_stats_avg_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""
Boolean expression to filter rows from the table "uk_data.hmo_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_hmo_stats_bool_exp {
  _and: [uk_data_hmo_stats_bool_exp!]
  _not: uk_data_hmo_stats_bool_exp
  _or: [uk_data_hmo_stats_bool_exp!]
  doubleensuiteaverage: Int_comparison_exp
  doubleensuitepcmax70: Int_comparison_exp
  doubleensuitepcmax80: Int_comparison_exp
  doubleensuitepcmax90: Int_comparison_exp
  doubleensuitepcmax100: Int_comparison_exp
  doubleensuitepcmin70: Int_comparison_exp
  doubleensuitepcmin80: Int_comparison_exp
  doubleensuitepcmin90: Int_comparison_exp
  doubleensuitepcmin100: Int_comparison_exp
  doubleensuitepointsanalysed: String_comparison_exp
  doubleensuiteradius: String_comparison_exp
  doubleensuiteunit: String_comparison_exp
  doublesharedbathaverage: Int_comparison_exp
  doublesharedbathpcmax70: Int_comparison_exp
  doublesharedbathpcmax80: Int_comparison_exp
  doublesharedbathpcmax90: Int_comparison_exp
  doublesharedbathpcmax100: Int_comparison_exp
  doublesharedbathpcmin70: Int_comparison_exp
  doublesharedbathpcmin80: Int_comparison_exp
  doublesharedbathpcmin90: Int_comparison_exp
  doublesharedbathpcmin100: Int_comparison_exp
  doublesharedbathpointsanalysed: String_comparison_exp
  doublesharedbathradius: String_comparison_exp
  doublesharedbathunit: String_comparison_exp
  last_update: timestamp_comparison_exp
  outcode: String_comparison_exp
  singleensuiteaverage: Int_comparison_exp
  singleensuitepcmax70: Int_comparison_exp
  singleensuitepcmax80: Int_comparison_exp
  singleensuitepcmax90: Int_comparison_exp
  singleensuitepcmax100: Int_comparison_exp
  singleensuitepcmin70: Int_comparison_exp
  singleensuitepcmin80: Int_comparison_exp
  singleensuitepcmin90: Int_comparison_exp
  singleensuitepcmin100: Int_comparison_exp
  singleensuitepointsanalysed: String_comparison_exp
  singleensuiteradius: String_comparison_exp
  singleensuiteunit: String_comparison_exp
  singlesharedbathaverage: Int_comparison_exp
  singlesharedbathpcmax70: Int_comparison_exp
  singlesharedbathpcmax80: Int_comparison_exp
  singlesharedbathpcmax90: Int_comparison_exp
  singlesharedbathpcmax100: Int_comparison_exp
  singlesharedbathpcmin70: Int_comparison_exp
  singlesharedbathpcmin80: Int_comparison_exp
  singlesharedbathpcmin90: Int_comparison_exp
  singlesharedbathpcmin100: Int_comparison_exp
  singlesharedbathpointsanalysed: String_comparison_exp
  singlesharedbathradius: String_comparison_exp
  singlesharedbathunit: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.hmo_stats"
"""
enum uk_data_hmo_stats_constraint {
  """
  unique or primary key constraint on columns "outcode"
  """
  hmo_stats_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.hmo_stats"
"""
input uk_data_hmo_stats_inc_input {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
}

"""
input type for inserting data into table "uk_data.hmo_stats"
"""
input uk_data_hmo_stats_insert_input {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""aggregate max on columns"""
type uk_data_hmo_stats_max_fields {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""aggregate min on columns"""
type uk_data_hmo_stats_min_fields {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""
response of any mutation on the table "uk_data.hmo_stats"
"""
type uk_data_hmo_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_hmo_stats!]!
}

"""
on_conflict condition type for table "uk_data.hmo_stats"
"""
input uk_data_hmo_stats_on_conflict {
  constraint: uk_data_hmo_stats_constraint!
  update_columns: [uk_data_hmo_stats_update_column!]! = []
  where: uk_data_hmo_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.hmo_stats"."""
input uk_data_hmo_stats_order_by {
  doubleensuiteaverage: order_by
  doubleensuitepcmax70: order_by
  doubleensuitepcmax80: order_by
  doubleensuitepcmax90: order_by
  doubleensuitepcmax100: order_by
  doubleensuitepcmin70: order_by
  doubleensuitepcmin80: order_by
  doubleensuitepcmin90: order_by
  doubleensuitepcmin100: order_by
  doubleensuitepointsanalysed: order_by
  doubleensuiteradius: order_by
  doubleensuiteunit: order_by
  doublesharedbathaverage: order_by
  doublesharedbathpcmax70: order_by
  doublesharedbathpcmax80: order_by
  doublesharedbathpcmax90: order_by
  doublesharedbathpcmax100: order_by
  doublesharedbathpcmin70: order_by
  doublesharedbathpcmin80: order_by
  doublesharedbathpcmin90: order_by
  doublesharedbathpcmin100: order_by
  doublesharedbathpointsanalysed: order_by
  doublesharedbathradius: order_by
  doublesharedbathunit: order_by
  last_update: order_by
  outcode: order_by
  singleensuiteaverage: order_by
  singleensuitepcmax70: order_by
  singleensuitepcmax80: order_by
  singleensuitepcmax90: order_by
  singleensuitepcmax100: order_by
  singleensuitepcmin70: order_by
  singleensuitepcmin80: order_by
  singleensuitepcmin90: order_by
  singleensuitepcmin100: order_by
  singleensuitepointsanalysed: order_by
  singleensuiteradius: order_by
  singleensuiteunit: order_by
  singlesharedbathaverage: order_by
  singlesharedbathpcmax70: order_by
  singlesharedbathpcmax80: order_by
  singlesharedbathpcmax90: order_by
  singlesharedbathpcmax100: order_by
  singlesharedbathpcmin70: order_by
  singlesharedbathpcmin80: order_by
  singlesharedbathpcmin90: order_by
  singlesharedbathpcmin100: order_by
  singlesharedbathpointsanalysed: order_by
  singlesharedbathradius: order_by
  singlesharedbathunit: order_by
}

"""primary key columns input for table: uk_data.hmo_stats"""
input uk_data_hmo_stats_pk_columns_input {
  outcode: String!
}

"""
select columns of table "uk_data.hmo_stats"
"""
enum uk_data_hmo_stats_select_column {
  """column name"""
  doubleensuiteaverage

  """column name"""
  doubleensuitepcmax70

  """column name"""
  doubleensuitepcmax80

  """column name"""
  doubleensuitepcmax90

  """column name"""
  doubleensuitepcmax100

  """column name"""
  doubleensuitepcmin70

  """column name"""
  doubleensuitepcmin80

  """column name"""
  doubleensuitepcmin90

  """column name"""
  doubleensuitepcmin100

  """column name"""
  doubleensuitepointsanalysed

  """column name"""
  doubleensuiteradius

  """column name"""
  doubleensuiteunit

  """column name"""
  doublesharedbathaverage

  """column name"""
  doublesharedbathpcmax70

  """column name"""
  doublesharedbathpcmax80

  """column name"""
  doublesharedbathpcmax90

  """column name"""
  doublesharedbathpcmax100

  """column name"""
  doublesharedbathpcmin70

  """column name"""
  doublesharedbathpcmin80

  """column name"""
  doublesharedbathpcmin90

  """column name"""
  doublesharedbathpcmin100

  """column name"""
  doublesharedbathpointsanalysed

  """column name"""
  doublesharedbathradius

  """column name"""
  doublesharedbathunit

  """column name"""
  last_update

  """column name"""
  outcode

  """column name"""
  singleensuiteaverage

  """column name"""
  singleensuitepcmax70

  """column name"""
  singleensuitepcmax80

  """column name"""
  singleensuitepcmax90

  """column name"""
  singleensuitepcmax100

  """column name"""
  singleensuitepcmin70

  """column name"""
  singleensuitepcmin80

  """column name"""
  singleensuitepcmin90

  """column name"""
  singleensuitepcmin100

  """column name"""
  singleensuitepointsanalysed

  """column name"""
  singleensuiteradius

  """column name"""
  singleensuiteunit

  """column name"""
  singlesharedbathaverage

  """column name"""
  singlesharedbathpcmax70

  """column name"""
  singlesharedbathpcmax80

  """column name"""
  singlesharedbathpcmax90

  """column name"""
  singlesharedbathpcmax100

  """column name"""
  singlesharedbathpcmin70

  """column name"""
  singlesharedbathpcmin80

  """column name"""
  singlesharedbathpcmin90

  """column name"""
  singlesharedbathpcmin100

  """column name"""
  singlesharedbathpointsanalysed

  """column name"""
  singlesharedbathradius

  """column name"""
  singlesharedbathunit
}

"""
input type for updating data in table "uk_data.hmo_stats"
"""
input uk_data_hmo_stats_set_input {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""aggregate stddev on columns"""
type uk_data_hmo_stats_stddev_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_hmo_stats_stddev_pop_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_hmo_stats_stddev_samp_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""
Streaming cursor of the table "uk_data_hmo_stats"
"""
input uk_data_hmo_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_hmo_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_hmo_stats_stream_cursor_value_input {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doubleensuitepointsanalysed: String
  doubleensuiteradius: String
  doubleensuiteunit: String
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  doublesharedbathpointsanalysed: String
  doublesharedbathradius: String
  doublesharedbathunit: String
  last_update: timestamp
  outcode: String
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singleensuitepointsanalysed: String
  singleensuiteradius: String
  singleensuiteunit: String
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
  singlesharedbathpointsanalysed: String
  singlesharedbathradius: String
  singlesharedbathunit: String
}

"""aggregate sum on columns"""
type uk_data_hmo_stats_sum_fields {
  doubleensuiteaverage: Int
  doubleensuitepcmax70: Int
  doubleensuitepcmax80: Int
  doubleensuitepcmax90: Int
  doubleensuitepcmax100: Int
  doubleensuitepcmin70: Int
  doubleensuitepcmin80: Int
  doubleensuitepcmin90: Int
  doubleensuitepcmin100: Int
  doublesharedbathaverage: Int
  doublesharedbathpcmax70: Int
  doublesharedbathpcmax80: Int
  doublesharedbathpcmax90: Int
  doublesharedbathpcmax100: Int
  doublesharedbathpcmin70: Int
  doublesharedbathpcmin80: Int
  doublesharedbathpcmin90: Int
  doublesharedbathpcmin100: Int
  singleensuiteaverage: Int
  singleensuitepcmax70: Int
  singleensuitepcmax80: Int
  singleensuitepcmax90: Int
  singleensuitepcmax100: Int
  singleensuitepcmin70: Int
  singleensuitepcmin80: Int
  singleensuitepcmin90: Int
  singleensuitepcmin100: Int
  singlesharedbathaverage: Int
  singlesharedbathpcmax70: Int
  singlesharedbathpcmax80: Int
  singlesharedbathpcmax90: Int
  singlesharedbathpcmax100: Int
  singlesharedbathpcmin70: Int
  singlesharedbathpcmin80: Int
  singlesharedbathpcmin90: Int
  singlesharedbathpcmin100: Int
}

"""
update columns of table "uk_data.hmo_stats"
"""
enum uk_data_hmo_stats_update_column {
  """column name"""
  doubleensuiteaverage

  """column name"""
  doubleensuitepcmax70

  """column name"""
  doubleensuitepcmax80

  """column name"""
  doubleensuitepcmax90

  """column name"""
  doubleensuitepcmax100

  """column name"""
  doubleensuitepcmin70

  """column name"""
  doubleensuitepcmin80

  """column name"""
  doubleensuitepcmin90

  """column name"""
  doubleensuitepcmin100

  """column name"""
  doubleensuitepointsanalysed

  """column name"""
  doubleensuiteradius

  """column name"""
  doubleensuiteunit

  """column name"""
  doublesharedbathaverage

  """column name"""
  doublesharedbathpcmax70

  """column name"""
  doublesharedbathpcmax80

  """column name"""
  doublesharedbathpcmax90

  """column name"""
  doublesharedbathpcmax100

  """column name"""
  doublesharedbathpcmin70

  """column name"""
  doublesharedbathpcmin80

  """column name"""
  doublesharedbathpcmin90

  """column name"""
  doublesharedbathpcmin100

  """column name"""
  doublesharedbathpointsanalysed

  """column name"""
  doublesharedbathradius

  """column name"""
  doublesharedbathunit

  """column name"""
  last_update

  """column name"""
  outcode

  """column name"""
  singleensuiteaverage

  """column name"""
  singleensuitepcmax70

  """column name"""
  singleensuitepcmax80

  """column name"""
  singleensuitepcmax90

  """column name"""
  singleensuitepcmax100

  """column name"""
  singleensuitepcmin70

  """column name"""
  singleensuitepcmin80

  """column name"""
  singleensuitepcmin90

  """column name"""
  singleensuitepcmin100

  """column name"""
  singleensuitepointsanalysed

  """column name"""
  singleensuiteradius

  """column name"""
  singleensuiteunit

  """column name"""
  singlesharedbathaverage

  """column name"""
  singlesharedbathpcmax70

  """column name"""
  singlesharedbathpcmax80

  """column name"""
  singlesharedbathpcmax90

  """column name"""
  singlesharedbathpcmax100

  """column name"""
  singlesharedbathpcmin70

  """column name"""
  singlesharedbathpcmin80

  """column name"""
  singlesharedbathpcmin90

  """column name"""
  singlesharedbathpcmin100

  """column name"""
  singlesharedbathpointsanalysed

  """column name"""
  singlesharedbathradius

  """column name"""
  singlesharedbathunit
}

input uk_data_hmo_stats_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_hmo_stats_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_hmo_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_hmo_stats_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_hmo_stats_var_pop_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""aggregate var_samp on columns"""
type uk_data_hmo_stats_var_samp_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""aggregate variance on columns"""
type uk_data_hmo_stats_variance_fields {
  doubleensuiteaverage: Float
  doubleensuitepcmax70: Float
  doubleensuitepcmax80: Float
  doubleensuitepcmax90: Float
  doubleensuitepcmax100: Float
  doubleensuitepcmin70: Float
  doubleensuitepcmin80: Float
  doubleensuitepcmin90: Float
  doubleensuitepcmin100: Float
  doublesharedbathaverage: Float
  doublesharedbathpcmax70: Float
  doublesharedbathpcmax80: Float
  doublesharedbathpcmax90: Float
  doublesharedbathpcmax100: Float
  doublesharedbathpcmin70: Float
  doublesharedbathpcmin80: Float
  doublesharedbathpcmin90: Float
  doublesharedbathpcmin100: Float
  singleensuiteaverage: Float
  singleensuitepcmax70: Float
  singleensuitepcmax80: Float
  singleensuitepcmax90: Float
  singleensuitepcmax100: Float
  singleensuitepcmin70: Float
  singleensuitepcmin80: Float
  singleensuitepcmin90: Float
  singleensuitepcmin100: Float
  singlesharedbathaverage: Float
  singlesharedbathpcmax70: Float
  singlesharedbathpcmax80: Float
  singlesharedbathpcmax90: Float
  singlesharedbathpcmax100: Float
  singlesharedbathpcmin70: Float
  singlesharedbathpcmin80: Float
  singlesharedbathpcmin90: Float
  singlesharedbathpcmin100: Float
}

"""
columns and relationships of "uk_data.house_price_index"
"""
type uk_data_house_price_index {
  areacode: String!
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String!
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String!
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""
aggregated selection of "uk_data.house_price_index"
"""
type uk_data_house_price_index_aggregate {
  aggregate: uk_data_house_price_index_aggregate_fields
  nodes: [uk_data_house_price_index!]!
}

"""
aggregate fields of "uk_data.house_price_index"
"""
type uk_data_house_price_index_aggregate_fields {
  avg: uk_data_house_price_index_avg_fields
  count(columns: [uk_data_house_price_index_select_column!], distinct: Boolean): Int!
  max: uk_data_house_price_index_max_fields
  min: uk_data_house_price_index_min_fields
  stddev: uk_data_house_price_index_stddev_fields
  stddev_pop: uk_data_house_price_index_stddev_pop_fields
  stddev_samp: uk_data_house_price_index_stddev_samp_fields
  sum: uk_data_house_price_index_sum_fields
  var_pop: uk_data_house_price_index_var_pop_fields
  var_samp: uk_data_house_price_index_var_samp_fields
  variance: uk_data_house_price_index_variance_fields
}

"""aggregate avg on columns"""
type uk_data_house_price_index_avg_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""
Boolean expression to filter rows from the table "uk_data.house_price_index". All fields are combined with a logical 'AND'.
"""
input uk_data_house_price_index_bool_exp {
  _and: [uk_data_house_price_index_bool_exp!]
  _not: uk_data_house_price_index_bool_exp
  _or: [uk_data_house_price_index_bool_exp!]
  areacode: String_comparison_exp
  averageprice: numeric_comparison_exp
  averagepricesa: numeric_comparison_exp
  cashindex: numeric_comparison_exp
  cashonemonthpercentchange: numeric_comparison_exp
  cashprice: numeric_comparison_exp
  cashsalesvolume: numeric_comparison_exp
  cashtwelvemonthpercentchange: numeric_comparison_exp
  date: String_comparison_exp
  detachedindex: numeric_comparison_exp
  detachedonemonthpercentchange: numeric_comparison_exp
  detachedprice: numeric_comparison_exp
  detachedtwelvemonthpercentchange: numeric_comparison_exp
  flatindex: numeric_comparison_exp
  flatonemonthpercentchange: numeric_comparison_exp
  flatprice: numeric_comparison_exp
  flattwelvemonthpercentchange: numeric_comparison_exp
  fooindex: numeric_comparison_exp
  fooonemonthpercentchange: numeric_comparison_exp
  fooprice: numeric_comparison_exp
  footwelvemonthpercentchange: numeric_comparison_exp
  ftbindex: numeric_comparison_exp
  ftbonemonthpercentchange: numeric_comparison_exp
  ftbprice: numeric_comparison_exp
  ftbtwelvemonthpercentchange: numeric_comparison_exp
  index: numeric_comparison_exp
  indexsa: numeric_comparison_exp
  last_update: timestamp_comparison_exp
  mortgageindex: numeric_comparison_exp
  mortgageonemonthpercentchange: numeric_comparison_exp
  mortgageprice: numeric_comparison_exp
  mortgagesalesvolume: numeric_comparison_exp
  mortgagetwelvemonthpercentchange: numeric_comparison_exp
  newindex: numeric_comparison_exp
  newonemonthpercentchange: numeric_comparison_exp
  newprice: numeric_comparison_exp
  newsalesvolume: numeric_comparison_exp
  newtwelvemonthpercentchange: numeric_comparison_exp
  oldindex: numeric_comparison_exp
  oldonemonthpercentchange: numeric_comparison_exp
  oldprice: numeric_comparison_exp
  oldsalesvolume: numeric_comparison_exp
  oldtwelvemonthpercentchange: numeric_comparison_exp
  onemonthpercentchange: numeric_comparison_exp
  regionname: String_comparison_exp
  salesvolume: numeric_comparison_exp
  semidetachedindex: numeric_comparison_exp
  semidetachedonemonthpercentchange: numeric_comparison_exp
  semidetachedprice: numeric_comparison_exp
  semidetachedtwelvemonthpercentchange: numeric_comparison_exp
  terracedindex: numeric_comparison_exp
  terracedonemonthpercentchange: numeric_comparison_exp
  terracedprice: numeric_comparison_exp
  terracedtwelvemonthpercentchange: numeric_comparison_exp
  twelvemonthpercentchange: numeric_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.house_price_index"
"""
enum uk_data_house_price_index_constraint {
  """
  unique or primary key constraint on columns "regionname", "date", "areacode"
  """
  house_price_index_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.house_price_index"
"""
input uk_data_house_price_index_inc_input {
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""
input type for inserting data into table "uk_data.house_price_index"
"""
input uk_data_house_price_index_insert_input {
  areacode: String
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""aggregate max on columns"""
type uk_data_house_price_index_max_fields {
  areacode: String
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""aggregate min on columns"""
type uk_data_house_price_index_min_fields {
  areacode: String
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""
response of any mutation on the table "uk_data.house_price_index"
"""
type uk_data_house_price_index_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_house_price_index!]!
}

"""
on_conflict condition type for table "uk_data.house_price_index"
"""
input uk_data_house_price_index_on_conflict {
  constraint: uk_data_house_price_index_constraint!
  update_columns: [uk_data_house_price_index_update_column!]! = []
  where: uk_data_house_price_index_bool_exp
}

"""Ordering options when selecting data from "uk_data.house_price_index"."""
input uk_data_house_price_index_order_by {
  areacode: order_by
  averageprice: order_by
  averagepricesa: order_by
  cashindex: order_by
  cashonemonthpercentchange: order_by
  cashprice: order_by
  cashsalesvolume: order_by
  cashtwelvemonthpercentchange: order_by
  date: order_by
  detachedindex: order_by
  detachedonemonthpercentchange: order_by
  detachedprice: order_by
  detachedtwelvemonthpercentchange: order_by
  flatindex: order_by
  flatonemonthpercentchange: order_by
  flatprice: order_by
  flattwelvemonthpercentchange: order_by
  fooindex: order_by
  fooonemonthpercentchange: order_by
  fooprice: order_by
  footwelvemonthpercentchange: order_by
  ftbindex: order_by
  ftbonemonthpercentchange: order_by
  ftbprice: order_by
  ftbtwelvemonthpercentchange: order_by
  index: order_by
  indexsa: order_by
  last_update: order_by
  mortgageindex: order_by
  mortgageonemonthpercentchange: order_by
  mortgageprice: order_by
  mortgagesalesvolume: order_by
  mortgagetwelvemonthpercentchange: order_by
  newindex: order_by
  newonemonthpercentchange: order_by
  newprice: order_by
  newsalesvolume: order_by
  newtwelvemonthpercentchange: order_by
  oldindex: order_by
  oldonemonthpercentchange: order_by
  oldprice: order_by
  oldsalesvolume: order_by
  oldtwelvemonthpercentchange: order_by
  onemonthpercentchange: order_by
  regionname: order_by
  salesvolume: order_by
  semidetachedindex: order_by
  semidetachedonemonthpercentchange: order_by
  semidetachedprice: order_by
  semidetachedtwelvemonthpercentchange: order_by
  terracedindex: order_by
  terracedonemonthpercentchange: order_by
  terracedprice: order_by
  terracedtwelvemonthpercentchange: order_by
  twelvemonthpercentchange: order_by
}

"""primary key columns input for table: uk_data.house_price_index"""
input uk_data_house_price_index_pk_columns_input {
  areacode: String!
  date: String!
  regionname: String!
}

"""
select columns of table "uk_data.house_price_index"
"""
enum uk_data_house_price_index_select_column {
  """column name"""
  areacode

  """column name"""
  averageprice

  """column name"""
  averagepricesa

  """column name"""
  cashindex

  """column name"""
  cashonemonthpercentchange

  """column name"""
  cashprice

  """column name"""
  cashsalesvolume

  """column name"""
  cashtwelvemonthpercentchange

  """column name"""
  date

  """column name"""
  detachedindex

  """column name"""
  detachedonemonthpercentchange

  """column name"""
  detachedprice

  """column name"""
  detachedtwelvemonthpercentchange

  """column name"""
  flatindex

  """column name"""
  flatonemonthpercentchange

  """column name"""
  flatprice

  """column name"""
  flattwelvemonthpercentchange

  """column name"""
  fooindex

  """column name"""
  fooonemonthpercentchange

  """column name"""
  fooprice

  """column name"""
  footwelvemonthpercentchange

  """column name"""
  ftbindex

  """column name"""
  ftbonemonthpercentchange

  """column name"""
  ftbprice

  """column name"""
  ftbtwelvemonthpercentchange

  """column name"""
  index

  """column name"""
  indexsa

  """column name"""
  last_update

  """column name"""
  mortgageindex

  """column name"""
  mortgageonemonthpercentchange

  """column name"""
  mortgageprice

  """column name"""
  mortgagesalesvolume

  """column name"""
  mortgagetwelvemonthpercentchange

  """column name"""
  newindex

  """column name"""
  newonemonthpercentchange

  """column name"""
  newprice

  """column name"""
  newsalesvolume

  """column name"""
  newtwelvemonthpercentchange

  """column name"""
  oldindex

  """column name"""
  oldonemonthpercentchange

  """column name"""
  oldprice

  """column name"""
  oldsalesvolume

  """column name"""
  oldtwelvemonthpercentchange

  """column name"""
  onemonthpercentchange

  """column name"""
  regionname

  """column name"""
  salesvolume

  """column name"""
  semidetachedindex

  """column name"""
  semidetachedonemonthpercentchange

  """column name"""
  semidetachedprice

  """column name"""
  semidetachedtwelvemonthpercentchange

  """column name"""
  terracedindex

  """column name"""
  terracedonemonthpercentchange

  """column name"""
  terracedprice

  """column name"""
  terracedtwelvemonthpercentchange

  """column name"""
  twelvemonthpercentchange
}

"""
input type for updating data in table "uk_data.house_price_index"
"""
input uk_data_house_price_index_set_input {
  areacode: String
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""aggregate stddev on columns"""
type uk_data_house_price_index_stddev_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_house_price_index_stddev_pop_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_house_price_index_stddev_samp_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""
Streaming cursor of the table "uk_data_house_price_index"
"""
input uk_data_house_price_index_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_house_price_index_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_house_price_index_stream_cursor_value_input {
  areacode: String
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  date: String
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  last_update: timestamp
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  regionname: String
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""aggregate sum on columns"""
type uk_data_house_price_index_sum_fields {
  averageprice: numeric
  averagepricesa: numeric
  cashindex: numeric
  cashonemonthpercentchange: numeric
  cashprice: numeric
  cashsalesvolume: numeric
  cashtwelvemonthpercentchange: numeric
  detachedindex: numeric
  detachedonemonthpercentchange: numeric
  detachedprice: numeric
  detachedtwelvemonthpercentchange: numeric
  flatindex: numeric
  flatonemonthpercentchange: numeric
  flatprice: numeric
  flattwelvemonthpercentchange: numeric
  fooindex: numeric
  fooonemonthpercentchange: numeric
  fooprice: numeric
  footwelvemonthpercentchange: numeric
  ftbindex: numeric
  ftbonemonthpercentchange: numeric
  ftbprice: numeric
  ftbtwelvemonthpercentchange: numeric
  index: numeric
  indexsa: numeric
  mortgageindex: numeric
  mortgageonemonthpercentchange: numeric
  mortgageprice: numeric
  mortgagesalesvolume: numeric
  mortgagetwelvemonthpercentchange: numeric
  newindex: numeric
  newonemonthpercentchange: numeric
  newprice: numeric
  newsalesvolume: numeric
  newtwelvemonthpercentchange: numeric
  oldindex: numeric
  oldonemonthpercentchange: numeric
  oldprice: numeric
  oldsalesvolume: numeric
  oldtwelvemonthpercentchange: numeric
  onemonthpercentchange: numeric
  salesvolume: numeric
  semidetachedindex: numeric
  semidetachedonemonthpercentchange: numeric
  semidetachedprice: numeric
  semidetachedtwelvemonthpercentchange: numeric
  terracedindex: numeric
  terracedonemonthpercentchange: numeric
  terracedprice: numeric
  terracedtwelvemonthpercentchange: numeric
  twelvemonthpercentchange: numeric
}

"""
update columns of table "uk_data.house_price_index"
"""
enum uk_data_house_price_index_update_column {
  """column name"""
  areacode

  """column name"""
  averageprice

  """column name"""
  averagepricesa

  """column name"""
  cashindex

  """column name"""
  cashonemonthpercentchange

  """column name"""
  cashprice

  """column name"""
  cashsalesvolume

  """column name"""
  cashtwelvemonthpercentchange

  """column name"""
  date

  """column name"""
  detachedindex

  """column name"""
  detachedonemonthpercentchange

  """column name"""
  detachedprice

  """column name"""
  detachedtwelvemonthpercentchange

  """column name"""
  flatindex

  """column name"""
  flatonemonthpercentchange

  """column name"""
  flatprice

  """column name"""
  flattwelvemonthpercentchange

  """column name"""
  fooindex

  """column name"""
  fooonemonthpercentchange

  """column name"""
  fooprice

  """column name"""
  footwelvemonthpercentchange

  """column name"""
  ftbindex

  """column name"""
  ftbonemonthpercentchange

  """column name"""
  ftbprice

  """column name"""
  ftbtwelvemonthpercentchange

  """column name"""
  index

  """column name"""
  indexsa

  """column name"""
  last_update

  """column name"""
  mortgageindex

  """column name"""
  mortgageonemonthpercentchange

  """column name"""
  mortgageprice

  """column name"""
  mortgagesalesvolume

  """column name"""
  mortgagetwelvemonthpercentchange

  """column name"""
  newindex

  """column name"""
  newonemonthpercentchange

  """column name"""
  newprice

  """column name"""
  newsalesvolume

  """column name"""
  newtwelvemonthpercentchange

  """column name"""
  oldindex

  """column name"""
  oldonemonthpercentchange

  """column name"""
  oldprice

  """column name"""
  oldsalesvolume

  """column name"""
  oldtwelvemonthpercentchange

  """column name"""
  onemonthpercentchange

  """column name"""
  regionname

  """column name"""
  salesvolume

  """column name"""
  semidetachedindex

  """column name"""
  semidetachedonemonthpercentchange

  """column name"""
  semidetachedprice

  """column name"""
  semidetachedtwelvemonthpercentchange

  """column name"""
  terracedindex

  """column name"""
  terracedonemonthpercentchange

  """column name"""
  terracedprice

  """column name"""
  terracedtwelvemonthpercentchange

  """column name"""
  twelvemonthpercentchange
}

input uk_data_house_price_index_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_house_price_index_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_house_price_index_set_input

  """filter the rows which have to be updated"""
  where: uk_data_house_price_index_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_house_price_index_var_pop_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""aggregate var_samp on columns"""
type uk_data_house_price_index_var_samp_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""aggregate variance on columns"""
type uk_data_house_price_index_variance_fields {
  averageprice: Float
  averagepricesa: Float
  cashindex: Float
  cashonemonthpercentchange: Float
  cashprice: Float
  cashsalesvolume: Float
  cashtwelvemonthpercentchange: Float
  detachedindex: Float
  detachedonemonthpercentchange: Float
  detachedprice: Float
  detachedtwelvemonthpercentchange: Float
  flatindex: Float
  flatonemonthpercentchange: Float
  flatprice: Float
  flattwelvemonthpercentchange: Float
  fooindex: Float
  fooonemonthpercentchange: Float
  fooprice: Float
  footwelvemonthpercentchange: Float
  ftbindex: Float
  ftbonemonthpercentchange: Float
  ftbprice: Float
  ftbtwelvemonthpercentchange: Float
  index: Float
  indexsa: Float
  mortgageindex: Float
  mortgageonemonthpercentchange: Float
  mortgageprice: Float
  mortgagesalesvolume: Float
  mortgagetwelvemonthpercentchange: Float
  newindex: Float
  newonemonthpercentchange: Float
  newprice: Float
  newsalesvolume: Float
  newtwelvemonthpercentchange: Float
  oldindex: Float
  oldonemonthpercentchange: Float
  oldprice: Float
  oldsalesvolume: Float
  oldtwelvemonthpercentchange: Float
  onemonthpercentchange: Float
  salesvolume: Float
  semidetachedindex: Float
  semidetachedonemonthpercentchange: Float
  semidetachedprice: Float
  semidetachedtwelvemonthpercentchange: Float
  terracedindex: Float
  terracedonemonthpercentchange: Float
  terracedprice: Float
  terracedtwelvemonthpercentchange: Float
  twelvemonthpercentchange: Float
}

"""
columns and relationships of "uk_data.important_building"
"""
type uk_data_important_building {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building"
"""
type uk_data_important_building_aggregate {
  aggregate: uk_data_important_building_aggregate_fields
  nodes: [uk_data_important_building!]!
}

"""
aggregate fields of "uk_data.important_building"
"""
type uk_data_important_building_aggregate_fields {
  avg: uk_data_important_building_avg_fields
  count(columns: [uk_data_important_building_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_max_fields
  min: uk_data_important_building_min_fields
  stddev: uk_data_important_building_stddev_fields
  stddev_pop: uk_data_important_building_stddev_pop_fields
  stddev_samp: uk_data_important_building_stddev_samp_fields
  sum: uk_data_important_building_sum_fields
  var_pop: uk_data_important_building_var_pop_fields
  var_samp: uk_data_important_building_var_samp_fields
  variance: uk_data_important_building_variance_fields
}

"""
columns and relationships of "uk_data.important_building_air_transport"
"""
type uk_data_important_building_air_transport {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_air_transport"
"""
type uk_data_important_building_air_transport_aggregate {
  aggregate: uk_data_important_building_air_transport_aggregate_fields
  nodes: [uk_data_important_building_air_transport!]!
}

"""
aggregate fields of "uk_data.important_building_air_transport"
"""
type uk_data_important_building_air_transport_aggregate_fields {
  avg: uk_data_important_building_air_transport_avg_fields
  count(columns: [uk_data_important_building_air_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_air_transport_max_fields
  min: uk_data_important_building_air_transport_min_fields
  stddev: uk_data_important_building_air_transport_stddev_fields
  stddev_pop: uk_data_important_building_air_transport_stddev_pop_fields
  stddev_samp: uk_data_important_building_air_transport_stddev_samp_fields
  sum: uk_data_important_building_air_transport_sum_fields
  var_pop: uk_data_important_building_air_transport_var_pop_fields
  var_samp: uk_data_important_building_air_transport_var_samp_fields
  variance: uk_data_important_building_air_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_air_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_air_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_air_transport_bool_exp {
  _and: [uk_data_important_building_air_transport_bool_exp!]
  _not: uk_data_important_building_air_transport_bool_exp
  _or: [uk_data_important_building_air_transport_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_air_transport_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_air_transport_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_air_transport".
"""
input uk_data_important_building_air_transport_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_air_transport"
"""
enum uk_data_important_building_air_transport_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_air_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_air_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_air_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_air_transport"
"""
input uk_data_important_building_air_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_air_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_air_transport_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_air_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_air_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_air_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_air_transport_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_attraction_and_leisure"
"""
type uk_data_important_building_attraction_and_leisure {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_attraction_and_leisure"
"""
type uk_data_important_building_attraction_and_leisure_aggregate {
  aggregate: uk_data_important_building_attraction_and_leisure_aggregate_fields
  nodes: [uk_data_important_building_attraction_and_leisure!]!
}

"""
aggregate fields of "uk_data.important_building_attraction_and_leisure"
"""
type uk_data_important_building_attraction_and_leisure_aggregate_fields {
  avg: uk_data_important_building_attraction_and_leisure_avg_fields
  count(columns: [uk_data_important_building_attraction_and_leisure_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_attraction_and_leisure_max_fields
  min: uk_data_important_building_attraction_and_leisure_min_fields
  stddev: uk_data_important_building_attraction_and_leisure_stddev_fields
  stddev_pop: uk_data_important_building_attraction_and_leisure_stddev_pop_fields
  stddev_samp: uk_data_important_building_attraction_and_leisure_stddev_samp_fields
  sum: uk_data_important_building_attraction_and_leisure_sum_fields
  var_pop: uk_data_important_building_attraction_and_leisure_var_pop_fields
  var_samp: uk_data_important_building_attraction_and_leisure_var_samp_fields
  variance: uk_data_important_building_attraction_and_leisure_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_attraction_and_leisure_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_attraction_and_leisure". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_attraction_and_leisure_bool_exp {
  _and: [uk_data_important_building_attraction_and_leisure_bool_exp!]
  _not: uk_data_important_building_attraction_and_leisure_bool_exp
  _or: [uk_data_important_building_attraction_and_leisure_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_attraction_and_leisure_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_attraction_and_leisure_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_attraction_and_leisure".
"""
input uk_data_important_building_attraction_and_leisure_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_attraction_and_leisure"
"""
enum uk_data_important_building_attraction_and_leisure_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_attraction_and_leisure_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_attraction_and_leisure_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_attraction_and_leisure_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_attraction_and_leisure"
"""
input uk_data_important_building_attraction_and_leisure_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_attraction_and_leisure_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_attraction_and_leisure_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_attraction_and_leisure_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_attraction_and_leisure_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_attraction_and_leisure_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_attraction_and_leisure_variance_fields {
  feature_code: Float
  fid: Float
}

"""aggregate avg on columns"""
type uk_data_important_building_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_bool_exp {
  _and: [uk_data_important_building_bool_exp!]
  _not: uk_data_important_building_bool_exp
  _or: [uk_data_important_building_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.important_building"
"""
enum uk_data_important_building_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  important_building_pkey
}

"""
columns and relationships of "uk_data.important_building_cultural_facility"
"""
type uk_data_important_building_cultural_facility {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_cultural_facility"
"""
type uk_data_important_building_cultural_facility_aggregate {
  aggregate: uk_data_important_building_cultural_facility_aggregate_fields
  nodes: [uk_data_important_building_cultural_facility!]!
}

"""
aggregate fields of "uk_data.important_building_cultural_facility"
"""
type uk_data_important_building_cultural_facility_aggregate_fields {
  avg: uk_data_important_building_cultural_facility_avg_fields
  count(columns: [uk_data_important_building_cultural_facility_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_cultural_facility_max_fields
  min: uk_data_important_building_cultural_facility_min_fields
  stddev: uk_data_important_building_cultural_facility_stddev_fields
  stddev_pop: uk_data_important_building_cultural_facility_stddev_pop_fields
  stddev_samp: uk_data_important_building_cultural_facility_stddev_samp_fields
  sum: uk_data_important_building_cultural_facility_sum_fields
  var_pop: uk_data_important_building_cultural_facility_var_pop_fields
  var_samp: uk_data_important_building_cultural_facility_var_samp_fields
  variance: uk_data_important_building_cultural_facility_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_cultural_facility_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_cultural_facility". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_cultural_facility_bool_exp {
  _and: [uk_data_important_building_cultural_facility_bool_exp!]
  _not: uk_data_important_building_cultural_facility_bool_exp
  _or: [uk_data_important_building_cultural_facility_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_cultural_facility_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_cultural_facility_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_cultural_facility".
"""
input uk_data_important_building_cultural_facility_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_cultural_facility"
"""
enum uk_data_important_building_cultural_facility_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_cultural_facility_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_cultural_facility_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_cultural_facility_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_cultural_facility"
"""
input uk_data_important_building_cultural_facility_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_cultural_facility_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_cultural_facility_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_cultural_facility_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_cultural_facility_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_cultural_facility_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_cultural_facility_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_education"
"""
type uk_data_important_building_education {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_education"
"""
type uk_data_important_building_education_aggregate {
  aggregate: uk_data_important_building_education_aggregate_fields
  nodes: [uk_data_important_building_education!]!
}

"""
aggregate fields of "uk_data.important_building_education"
"""
type uk_data_important_building_education_aggregate_fields {
  avg: uk_data_important_building_education_avg_fields
  count(columns: [uk_data_important_building_education_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_education_max_fields
  min: uk_data_important_building_education_min_fields
  stddev: uk_data_important_building_education_stddev_fields
  stddev_pop: uk_data_important_building_education_stddev_pop_fields
  stddev_samp: uk_data_important_building_education_stddev_samp_fields
  sum: uk_data_important_building_education_sum_fields
  var_pop: uk_data_important_building_education_var_pop_fields
  var_samp: uk_data_important_building_education_var_samp_fields
  variance: uk_data_important_building_education_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_education_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_education". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_education_bool_exp {
  _and: [uk_data_important_building_education_bool_exp!]
  _not: uk_data_important_building_education_bool_exp
  _or: [uk_data_important_building_education_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_education_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_education_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_education".
"""
input uk_data_important_building_education_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_education"
"""
enum uk_data_important_building_education_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_education_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_education_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_education_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_education"
"""
input uk_data_important_building_education_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_education_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_education_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_education_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_education_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_education_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_education_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_emergency_service"
"""
type uk_data_important_building_emergency_service {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_emergency_service"
"""
type uk_data_important_building_emergency_service_aggregate {
  aggregate: uk_data_important_building_emergency_service_aggregate_fields
  nodes: [uk_data_important_building_emergency_service!]!
}

"""
aggregate fields of "uk_data.important_building_emergency_service"
"""
type uk_data_important_building_emergency_service_aggregate_fields {
  avg: uk_data_important_building_emergency_service_avg_fields
  count(columns: [uk_data_important_building_emergency_service_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_emergency_service_max_fields
  min: uk_data_important_building_emergency_service_min_fields
  stddev: uk_data_important_building_emergency_service_stddev_fields
  stddev_pop: uk_data_important_building_emergency_service_stddev_pop_fields
  stddev_samp: uk_data_important_building_emergency_service_stddev_samp_fields
  sum: uk_data_important_building_emergency_service_sum_fields
  var_pop: uk_data_important_building_emergency_service_var_pop_fields
  var_samp: uk_data_important_building_emergency_service_var_samp_fields
  variance: uk_data_important_building_emergency_service_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_emergency_service_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_emergency_service". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_emergency_service_bool_exp {
  _and: [uk_data_important_building_emergency_service_bool_exp!]
  _not: uk_data_important_building_emergency_service_bool_exp
  _or: [uk_data_important_building_emergency_service_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_emergency_service_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_emergency_service_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_emergency_service".
"""
input uk_data_important_building_emergency_service_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_emergency_service"
"""
enum uk_data_important_building_emergency_service_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_emergency_service_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_emergency_service_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_emergency_service_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_emergency_service"
"""
input uk_data_important_building_emergency_service_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_emergency_service_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_emergency_service_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_emergency_service_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_emergency_service_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_emergency_service_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_emergency_service_variance_fields {
  feature_code: Float
  fid: Float
}

"""
input type for incrementing numeric columns in table "uk_data.important_building"
"""
input uk_data_important_building_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.important_building"
"""
input uk_data_important_building_insert_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_important_building_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
columns and relationships of "uk_data.important_building_medical_care"
"""
type uk_data_important_building_medical_care {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_medical_care"
"""
type uk_data_important_building_medical_care_aggregate {
  aggregate: uk_data_important_building_medical_care_aggregate_fields
  nodes: [uk_data_important_building_medical_care!]!
}

"""
aggregate fields of "uk_data.important_building_medical_care"
"""
type uk_data_important_building_medical_care_aggregate_fields {
  avg: uk_data_important_building_medical_care_avg_fields
  count(columns: [uk_data_important_building_medical_care_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_medical_care_max_fields
  min: uk_data_important_building_medical_care_min_fields
  stddev: uk_data_important_building_medical_care_stddev_fields
  stddev_pop: uk_data_important_building_medical_care_stddev_pop_fields
  stddev_samp: uk_data_important_building_medical_care_stddev_samp_fields
  sum: uk_data_important_building_medical_care_sum_fields
  var_pop: uk_data_important_building_medical_care_var_pop_fields
  var_samp: uk_data_important_building_medical_care_var_samp_fields
  variance: uk_data_important_building_medical_care_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_medical_care_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_medical_care". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_medical_care_bool_exp {
  _and: [uk_data_important_building_medical_care_bool_exp!]
  _not: uk_data_important_building_medical_care_bool_exp
  _or: [uk_data_important_building_medical_care_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_medical_care_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_medical_care_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_medical_care".
"""
input uk_data_important_building_medical_care_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_medical_care"
"""
enum uk_data_important_building_medical_care_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_medical_care_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_medical_care_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_medical_care_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_medical_care"
"""
input uk_data_important_building_medical_care_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_medical_care_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_medical_care_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_medical_care_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_medical_care_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_medical_care_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_medical_care_variance_fields {
  feature_code: Float
  fid: Float
}

"""aggregate min on columns"""
type uk_data_important_building_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.important_building"
"""
type uk_data_important_building_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_important_building!]!
}

"""
on_conflict condition type for table "uk_data.important_building"
"""
input uk_data_important_building_on_conflict {
  constraint: uk_data_important_building_constraint!
  update_columns: [uk_data_important_building_update_column!]! = []
  where: uk_data_important_building_bool_exp
}

"""
Ordering options when selecting data from "uk_data.important_building".
"""
input uk_data_important_building_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.important_building"""
input uk_data_important_building_pk_columns_input {
  fid: Int!
}

"""
columns and relationships of "uk_data.important_building_religious_buildings"
"""
type uk_data_important_building_religious_buildings {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_religious_buildings"
"""
type uk_data_important_building_religious_buildings_aggregate {
  aggregate: uk_data_important_building_religious_buildings_aggregate_fields
  nodes: [uk_data_important_building_religious_buildings!]!
}

"""
aggregate fields of "uk_data.important_building_religious_buildings"
"""
type uk_data_important_building_religious_buildings_aggregate_fields {
  avg: uk_data_important_building_religious_buildings_avg_fields
  count(columns: [uk_data_important_building_religious_buildings_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_religious_buildings_max_fields
  min: uk_data_important_building_religious_buildings_min_fields
  stddev: uk_data_important_building_religious_buildings_stddev_fields
  stddev_pop: uk_data_important_building_religious_buildings_stddev_pop_fields
  stddev_samp: uk_data_important_building_religious_buildings_stddev_samp_fields
  sum: uk_data_important_building_religious_buildings_sum_fields
  var_pop: uk_data_important_building_religious_buildings_var_pop_fields
  var_samp: uk_data_important_building_religious_buildings_var_samp_fields
  variance: uk_data_important_building_religious_buildings_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_religious_buildings_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_religious_buildings". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_religious_buildings_bool_exp {
  _and: [uk_data_important_building_religious_buildings_bool_exp!]
  _not: uk_data_important_building_religious_buildings_bool_exp
  _or: [uk_data_important_building_religious_buildings_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_religious_buildings_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_religious_buildings_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_religious_buildings".
"""
input uk_data_important_building_religious_buildings_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_religious_buildings"
"""
enum uk_data_important_building_religious_buildings_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_religious_buildings_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_religious_buildings_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_religious_buildings_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_religious_buildings"
"""
input uk_data_important_building_religious_buildings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_religious_buildings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_religious_buildings_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_religious_buildings_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_religious_buildings_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_religious_buildings_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_religious_buildings_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_retail"
"""
type uk_data_important_building_retail {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_retail"
"""
type uk_data_important_building_retail_aggregate {
  aggregate: uk_data_important_building_retail_aggregate_fields
  nodes: [uk_data_important_building_retail!]!
}

"""
aggregate fields of "uk_data.important_building_retail"
"""
type uk_data_important_building_retail_aggregate_fields {
  avg: uk_data_important_building_retail_avg_fields
  count(columns: [uk_data_important_building_retail_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_retail_max_fields
  min: uk_data_important_building_retail_min_fields
  stddev: uk_data_important_building_retail_stddev_fields
  stddev_pop: uk_data_important_building_retail_stddev_pop_fields
  stddev_samp: uk_data_important_building_retail_stddev_samp_fields
  sum: uk_data_important_building_retail_sum_fields
  var_pop: uk_data_important_building_retail_var_pop_fields
  var_samp: uk_data_important_building_retail_var_samp_fields
  variance: uk_data_important_building_retail_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_retail_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_retail". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_retail_bool_exp {
  _and: [uk_data_important_building_retail_bool_exp!]
  _not: uk_data_important_building_retail_bool_exp
  _or: [uk_data_important_building_retail_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_retail_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_retail_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_retail".
"""
input uk_data_important_building_retail_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_retail"
"""
enum uk_data_important_building_retail_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_retail_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_retail_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_retail_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_retail"
"""
input uk_data_important_building_retail_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_retail_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_retail_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_retail_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_retail_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_retail_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_retail_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_road_transport"
"""
type uk_data_important_building_road_transport {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_road_transport"
"""
type uk_data_important_building_road_transport_aggregate {
  aggregate: uk_data_important_building_road_transport_aggregate_fields
  nodes: [uk_data_important_building_road_transport!]!
}

"""
aggregate fields of "uk_data.important_building_road_transport"
"""
type uk_data_important_building_road_transport_aggregate_fields {
  avg: uk_data_important_building_road_transport_avg_fields
  count(columns: [uk_data_important_building_road_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_road_transport_max_fields
  min: uk_data_important_building_road_transport_min_fields
  stddev: uk_data_important_building_road_transport_stddev_fields
  stddev_pop: uk_data_important_building_road_transport_stddev_pop_fields
  stddev_samp: uk_data_important_building_road_transport_stddev_samp_fields
  sum: uk_data_important_building_road_transport_sum_fields
  var_pop: uk_data_important_building_road_transport_var_pop_fields
  var_samp: uk_data_important_building_road_transport_var_samp_fields
  variance: uk_data_important_building_road_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_road_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_road_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_road_transport_bool_exp {
  _and: [uk_data_important_building_road_transport_bool_exp!]
  _not: uk_data_important_building_road_transport_bool_exp
  _or: [uk_data_important_building_road_transport_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_road_transport_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_road_transport_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_road_transport".
"""
input uk_data_important_building_road_transport_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_road_transport"
"""
enum uk_data_important_building_road_transport_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_road_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_road_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_road_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_road_transport"
"""
input uk_data_important_building_road_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_road_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_road_transport_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_road_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_road_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_road_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_road_transport_variance_fields {
  feature_code: Float
  fid: Float
}

"""
select columns of table "uk_data.important_building"
"""
enum uk_data_important_building_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.important_building"
"""
input uk_data_important_building_set_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
columns and relationships of "uk_data.important_building_sports_or_exercise_facility"
"""
type uk_data_important_building_sports_or_exercise_facility {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_sports_or_exercise_facility"
"""
type uk_data_important_building_sports_or_exercise_facility_aggregate {
  aggregate: uk_data_important_building_sports_or_exercise_facility_aggregate_fields
  nodes: [uk_data_important_building_sports_or_exercise_facility!]!
}

"""
aggregate fields of "uk_data.important_building_sports_or_exercise_facility"
"""
type uk_data_important_building_sports_or_exercise_facility_aggregate_fields {
  avg: uk_data_important_building_sports_or_exercise_facility_avg_fields
  count(columns: [uk_data_important_building_sports_or_exercise_facility_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_sports_or_exercise_facility_max_fields
  min: uk_data_important_building_sports_or_exercise_facility_min_fields
  stddev: uk_data_important_building_sports_or_exercise_facility_stddev_fields
  stddev_pop: uk_data_important_building_sports_or_exercise_facility_stddev_pop_fields
  stddev_samp: uk_data_important_building_sports_or_exercise_facility_stddev_samp_fields
  sum: uk_data_important_building_sports_or_exercise_facility_sum_fields
  var_pop: uk_data_important_building_sports_or_exercise_facility_var_pop_fields
  var_samp: uk_data_important_building_sports_or_exercise_facility_var_samp_fields
  variance: uk_data_important_building_sports_or_exercise_facility_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_sports_or_exercise_facility_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_sports_or_exercise_facility". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_sports_or_exercise_facility_bool_exp {
  _and: [uk_data_important_building_sports_or_exercise_facility_bool_exp!]
  _not: uk_data_important_building_sports_or_exercise_facility_bool_exp
  _or: [uk_data_important_building_sports_or_exercise_facility_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_sports_or_exercise_facility_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_sports_or_exercise_facility_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_sports_or_exercise_facility".
"""
input uk_data_important_building_sports_or_exercise_facility_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_sports_or_exercise_facility"
"""
enum uk_data_important_building_sports_or_exercise_facility_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_sports_or_exercise_facility_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_sports_or_exercise_facility_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_sports_or_exercise_facility_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_sports_or_exercise_facility"
"""
input uk_data_important_building_sports_or_exercise_facility_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_sports_or_exercise_facility_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_sports_or_exercise_facility_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_sports_or_exercise_facility_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_sports_or_exercise_facility_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_sports_or_exercise_facility_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_sports_or_exercise_facility_variance_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev on columns"""
type uk_data_important_building_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building"
"""
input uk_data_important_building_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.important_building"
"""
enum uk_data_important_building_update_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_important_building_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_important_building_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_important_building_set_input

  """filter the rows which have to be updated"""
  where: uk_data_important_building_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_important_building_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.important_building_water_transport"
"""
type uk_data_important_building_water_transport {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.important_building_water_transport"
"""
type uk_data_important_building_water_transport_aggregate {
  aggregate: uk_data_important_building_water_transport_aggregate_fields
  nodes: [uk_data_important_building_water_transport!]!
}

"""
aggregate fields of "uk_data.important_building_water_transport"
"""
type uk_data_important_building_water_transport_aggregate_fields {
  avg: uk_data_important_building_water_transport_avg_fields
  count(columns: [uk_data_important_building_water_transport_select_column!], distinct: Boolean): Int!
  max: uk_data_important_building_water_transport_max_fields
  min: uk_data_important_building_water_transport_min_fields
  stddev: uk_data_important_building_water_transport_stddev_fields
  stddev_pop: uk_data_important_building_water_transport_stddev_pop_fields
  stddev_samp: uk_data_important_building_water_transport_stddev_samp_fields
  sum: uk_data_important_building_water_transport_sum_fields
  var_pop: uk_data_important_building_water_transport_var_pop_fields
  var_samp: uk_data_important_building_water_transport_var_samp_fields
  variance: uk_data_important_building_water_transport_variance_fields
}

"""aggregate avg on columns"""
type uk_data_important_building_water_transport_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.important_building_water_transport". All fields are combined with a logical 'AND'.
"""
input uk_data_important_building_water_transport_bool_exp {
  _and: [uk_data_important_building_water_transport_bool_exp!]
  _not: uk_data_important_building_water_transport_bool_exp
  _or: [uk_data_important_building_water_transport_bool_exp!]
  building_theme: String_comparison_exp
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_important_building_water_transport_max_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_important_building_water_transport_min_fields {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
Ordering options when selecting data from "uk_data.important_building_water_transport".
"""
input uk_data_important_building_water_transport_order_by {
  building_theme: order_by
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""
select columns of table "uk_data.important_building_water_transport"
"""
enum uk_data_important_building_water_transport_select_column {
  """column name"""
  building_theme

  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""aggregate stddev on columns"""
type uk_data_important_building_water_transport_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_important_building_water_transport_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_important_building_water_transport_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_important_building_water_transport"
"""
input uk_data_important_building_water_transport_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_important_building_water_transport_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_important_building_water_transport_stream_cursor_value_input {
  building_theme: String
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_important_building_water_transport_sum_fields {
  feature_code: Int
  fid: Int
}

"""aggregate var_pop on columns"""
type uk_data_important_building_water_transport_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_important_building_water_transport_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_important_building_water_transport_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.motorway_junction"
"""
type uk_data_motorway_junction {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
  junction_number: String
}

"""
aggregated selection of "uk_data.motorway_junction"
"""
type uk_data_motorway_junction_aggregate {
  aggregate: uk_data_motorway_junction_aggregate_fields
  nodes: [uk_data_motorway_junction!]!
}

"""
aggregate fields of "uk_data.motorway_junction"
"""
type uk_data_motorway_junction_aggregate_fields {
  avg: uk_data_motorway_junction_avg_fields
  count(columns: [uk_data_motorway_junction_select_column!], distinct: Boolean): Int!
  max: uk_data_motorway_junction_max_fields
  min: uk_data_motorway_junction_min_fields
  stddev: uk_data_motorway_junction_stddev_fields
  stddev_pop: uk_data_motorway_junction_stddev_pop_fields
  stddev_samp: uk_data_motorway_junction_stddev_samp_fields
  sum: uk_data_motorway_junction_sum_fields
  var_pop: uk_data_motorway_junction_var_pop_fields
  var_samp: uk_data_motorway_junction_var_samp_fields
  variance: uk_data_motorway_junction_variance_fields
}

"""aggregate avg on columns"""
type uk_data_motorway_junction_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.motorway_junction". All fields are combined with a logical 'AND'.
"""
input uk_data_motorway_junction_bool_exp {
  _and: [uk_data_motorway_junction_bool_exp!]
  _not: uk_data_motorway_junction_bool_exp
  _or: [uk_data_motorway_junction_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  junction_number: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.motorway_junction"
"""
enum uk_data_motorway_junction_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  motorway_junction_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.motorway_junction"
"""
input uk_data_motorway_junction_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.motorway_junction"
"""
input uk_data_motorway_junction_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  junction_number: String
}

"""aggregate max on columns"""
type uk_data_motorway_junction_max_fields {
  feature_code: Int
  fid: Int
  id: String
  junction_number: String
}

"""aggregate min on columns"""
type uk_data_motorway_junction_min_fields {
  feature_code: Int
  fid: Int
  id: String
  junction_number: String
}

"""
response of any mutation on the table "uk_data.motorway_junction"
"""
type uk_data_motorway_junction_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_motorway_junction!]!
}

"""
on_conflict condition type for table "uk_data.motorway_junction"
"""
input uk_data_motorway_junction_on_conflict {
  constraint: uk_data_motorway_junction_constraint!
  update_columns: [uk_data_motorway_junction_update_column!]! = []
  where: uk_data_motorway_junction_bool_exp
}

"""Ordering options when selecting data from "uk_data.motorway_junction"."""
input uk_data_motorway_junction_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  junction_number: order_by
}

"""primary key columns input for table: uk_data.motorway_junction"""
input uk_data_motorway_junction_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.motorway_junction"
"""
enum uk_data_motorway_junction_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  junction_number
}

"""
input type for updating data in table "uk_data.motorway_junction"
"""
input uk_data_motorway_junction_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  junction_number: String
}

"""aggregate stddev on columns"""
type uk_data_motorway_junction_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_motorway_junction_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_motorway_junction_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_motorway_junction"
"""
input uk_data_motorway_junction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_motorway_junction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_motorway_junction_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  junction_number: String
}

"""aggregate sum on columns"""
type uk_data_motorway_junction_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.motorway_junction"
"""
enum uk_data_motorway_junction_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  junction_number
}

input uk_data_motorway_junction_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_motorway_junction_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_motorway_junction_set_input

  """filter the rows which have to be updated"""
  where: uk_data_motorway_junction_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_motorway_junction_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_motorway_junction_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_motorway_junction_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.named_place"
"""
type uk_data_named_place {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int!
  font_height: String
  geometry: geometry
  id: String
  text_orientation: Int
}

"""
aggregated selection of "uk_data.named_place"
"""
type uk_data_named_place_aggregate {
  aggregate: uk_data_named_place_aggregate_fields
  nodes: [uk_data_named_place!]!
}

"""
aggregate fields of "uk_data.named_place"
"""
type uk_data_named_place_aggregate_fields {
  avg: uk_data_named_place_avg_fields
  count(columns: [uk_data_named_place_select_column!], distinct: Boolean): Int!
  max: uk_data_named_place_max_fields
  min: uk_data_named_place_min_fields
  stddev: uk_data_named_place_stddev_fields
  stddev_pop: uk_data_named_place_stddev_pop_fields
  stddev_samp: uk_data_named_place_stddev_samp_fields
  sum: uk_data_named_place_sum_fields
  var_pop: uk_data_named_place_var_pop_fields
  var_samp: uk_data_named_place_var_samp_fields
  variance: uk_data_named_place_variance_fields
}

"""aggregate avg on columns"""
type uk_data_named_place_avg_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""
Boolean expression to filter rows from the table "uk_data.named_place". All fields are combined with a logical 'AND'.
"""
input uk_data_named_place_bool_exp {
  _and: [uk_data_named_place_bool_exp!]
  _not: uk_data_named_place_bool_exp
  _or: [uk_data_named_place_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  font_height: String_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  text_orientation: Int_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.named_place"
"""
enum uk_data_named_place_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  named_place_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.named_place"
"""
input uk_data_named_place_inc_input {
  feature_code: Int
  fid: Int
  text_orientation: Int
}

"""
input type for inserting data into table "uk_data.named_place"
"""
input uk_data_named_place_insert_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  font_height: String
  geometry: geometry
  id: String
  text_orientation: Int
}

"""aggregate max on columns"""
type uk_data_named_place_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  font_height: String
  id: String
  text_orientation: Int
}

"""aggregate min on columns"""
type uk_data_named_place_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  font_height: String
  id: String
  text_orientation: Int
}

"""
response of any mutation on the table "uk_data.named_place"
"""
type uk_data_named_place_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_named_place!]!
}

"""
on_conflict condition type for table "uk_data.named_place"
"""
input uk_data_named_place_on_conflict {
  constraint: uk_data_named_place_constraint!
  update_columns: [uk_data_named_place_update_column!]! = []
  where: uk_data_named_place_bool_exp
}

"""Ordering options when selecting data from "uk_data.named_place"."""
input uk_data_named_place_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  font_height: order_by
  geometry: order_by
  id: order_by
  text_orientation: order_by
}

"""primary key columns input for table: uk_data.named_place"""
input uk_data_named_place_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.named_place"
"""
enum uk_data_named_place_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  font_height

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  text_orientation
}

"""
input type for updating data in table "uk_data.named_place"
"""
input uk_data_named_place_set_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  font_height: String
  geometry: geometry
  id: String
  text_orientation: Int
}

"""aggregate stddev on columns"""
type uk_data_named_place_stddev_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_named_place_stddev_pop_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_named_place_stddev_samp_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""
Streaming cursor of the table "uk_data_named_place"
"""
input uk_data_named_place_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_named_place_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_named_place_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  font_height: String
  geometry: geometry
  id: String
  text_orientation: Int
}

"""aggregate sum on columns"""
type uk_data_named_place_sum_fields {
  feature_code: Int
  fid: Int
  text_orientation: Int
}

"""
update columns of table "uk_data.named_place"
"""
enum uk_data_named_place_update_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  font_height

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  text_orientation
}

input uk_data_named_place_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_named_place_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_named_place_set_input

  """filter the rows which have to be updated"""
  where: uk_data_named_place_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_named_place_var_pop_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""aggregate var_samp on columns"""
type uk_data_named_place_var_samp_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""aggregate variance on columns"""
type uk_data_named_place_variance_fields {
  feature_code: Float
  fid: Float
  text_orientation: Float
}

"""
columns and relationships of "uk_data.osmaps_data"
"""
type uk_data_osmaps_data {
  distance: float8
  feature: String
  id: bigint!
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""
aggregated selection of "uk_data.osmaps_data"
"""
type uk_data_osmaps_data_aggregate {
  aggregate: uk_data_osmaps_data_aggregate_fields
  nodes: [uk_data_osmaps_data!]!
}

"""
aggregate fields of "uk_data.osmaps_data"
"""
type uk_data_osmaps_data_aggregate_fields {
  avg: uk_data_osmaps_data_avg_fields
  count(columns: [uk_data_osmaps_data_select_column!], distinct: Boolean): Int!
  max: uk_data_osmaps_data_max_fields
  min: uk_data_osmaps_data_min_fields
  stddev: uk_data_osmaps_data_stddev_fields
  stddev_pop: uk_data_osmaps_data_stddev_pop_fields
  stddev_samp: uk_data_osmaps_data_stddev_samp_fields
  sum: uk_data_osmaps_data_sum_fields
  var_pop: uk_data_osmaps_data_var_pop_fields
  var_samp: uk_data_osmaps_data_var_samp_fields
  variance: uk_data_osmaps_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_osmaps_data_avg_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""
Boolean expression to filter rows from the table "uk_data.osmaps_data". All fields are combined with a logical 'AND'.
"""
input uk_data_osmaps_data_bool_exp {
  _and: [uk_data_osmaps_data_bool_exp!]
  _not: uk_data_osmaps_data_bool_exp
  _or: [uk_data_osmaps_data_bool_exp!]
  distance: float8_comparison_exp
  feature: String_comparison_exp
  id: bigint_comparison_exp
  last_update: timestamp_comparison_exp
  locationname: String_comparison_exp
  uprn: bigint_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.osmaps_data"
"""
enum uk_data_osmaps_data_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  osmaps_data_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.osmaps_data"
"""
input uk_data_osmaps_data_inc_input {
  distance: float8
  id: bigint
  uprn: bigint
}

"""
input type for inserting data into table "uk_data.osmaps_data"
"""
input uk_data_osmaps_data_insert_input {
  distance: float8
  feature: String
  id: bigint
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""aggregate max on columns"""
type uk_data_osmaps_data_max_fields {
  distance: float8
  feature: String
  id: bigint
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""aggregate min on columns"""
type uk_data_osmaps_data_min_fields {
  distance: float8
  feature: String
  id: bigint
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""
response of any mutation on the table "uk_data.osmaps_data"
"""
type uk_data_osmaps_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_osmaps_data!]!
}

"""
on_conflict condition type for table "uk_data.osmaps_data"
"""
input uk_data_osmaps_data_on_conflict {
  constraint: uk_data_osmaps_data_constraint!
  update_columns: [uk_data_osmaps_data_update_column!]! = []
  where: uk_data_osmaps_data_bool_exp
}

"""Ordering options when selecting data from "uk_data.osmaps_data"."""
input uk_data_osmaps_data_order_by {
  distance: order_by
  feature: order_by
  id: order_by
  last_update: order_by
  locationname: order_by
  uprn: order_by
}

"""primary key columns input for table: uk_data.osmaps_data"""
input uk_data_osmaps_data_pk_columns_input {
  id: bigint!
}

"""
select columns of table "uk_data.osmaps_data"
"""
enum uk_data_osmaps_data_select_column {
  """column name"""
  distance

  """column name"""
  feature

  """column name"""
  id

  """column name"""
  last_update

  """column name"""
  locationname

  """column name"""
  uprn
}

"""
input type for updating data in table "uk_data.osmaps_data"
"""
input uk_data_osmaps_data_set_input {
  distance: float8
  feature: String
  id: bigint
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""aggregate stddev on columns"""
type uk_data_osmaps_data_stddev_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_osmaps_data_stddev_pop_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_osmaps_data_stddev_samp_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""
Streaming cursor of the table "uk_data_osmaps_data"
"""
input uk_data_osmaps_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_osmaps_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_osmaps_data_stream_cursor_value_input {
  distance: float8
  feature: String
  id: bigint
  last_update: timestamp
  locationname: String
  uprn: bigint
}

"""aggregate sum on columns"""
type uk_data_osmaps_data_sum_fields {
  distance: float8
  id: bigint
  uprn: bigint
}

"""
update columns of table "uk_data.osmaps_data"
"""
enum uk_data_osmaps_data_update_column {
  """column name"""
  distance

  """column name"""
  feature

  """column name"""
  id

  """column name"""
  last_update

  """column name"""
  locationname

  """column name"""
  uprn
}

input uk_data_osmaps_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_osmaps_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_osmaps_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_osmaps_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_osmaps_data_var_pop_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""aggregate var_samp on columns"""
type uk_data_osmaps_data_var_samp_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""aggregate variance on columns"""
type uk_data_osmaps_data_variance_fields {
  distance: Float
  id: Float
  uprn: Float
}

"""
columns and relationships of "uk_data.outcode_stats"
"""
type uk_data_outcode_stats {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String!
  salespermonth: Int
  turnover: String
}

"""
aggregated selection of "uk_data.outcode_stats"
"""
type uk_data_outcode_stats_aggregate {
  aggregate: uk_data_outcode_stats_aggregate_fields
  nodes: [uk_data_outcode_stats!]!
}

"""
aggregate fields of "uk_data.outcode_stats"
"""
type uk_data_outcode_stats_aggregate_fields {
  avg: uk_data_outcode_stats_avg_fields
  count(columns: [uk_data_outcode_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_outcode_stats_max_fields
  min: uk_data_outcode_stats_min_fields
  stddev: uk_data_outcode_stats_stddev_fields
  stddev_pop: uk_data_outcode_stats_stddev_pop_fields
  stddev_samp: uk_data_outcode_stats_stddev_samp_fields
  sum: uk_data_outcode_stats_sum_fields
  var_pop: uk_data_outcode_stats_var_pop_fields
  var_samp: uk_data_outcode_stats_var_samp_fields
  variance: uk_data_outcode_stats_variance_fields
}

"""aggregate avg on columns"""
type uk_data_outcode_stats_avg_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""
Boolean expression to filter rows from the table "uk_data.outcode_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_outcode_stats_bool_exp {
  _and: [uk_data_outcode_stats_bool_exp!]
  _not: uk_data_outcode_stats_bool_exp
  _or: [uk_data_outcode_stats_bool_exp!]
  avgprice: float8_comparison_exp
  avgpricepsf: float8_comparison_exp
  avgrent: float8_comparison_exp
  avgyield: String_comparison_exp
  growth1y: String_comparison_exp
  growth3y: String_comparison_exp
  growth5y: String_comparison_exp
  last_update: timestamp_comparison_exp
  outcode: String_comparison_exp
  salespermonth: Int_comparison_exp
  turnover: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.outcode_stats"
"""
enum uk_data_outcode_stats_constraint {
  """
  unique or primary key constraint on columns "outcode"
  """
  outcode_stats_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.outcode_stats"
"""
input uk_data_outcode_stats_inc_input {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  salespermonth: Int
}

"""
input type for inserting data into table "uk_data.outcode_stats"
"""
input uk_data_outcode_stats_insert_input {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String
  salespermonth: Int
  turnover: String
}

"""aggregate max on columns"""
type uk_data_outcode_stats_max_fields {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String
  salespermonth: Int
  turnover: String
}

"""aggregate min on columns"""
type uk_data_outcode_stats_min_fields {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String
  salespermonth: Int
  turnover: String
}

"""
response of any mutation on the table "uk_data.outcode_stats"
"""
type uk_data_outcode_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_outcode_stats!]!
}

"""
on_conflict condition type for table "uk_data.outcode_stats"
"""
input uk_data_outcode_stats_on_conflict {
  constraint: uk_data_outcode_stats_constraint!
  update_columns: [uk_data_outcode_stats_update_column!]! = []
  where: uk_data_outcode_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.outcode_stats"."""
input uk_data_outcode_stats_order_by {
  avgprice: order_by
  avgpricepsf: order_by
  avgrent: order_by
  avgyield: order_by
  growth1y: order_by
  growth3y: order_by
  growth5y: order_by
  last_update: order_by
  outcode: order_by
  salespermonth: order_by
  turnover: order_by
}

"""primary key columns input for table: uk_data.outcode_stats"""
input uk_data_outcode_stats_pk_columns_input {
  outcode: String!
}

"""
select columns of table "uk_data.outcode_stats"
"""
enum uk_data_outcode_stats_select_column {
  """column name"""
  avgprice

  """column name"""
  avgpricepsf

  """column name"""
  avgrent

  """column name"""
  avgyield

  """column name"""
  growth1y

  """column name"""
  growth3y

  """column name"""
  growth5y

  """column name"""
  last_update

  """column name"""
  outcode

  """column name"""
  salespermonth

  """column name"""
  turnover
}

"""
input type for updating data in table "uk_data.outcode_stats"
"""
input uk_data_outcode_stats_set_input {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String
  salespermonth: Int
  turnover: String
}

"""aggregate stddev on columns"""
type uk_data_outcode_stats_stddev_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_outcode_stats_stddev_pop_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_outcode_stats_stddev_samp_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""
Streaming cursor of the table "uk_data_outcode_stats"
"""
input uk_data_outcode_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_outcode_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_outcode_stats_stream_cursor_value_input {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  avgyield: String
  growth1y: String
  growth3y: String
  growth5y: String
  last_update: timestamp
  outcode: String
  salespermonth: Int
  turnover: String
}

"""aggregate sum on columns"""
type uk_data_outcode_stats_sum_fields {
  avgprice: float8
  avgpricepsf: float8
  avgrent: float8
  salespermonth: Int
}

"""
update columns of table "uk_data.outcode_stats"
"""
enum uk_data_outcode_stats_update_column {
  """column name"""
  avgprice

  """column name"""
  avgpricepsf

  """column name"""
  avgrent

  """column name"""
  avgyield

  """column name"""
  growth1y

  """column name"""
  growth3y

  """column name"""
  growth5y

  """column name"""
  last_update

  """column name"""
  outcode

  """column name"""
  salespermonth

  """column name"""
  turnover
}

input uk_data_outcode_stats_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_outcode_stats_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_outcode_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_outcode_stats_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_outcode_stats_var_pop_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""aggregate var_samp on columns"""
type uk_data_outcode_stats_var_samp_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""aggregate variance on columns"""
type uk_data_outcode_stats_variance_fields {
  avgprice: Float
  avgpricepsf: Float
  avgrent: Float
  salespermonth: Float
}

"""
columns and relationships of "uk_data.outcodes"
"""
type uk_data_outcodes {
  outcode: String
}

"""
aggregated selection of "uk_data.outcodes"
"""
type uk_data_outcodes_aggregate {
  aggregate: uk_data_outcodes_aggregate_fields
  nodes: [uk_data_outcodes!]!
}

"""
aggregate fields of "uk_data.outcodes"
"""
type uk_data_outcodes_aggregate_fields {
  count(columns: [uk_data_outcodes_select_column!], distinct: Boolean): Int!
  max: uk_data_outcodes_max_fields
  min: uk_data_outcodes_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.outcodes". All fields are combined with a logical 'AND'.
"""
input uk_data_outcodes_bool_exp {
  _and: [uk_data_outcodes_bool_exp!]
  _not: uk_data_outcodes_bool_exp
  _or: [uk_data_outcodes_bool_exp!]
  outcode: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_outcodes_max_fields {
  outcode: String
}

"""aggregate min on columns"""
type uk_data_outcodes_min_fields {
  outcode: String
}

"""Ordering options when selecting data from "uk_data.outcodes"."""
input uk_data_outcodes_order_by {
  outcode: order_by
}

"""
select columns of table "uk_data.outcodes"
"""
enum uk_data_outcodes_select_column {
  """column name"""
  outcode
}

"""
Streaming cursor of the table "uk_data_outcodes"
"""
input uk_data_outcodes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_outcodes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_outcodes_stream_cursor_value_input {
  outcode: String
}

input uk_data_place_of_worship_within_radius_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.police_force_neighbourhoods"
"""
type uk_data_police_force_neighbourhoods {
  last_update: timestamp
  neighbourhood: String!

  """An object relationship"""
  police_force: uk_data_police_forces!
  police_force_id: String!
}

"""
aggregated selection of "uk_data.police_force_neighbourhoods"
"""
type uk_data_police_force_neighbourhoods_aggregate {
  aggregate: uk_data_police_force_neighbourhoods_aggregate_fields
  nodes: [uk_data_police_force_neighbourhoods!]!
}

input uk_data_police_force_neighbourhoods_aggregate_bool_exp {
  count: uk_data_police_force_neighbourhoods_aggregate_bool_exp_count
}

input uk_data_police_force_neighbourhoods_aggregate_bool_exp_count {
  arguments: [uk_data_police_force_neighbourhoods_select_column!]
  distinct: Boolean
  filter: uk_data_police_force_neighbourhoods_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "uk_data.police_force_neighbourhoods"
"""
type uk_data_police_force_neighbourhoods_aggregate_fields {
  count(columns: [uk_data_police_force_neighbourhoods_select_column!], distinct: Boolean): Int!
  max: uk_data_police_force_neighbourhoods_max_fields
  min: uk_data_police_force_neighbourhoods_min_fields
}

"""
order by aggregate values of table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_aggregate_order_by {
  count: order_by
  max: uk_data_police_force_neighbourhoods_max_order_by
  min: uk_data_police_force_neighbourhoods_min_order_by
}

"""
input type for inserting array relation for remote table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_arr_rel_insert_input {
  data: [uk_data_police_force_neighbourhoods_insert_input!]!

  """upsert condition"""
  on_conflict: uk_data_police_force_neighbourhoods_on_conflict
}

"""
Boolean expression to filter rows from the table "uk_data.police_force_neighbourhoods". All fields are combined with a logical 'AND'.
"""
input uk_data_police_force_neighbourhoods_bool_exp {
  _and: [uk_data_police_force_neighbourhoods_bool_exp!]
  _not: uk_data_police_force_neighbourhoods_bool_exp
  _or: [uk_data_police_force_neighbourhoods_bool_exp!]
  last_update: timestamp_comparison_exp
  neighbourhood: String_comparison_exp
  police_force: uk_data_police_forces_bool_exp
  police_force_id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.police_force_neighbourhoods"
"""
enum uk_data_police_force_neighbourhoods_constraint {
  """
  unique or primary key constraint on columns "police_force_id", "neighbourhood"
  """
  police_force_neighbourhoods_pkey
}

"""
input type for inserting data into table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_insert_input {
  last_update: timestamp
  neighbourhood: String
  police_force: uk_data_police_forces_obj_rel_insert_input
  police_force_id: String
}

"""aggregate max on columns"""
type uk_data_police_force_neighbourhoods_max_fields {
  last_update: timestamp
  neighbourhood: String
  police_force_id: String
}

"""
order by max() on columns of table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_max_order_by {
  last_update: order_by
  neighbourhood: order_by
  police_force_id: order_by
}

"""aggregate min on columns"""
type uk_data_police_force_neighbourhoods_min_fields {
  last_update: timestamp
  neighbourhood: String
  police_force_id: String
}

"""
order by min() on columns of table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_min_order_by {
  last_update: order_by
  neighbourhood: order_by
  police_force_id: order_by
}

"""
response of any mutation on the table "uk_data.police_force_neighbourhoods"
"""
type uk_data_police_force_neighbourhoods_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_police_force_neighbourhoods!]!
}

"""
on_conflict condition type for table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_on_conflict {
  constraint: uk_data_police_force_neighbourhoods_constraint!
  update_columns: [uk_data_police_force_neighbourhoods_update_column!]! = []
  where: uk_data_police_force_neighbourhoods_bool_exp
}

"""
Ordering options when selecting data from "uk_data.police_force_neighbourhoods".
"""
input uk_data_police_force_neighbourhoods_order_by {
  last_update: order_by
  neighbourhood: order_by
  police_force: uk_data_police_forces_order_by
  police_force_id: order_by
}

"""
primary key columns input for table: uk_data.police_force_neighbourhoods
"""
input uk_data_police_force_neighbourhoods_pk_columns_input {
  neighbourhood: String!
  police_force_id: String!
}

"""
select columns of table "uk_data.police_force_neighbourhoods"
"""
enum uk_data_police_force_neighbourhoods_select_column {
  """column name"""
  last_update

  """column name"""
  neighbourhood

  """column name"""
  police_force_id
}

"""
input type for updating data in table "uk_data.police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_set_input {
  last_update: timestamp
  neighbourhood: String
  police_force_id: String
}

"""
Streaming cursor of the table "uk_data_police_force_neighbourhoods"
"""
input uk_data_police_force_neighbourhoods_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_police_force_neighbourhoods_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_police_force_neighbourhoods_stream_cursor_value_input {
  last_update: timestamp
  neighbourhood: String
  police_force_id: String
}

"""
update columns of table "uk_data.police_force_neighbourhoods"
"""
enum uk_data_police_force_neighbourhoods_update_column {
  """column name"""
  last_update

  """column name"""
  neighbourhood

  """column name"""
  police_force_id
}

input uk_data_police_force_neighbourhoods_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_police_force_neighbourhoods_set_input

  """filter the rows which have to be updated"""
  where: uk_data_police_force_neighbourhoods_bool_exp!
}

"""
columns and relationships of "uk_data.police_forces"
"""
type uk_data_police_forces {
  description: String
  id: String!
  last_update: timestamp
  name: String!

  """An array relationship"""
  police_force_neighbourhoods(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): [uk_data_police_force_neighbourhoods!]!

  """An aggregate relationship"""
  police_force_neighbourhoods_aggregate(
    """distinct select on columns"""
    distinct_on: [uk_data_police_force_neighbourhoods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uk_data_police_force_neighbourhoods_order_by!]

    """filter the rows returned"""
    where: uk_data_police_force_neighbourhoods_bool_exp
  ): uk_data_police_force_neighbourhoods_aggregate!
  telephone: String!
  url: String!
}

"""
aggregated selection of "uk_data.police_forces"
"""
type uk_data_police_forces_aggregate {
  aggregate: uk_data_police_forces_aggregate_fields
  nodes: [uk_data_police_forces!]!
}

"""
aggregate fields of "uk_data.police_forces"
"""
type uk_data_police_forces_aggregate_fields {
  count(columns: [uk_data_police_forces_select_column!], distinct: Boolean): Int!
  max: uk_data_police_forces_max_fields
  min: uk_data_police_forces_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.police_forces". All fields are combined with a logical 'AND'.
"""
input uk_data_police_forces_bool_exp {
  _and: [uk_data_police_forces_bool_exp!]
  _not: uk_data_police_forces_bool_exp
  _or: [uk_data_police_forces_bool_exp!]
  description: String_comparison_exp
  id: String_comparison_exp
  last_update: timestamp_comparison_exp
  name: String_comparison_exp
  police_force_neighbourhoods: uk_data_police_force_neighbourhoods_bool_exp
  police_force_neighbourhoods_aggregate: uk_data_police_force_neighbourhoods_aggregate_bool_exp
  telephone: String_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.police_forces"
"""
enum uk_data_police_forces_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  police_forces_pkey
}

"""
input type for inserting data into table "uk_data.police_forces"
"""
input uk_data_police_forces_insert_input {
  description: String
  id: String
  last_update: timestamp
  name: String
  police_force_neighbourhoods: uk_data_police_force_neighbourhoods_arr_rel_insert_input
  telephone: String
  url: String
}

"""aggregate max on columns"""
type uk_data_police_forces_max_fields {
  description: String
  id: String
  last_update: timestamp
  name: String
  telephone: String
  url: String
}

"""aggregate min on columns"""
type uk_data_police_forces_min_fields {
  description: String
  id: String
  last_update: timestamp
  name: String
  telephone: String
  url: String
}

"""
response of any mutation on the table "uk_data.police_forces"
"""
type uk_data_police_forces_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_police_forces!]!
}

"""
input type for inserting object relation for remote table "uk_data.police_forces"
"""
input uk_data_police_forces_obj_rel_insert_input {
  data: uk_data_police_forces_insert_input!

  """upsert condition"""
  on_conflict: uk_data_police_forces_on_conflict
}

"""
on_conflict condition type for table "uk_data.police_forces"
"""
input uk_data_police_forces_on_conflict {
  constraint: uk_data_police_forces_constraint!
  update_columns: [uk_data_police_forces_update_column!]! = []
  where: uk_data_police_forces_bool_exp
}

"""Ordering options when selecting data from "uk_data.police_forces"."""
input uk_data_police_forces_order_by {
  description: order_by
  id: order_by
  last_update: order_by
  name: order_by
  police_force_neighbourhoods_aggregate: uk_data_police_force_neighbourhoods_aggregate_order_by
  telephone: order_by
  url: order_by
}

"""primary key columns input for table: uk_data.police_forces"""
input uk_data_police_forces_pk_columns_input {
  id: String!
}

"""
select columns of table "uk_data.police_forces"
"""
enum uk_data_police_forces_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  last_update

  """column name"""
  name

  """column name"""
  telephone

  """column name"""
  url
}

"""
input type for updating data in table "uk_data.police_forces"
"""
input uk_data_police_forces_set_input {
  description: String
  id: String
  last_update: timestamp
  name: String
  telephone: String
  url: String
}

"""
Streaming cursor of the table "uk_data_police_forces"
"""
input uk_data_police_forces_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_police_forces_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_police_forces_stream_cursor_value_input {
  description: String
  id: String
  last_update: timestamp
  name: String
  telephone: String
  url: String
}

"""
update columns of table "uk_data.police_forces"
"""
enum uk_data_police_forces_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  last_update

  """column name"""
  name

  """column name"""
  telephone

  """column name"""
  url
}

input uk_data_police_forces_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_police_forces_set_input

  """filter the rows which have to be updated"""
  where: uk_data_police_forces_bool_exp!
}

"""
columns and relationships of "uk_data.population_projection_by_area"
"""
type uk_data_population_projection_by_area {
  AREA: String!
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""
aggregated selection of "uk_data.population_projection_by_area"
"""
type uk_data_population_projection_by_area_aggregate {
  aggregate: uk_data_population_projection_by_area_aggregate_fields
  nodes: [uk_data_population_projection_by_area!]!
}

"""
aggregate fields of "uk_data.population_projection_by_area"
"""
type uk_data_population_projection_by_area_aggregate_fields {
  avg: uk_data_population_projection_by_area_avg_fields
  count(columns: [uk_data_population_projection_by_area_select_column!], distinct: Boolean): Int!
  max: uk_data_population_projection_by_area_max_fields
  min: uk_data_population_projection_by_area_min_fields
  stddev: uk_data_population_projection_by_area_stddev_fields
  stddev_pop: uk_data_population_projection_by_area_stddev_pop_fields
  stddev_samp: uk_data_population_projection_by_area_stddev_samp_fields
  sum: uk_data_population_projection_by_area_sum_fields
  var_pop: uk_data_population_projection_by_area_var_pop_fields
  var_samp: uk_data_population_projection_by_area_var_samp_fields
  variance: uk_data_population_projection_by_area_variance_fields
}

"""aggregate avg on columns"""
type uk_data_population_projection_by_area_avg_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""
Boolean expression to filter rows from the table "uk_data.population_projection_by_area". All fields are combined with a logical 'AND'.
"""
input uk_data_population_projection_by_area_bool_exp {
  AREA: String_comparison_exp
  _2018: float8_comparison_exp
  _2019: float8_comparison_exp
  _2020: float8_comparison_exp
  _2021: float8_comparison_exp
  _2022: float8_comparison_exp
  _2023: float8_comparison_exp
  _2024: float8_comparison_exp
  _2025: float8_comparison_exp
  _2026: float8_comparison_exp
  _2027: float8_comparison_exp
  _2028: float8_comparison_exp
  _2029: float8_comparison_exp
  _2030: float8_comparison_exp
  _2031: float8_comparison_exp
  _2032: float8_comparison_exp
  _2033: float8_comparison_exp
  _2034: float8_comparison_exp
  _2035: float8_comparison_exp
  _2036: float8_comparison_exp
  _2037: float8_comparison_exp
  _2038: float8_comparison_exp
  _2039: float8_comparison_exp
  _2040: float8_comparison_exp
  _2041: float8_comparison_exp
  _2042: float8_comparison_exp
  _2043: float8_comparison_exp
  _and: [uk_data_population_projection_by_area_bool_exp!]
  _not: uk_data_population_projection_by_area_bool_exp
  _or: [uk_data_population_projection_by_area_bool_exp!]
  last_update: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.population_projection_by_area"
"""
enum uk_data_population_projection_by_area_constraint {
  """
  unique or primary key constraint on columns "AREA"
  """
  population_projection_by_area_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.population_projection_by_area"
"""
input uk_data_population_projection_by_area_inc_input {
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
}

"""
input type for inserting data into table "uk_data.population_projection_by_area"
"""
input uk_data_population_projection_by_area_insert_input {
  AREA: String
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""aggregate max on columns"""
type uk_data_population_projection_by_area_max_fields {
  AREA: String
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""aggregate min on columns"""
type uk_data_population_projection_by_area_min_fields {
  AREA: String
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""
response of any mutation on the table "uk_data.population_projection_by_area"
"""
type uk_data_population_projection_by_area_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_population_projection_by_area!]!
}

"""
on_conflict condition type for table "uk_data.population_projection_by_area"
"""
input uk_data_population_projection_by_area_on_conflict {
  constraint: uk_data_population_projection_by_area_constraint!
  update_columns: [uk_data_population_projection_by_area_update_column!]! = []
  where: uk_data_population_projection_by_area_bool_exp
}

"""
Ordering options when selecting data from "uk_data.population_projection_by_area".
"""
input uk_data_population_projection_by_area_order_by {
  AREA: order_by
  _2018: order_by
  _2019: order_by
  _2020: order_by
  _2021: order_by
  _2022: order_by
  _2023: order_by
  _2024: order_by
  _2025: order_by
  _2026: order_by
  _2027: order_by
  _2028: order_by
  _2029: order_by
  _2030: order_by
  _2031: order_by
  _2032: order_by
  _2033: order_by
  _2034: order_by
  _2035: order_by
  _2036: order_by
  _2037: order_by
  _2038: order_by
  _2039: order_by
  _2040: order_by
  _2041: order_by
  _2042: order_by
  _2043: order_by
  last_update: order_by
}

"""
primary key columns input for table: uk_data.population_projection_by_area
"""
input uk_data_population_projection_by_area_pk_columns_input {
  AREA: String!
}

"""
select columns of table "uk_data.population_projection_by_area"
"""
enum uk_data_population_projection_by_area_select_column {
  """column name"""
  AREA

  """column name"""
  _2018

  """column name"""
  _2019

  """column name"""
  _2020

  """column name"""
  _2021

  """column name"""
  _2022

  """column name"""
  _2023

  """column name"""
  _2024

  """column name"""
  _2025

  """column name"""
  _2026

  """column name"""
  _2027

  """column name"""
  _2028

  """column name"""
  _2029

  """column name"""
  _2030

  """column name"""
  _2031

  """column name"""
  _2032

  """column name"""
  _2033

  """column name"""
  _2034

  """column name"""
  _2035

  """column name"""
  _2036

  """column name"""
  _2037

  """column name"""
  _2038

  """column name"""
  _2039

  """column name"""
  _2040

  """column name"""
  _2041

  """column name"""
  _2042

  """column name"""
  _2043

  """column name"""
  last_update
}

"""
input type for updating data in table "uk_data.population_projection_by_area"
"""
input uk_data_population_projection_by_area_set_input {
  AREA: String
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""aggregate stddev on columns"""
type uk_data_population_projection_by_area_stddev_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_population_projection_by_area_stddev_pop_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_population_projection_by_area_stddev_samp_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""
Streaming cursor of the table "uk_data_population_projection_by_area"
"""
input uk_data_population_projection_by_area_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_population_projection_by_area_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_population_projection_by_area_stream_cursor_value_input {
  AREA: String
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
  last_update: timestamp
}

"""aggregate sum on columns"""
type uk_data_population_projection_by_area_sum_fields {
  _2018: float8
  _2019: float8
  _2020: float8
  _2021: float8
  _2022: float8
  _2023: float8
  _2024: float8
  _2025: float8
  _2026: float8
  _2027: float8
  _2028: float8
  _2029: float8
  _2030: float8
  _2031: float8
  _2032: float8
  _2033: float8
  _2034: float8
  _2035: float8
  _2036: float8
  _2037: float8
  _2038: float8
  _2039: float8
  _2040: float8
  _2041: float8
  _2042: float8
  _2043: float8
}

"""
update columns of table "uk_data.population_projection_by_area"
"""
enum uk_data_population_projection_by_area_update_column {
  """column name"""
  AREA

  """column name"""
  _2018

  """column name"""
  _2019

  """column name"""
  _2020

  """column name"""
  _2021

  """column name"""
  _2022

  """column name"""
  _2023

  """column name"""
  _2024

  """column name"""
  _2025

  """column name"""
  _2026

  """column name"""
  _2027

  """column name"""
  _2028

  """column name"""
  _2029

  """column name"""
  _2030

  """column name"""
  _2031

  """column name"""
  _2032

  """column name"""
  _2033

  """column name"""
  _2034

  """column name"""
  _2035

  """column name"""
  _2036

  """column name"""
  _2037

  """column name"""
  _2038

  """column name"""
  _2039

  """column name"""
  _2040

  """column name"""
  _2041

  """column name"""
  _2042

  """column name"""
  _2043

  """column name"""
  last_update
}

input uk_data_population_projection_by_area_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_population_projection_by_area_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_population_projection_by_area_set_input

  """filter the rows which have to be updated"""
  where: uk_data_population_projection_by_area_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_population_projection_by_area_var_pop_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""aggregate var_samp on columns"""
type uk_data_population_projection_by_area_var_samp_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""aggregate variance on columns"""
type uk_data_population_projection_by_area_variance_fields {
  _2018: Float
  _2019: Float
  _2020: Float
  _2021: Float
  _2022: Float
  _2023: Float
  _2024: Float
  _2025: Float
  _2026: Float
  _2027: Float
  _2028: Float
  _2029: Float
  _2030: Float
  _2031: Float
  _2032: Float
  _2033: Float
  _2034: Float
  _2035: Float
  _2036: Float
  _2037: Float
  _2038: Float
  _2039: Float
  _2040: Float
  _2041: Float
  _2042: Float
  _2043: Float
}

"""
columns and relationships of "uk_data.population_projection_by_country"
"""
type uk_data_population_projection_by_country {
  country: String!
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""
aggregated selection of "uk_data.population_projection_by_country"
"""
type uk_data_population_projection_by_country_aggregate {
  aggregate: uk_data_population_projection_by_country_aggregate_fields
  nodes: [uk_data_population_projection_by_country!]!
}

"""
aggregate fields of "uk_data.population_projection_by_country"
"""
type uk_data_population_projection_by_country_aggregate_fields {
  avg: uk_data_population_projection_by_country_avg_fields
  count(columns: [uk_data_population_projection_by_country_select_column!], distinct: Boolean): Int!
  max: uk_data_population_projection_by_country_max_fields
  min: uk_data_population_projection_by_country_min_fields
  stddev: uk_data_population_projection_by_country_stddev_fields
  stddev_pop: uk_data_population_projection_by_country_stddev_pop_fields
  stddev_samp: uk_data_population_projection_by_country_stddev_samp_fields
  sum: uk_data_population_projection_by_country_sum_fields
  var_pop: uk_data_population_projection_by_country_var_pop_fields
  var_samp: uk_data_population_projection_by_country_var_samp_fields
  variance: uk_data_population_projection_by_country_variance_fields
}

"""aggregate avg on columns"""
type uk_data_population_projection_by_country_avg_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""
Boolean expression to filter rows from the table "uk_data.population_projection_by_country". All fields are combined with a logical 'AND'.
"""
input uk_data_population_projection_by_country_bool_exp {
  _and: [uk_data_population_projection_by_country_bool_exp!]
  _not: uk_data_population_projection_by_country_bool_exp
  _or: [uk_data_population_projection_by_country_bool_exp!]
  country: String_comparison_exp
  last_update: timestamp_comparison_exp
  year_2020: numeric_comparison_exp
  year_2025: numeric_comparison_exp
  year_2030: numeric_comparison_exp
  year_2035: numeric_comparison_exp
  year_2040: numeric_comparison_exp
  year_2045: numeric_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.population_projection_by_country"
"""
enum uk_data_population_projection_by_country_constraint {
  """
  unique or primary key constraint on columns "country"
  """
  population_projection_by_country_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.population_projection_by_country"
"""
input uk_data_population_projection_by_country_inc_input {
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""
input type for inserting data into table "uk_data.population_projection_by_country"
"""
input uk_data_population_projection_by_country_insert_input {
  country: String
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""aggregate max on columns"""
type uk_data_population_projection_by_country_max_fields {
  country: String
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""aggregate min on columns"""
type uk_data_population_projection_by_country_min_fields {
  country: String
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""
response of any mutation on the table "uk_data.population_projection_by_country"
"""
type uk_data_population_projection_by_country_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_population_projection_by_country!]!
}

"""
on_conflict condition type for table "uk_data.population_projection_by_country"
"""
input uk_data_population_projection_by_country_on_conflict {
  constraint: uk_data_population_projection_by_country_constraint!
  update_columns: [uk_data_population_projection_by_country_update_column!]! = []
  where: uk_data_population_projection_by_country_bool_exp
}

"""
Ordering options when selecting data from "uk_data.population_projection_by_country".
"""
input uk_data_population_projection_by_country_order_by {
  country: order_by
  last_update: order_by
  year_2020: order_by
  year_2025: order_by
  year_2030: order_by
  year_2035: order_by
  year_2040: order_by
  year_2045: order_by
}

"""
primary key columns input for table: uk_data.population_projection_by_country
"""
input uk_data_population_projection_by_country_pk_columns_input {
  country: String!
}

"""
select columns of table "uk_data.population_projection_by_country"
"""
enum uk_data_population_projection_by_country_select_column {
  """column name"""
  country

  """column name"""
  last_update

  """column name"""
  year_2020

  """column name"""
  year_2025

  """column name"""
  year_2030

  """column name"""
  year_2035

  """column name"""
  year_2040

  """column name"""
  year_2045
}

"""
input type for updating data in table "uk_data.population_projection_by_country"
"""
input uk_data_population_projection_by_country_set_input {
  country: String
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""aggregate stddev on columns"""
type uk_data_population_projection_by_country_stddev_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_population_projection_by_country_stddev_pop_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_population_projection_by_country_stddev_samp_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""
Streaming cursor of the table "uk_data_population_projection_by_country"
"""
input uk_data_population_projection_by_country_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_population_projection_by_country_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_population_projection_by_country_stream_cursor_value_input {
  country: String
  last_update: timestamp
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""aggregate sum on columns"""
type uk_data_population_projection_by_country_sum_fields {
  year_2020: numeric
  year_2025: numeric
  year_2030: numeric
  year_2035: numeric
  year_2040: numeric
  year_2045: numeric
}

"""
update columns of table "uk_data.population_projection_by_country"
"""
enum uk_data_population_projection_by_country_update_column {
  """column name"""
  country

  """column name"""
  last_update

  """column name"""
  year_2020

  """column name"""
  year_2025

  """column name"""
  year_2030

  """column name"""
  year_2035

  """column name"""
  year_2040

  """column name"""
  year_2045
}

input uk_data_population_projection_by_country_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_population_projection_by_country_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_population_projection_by_country_set_input

  """filter the rows which have to be updated"""
  where: uk_data_population_projection_by_country_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_population_projection_by_country_var_pop_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""aggregate var_samp on columns"""
type uk_data_population_projection_by_country_var_samp_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""aggregate variance on columns"""
type uk_data_population_projection_by_country_variance_fields {
  year_2020: Float
  year_2025: Float
  year_2030: Float
  year_2035: Float
  year_2040: Float
  year_2045: Float
}

"""
columns and relationships of "uk_data.postcode_sectors"
"""
type uk_data_postcode_sectors {
  postcode_sector: String
}

"""
aggregated selection of "uk_data.postcode_sectors"
"""
type uk_data_postcode_sectors_aggregate {
  aggregate: uk_data_postcode_sectors_aggregate_fields
  nodes: [uk_data_postcode_sectors!]!
}

"""
aggregate fields of "uk_data.postcode_sectors"
"""
type uk_data_postcode_sectors_aggregate_fields {
  count(columns: [uk_data_postcode_sectors_select_column!], distinct: Boolean): Int!
  max: uk_data_postcode_sectors_max_fields
  min: uk_data_postcode_sectors_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.postcode_sectors". All fields are combined with a logical 'AND'.
"""
input uk_data_postcode_sectors_bool_exp {
  _and: [uk_data_postcode_sectors_bool_exp!]
  _not: uk_data_postcode_sectors_bool_exp
  _or: [uk_data_postcode_sectors_bool_exp!]
  postcode_sector: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_postcode_sectors_max_fields {
  postcode_sector: String
}

"""aggregate min on columns"""
type uk_data_postcode_sectors_min_fields {
  postcode_sector: String
}

"""Ordering options when selecting data from "uk_data.postcode_sectors"."""
input uk_data_postcode_sectors_order_by {
  postcode_sector: order_by
}

"""
select columns of table "uk_data.postcode_sectors"
"""
enum uk_data_postcode_sectors_select_column {
  """column name"""
  postcode_sector
}

"""
Streaming cursor of the table "uk_data_postcode_sectors"
"""
input uk_data_postcode_sectors_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_postcode_sectors_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_postcode_sectors_stream_cursor_value_input {
  postcode_sector: String
}

"""
columns and relationships of "uk_data.postcodes"
"""
type uk_data_postcodes {
  postcode: String
}

"""
aggregated selection of "uk_data.postcodes"
"""
type uk_data_postcodes_aggregate {
  aggregate: uk_data_postcodes_aggregate_fields
  nodes: [uk_data_postcodes!]!
}

"""
aggregate fields of "uk_data.postcodes"
"""
type uk_data_postcodes_aggregate_fields {
  count(columns: [uk_data_postcodes_select_column!], distinct: Boolean): Int!
  max: uk_data_postcodes_max_fields
  min: uk_data_postcodes_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.postcodes". All fields are combined with a logical 'AND'.
"""
input uk_data_postcodes_bool_exp {
  _and: [uk_data_postcodes_bool_exp!]
  _not: uk_data_postcodes_bool_exp
  _or: [uk_data_postcodes_bool_exp!]
  postcode: String_comparison_exp
}

"""aggregate max on columns"""
type uk_data_postcodes_max_fields {
  postcode: String
}

"""aggregate min on columns"""
type uk_data_postcodes_min_fields {
  postcode: String
}

"""Ordering options when selecting data from "uk_data.postcodes"."""
input uk_data_postcodes_order_by {
  postcode: order_by
}

"""
select columns of table "uk_data.postcodes"
"""
enum uk_data_postcodes_select_column {
  """column name"""
  postcode
}

"""
Streaming cursor of the table "uk_data_postcodes"
"""
input uk_data_postcodes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_postcodes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_postcodes_stream_cursor_value_input {
  postcode: String
}

"""
columns and relationships of "uk_data.price_paid_data"
"""
type uk_data_price_paid_data {
  county: String
  deed_date: timestamp!
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String!
}

"""
aggregated selection of "uk_data.price_paid_data"
"""
type uk_data_price_paid_data_aggregate {
  aggregate: uk_data_price_paid_data_aggregate_fields
  nodes: [uk_data_price_paid_data!]!
}

"""
aggregate fields of "uk_data.price_paid_data"
"""
type uk_data_price_paid_data_aggregate_fields {
  avg: uk_data_price_paid_data_avg_fields
  count(columns: [uk_data_price_paid_data_select_column!], distinct: Boolean): Int!
  max: uk_data_price_paid_data_max_fields
  min: uk_data_price_paid_data_min_fields
  stddev: uk_data_price_paid_data_stddev_fields
  stddev_pop: uk_data_price_paid_data_stddev_pop_fields
  stddev_samp: uk_data_price_paid_data_stddev_samp_fields
  sum: uk_data_price_paid_data_sum_fields
  var_pop: uk_data_price_paid_data_var_pop_fields
  var_samp: uk_data_price_paid_data_var_samp_fields
  variance: uk_data_price_paid_data_variance_fields
}

"""aggregate avg on columns"""
type uk_data_price_paid_data_avg_fields {
  price_paid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.price_paid_data". All fields are combined with a logical 'AND'.
"""
input uk_data_price_paid_data_bool_exp {
  _and: [uk_data_price_paid_data_bool_exp!]
  _not: uk_data_price_paid_data_bool_exp
  _or: [uk_data_price_paid_data_bool_exp!]
  county: String_comparison_exp
  deed_date: timestamp_comparison_exp
  district: String_comparison_exp
  estate_type: String_comparison_exp
  last_update: timestamp_comparison_exp
  locality: String_comparison_exp
  new_build: String_comparison_exp
  paon: String_comparison_exp
  postcode: String_comparison_exp
  price_paid: Int_comparison_exp
  property_type: String_comparison_exp
  record_status: String_comparison_exp
  saon: String_comparison_exp
  street: String_comparison_exp
  town: String_comparison_exp
  transaction_category: String_comparison_exp
  unique_id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.price_paid_data"
"""
enum uk_data_price_paid_data_constraint {
  """
  unique or primary key constraint on columns "unique_id", "deed_date"
  """
  price_paid_data_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.price_paid_data"
"""
input uk_data_price_paid_data_inc_input {
  price_paid: Int
}

"""
input type for inserting data into table "uk_data.price_paid_data"
"""
input uk_data_price_paid_data_insert_input {
  county: String
  deed_date: timestamp
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String
}

"""aggregate max on columns"""
type uk_data_price_paid_data_max_fields {
  county: String
  deed_date: timestamp
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String
}

"""aggregate min on columns"""
type uk_data_price_paid_data_min_fields {
  county: String
  deed_date: timestamp
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String
}

"""
response of any mutation on the table "uk_data.price_paid_data"
"""
type uk_data_price_paid_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_price_paid_data!]!
}

"""
on_conflict condition type for table "uk_data.price_paid_data"
"""
input uk_data_price_paid_data_on_conflict {
  constraint: uk_data_price_paid_data_constraint!
  update_columns: [uk_data_price_paid_data_update_column!]! = []
  where: uk_data_price_paid_data_bool_exp
}

"""Ordering options when selecting data from "uk_data.price_paid_data"."""
input uk_data_price_paid_data_order_by {
  county: order_by
  deed_date: order_by
  district: order_by
  estate_type: order_by
  last_update: order_by
  locality: order_by
  new_build: order_by
  paon: order_by
  postcode: order_by
  price_paid: order_by
  property_type: order_by
  record_status: order_by
  saon: order_by
  street: order_by
  town: order_by
  transaction_category: order_by
  unique_id: order_by
}

"""primary key columns input for table: uk_data.price_paid_data"""
input uk_data_price_paid_data_pk_columns_input {
  deed_date: timestamp!
  unique_id: String!
}

"""
select columns of table "uk_data.price_paid_data"
"""
enum uk_data_price_paid_data_select_column {
  """column name"""
  county

  """column name"""
  deed_date

  """column name"""
  district

  """column name"""
  estate_type

  """column name"""
  last_update

  """column name"""
  locality

  """column name"""
  new_build

  """column name"""
  paon

  """column name"""
  postcode

  """column name"""
  price_paid

  """column name"""
  property_type

  """column name"""
  record_status

  """column name"""
  saon

  """column name"""
  street

  """column name"""
  town

  """column name"""
  transaction_category

  """column name"""
  unique_id
}

"""
input type for updating data in table "uk_data.price_paid_data"
"""
input uk_data_price_paid_data_set_input {
  county: String
  deed_date: timestamp
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String
}

"""aggregate stddev on columns"""
type uk_data_price_paid_data_stddev_fields {
  price_paid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_price_paid_data_stddev_pop_fields {
  price_paid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_price_paid_data_stddev_samp_fields {
  price_paid: Float
}

"""
Streaming cursor of the table "uk_data_price_paid_data"
"""
input uk_data_price_paid_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_price_paid_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_price_paid_data_stream_cursor_value_input {
  county: String
  deed_date: timestamp
  district: String
  estate_type: String
  last_update: timestamp
  locality: String
  new_build: String
  paon: String
  postcode: String
  price_paid: Int
  property_type: String
  record_status: String
  saon: String
  street: String
  town: String
  transaction_category: String
  unique_id: String
}

"""aggregate sum on columns"""
type uk_data_price_paid_data_sum_fields {
  price_paid: Int
}

"""
update columns of table "uk_data.price_paid_data"
"""
enum uk_data_price_paid_data_update_column {
  """column name"""
  county

  """column name"""
  deed_date

  """column name"""
  district

  """column name"""
  estate_type

  """column name"""
  last_update

  """column name"""
  locality

  """column name"""
  new_build

  """column name"""
  paon

  """column name"""
  postcode

  """column name"""
  price_paid

  """column name"""
  property_type

  """column name"""
  record_status

  """column name"""
  saon

  """column name"""
  street

  """column name"""
  town

  """column name"""
  transaction_category

  """column name"""
  unique_id
}

input uk_data_price_paid_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_price_paid_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_price_paid_data_set_input

  """filter the rows which have to be updated"""
  where: uk_data_price_paid_data_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_price_paid_data_var_pop_fields {
  price_paid: Float
}

"""aggregate var_samp on columns"""
type uk_data_price_paid_data_var_samp_fields {
  price_paid: Float
}

"""aggregate variance on columns"""
type uk_data_price_paid_data_variance_fields {
  price_paid: Float
}

"""
columns and relationships of "uk_data.property_records"
"""
type uk_data_property_records {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint!
  usrn: bigint
}

"""
aggregated selection of "uk_data.property_records"
"""
type uk_data_property_records_aggregate {
  aggregate: uk_data_property_records_aggregate_fields
  nodes: [uk_data_property_records!]!
}

"""
aggregate fields of "uk_data.property_records"
"""
type uk_data_property_records_aggregate_fields {
  avg: uk_data_property_records_avg_fields
  count(columns: [uk_data_property_records_select_column!], distinct: Boolean): Int!
  max: uk_data_property_records_max_fields
  min: uk_data_property_records_min_fields
  stddev: uk_data_property_records_stddev_fields
  stddev_pop: uk_data_property_records_stddev_pop_fields
  stddev_samp: uk_data_property_records_stddev_samp_fields
  sum: uk_data_property_records_sum_fields
  var_pop: uk_data_property_records_var_pop_fields
  var_samp: uk_data_property_records_var_samp_fields
  variance: uk_data_property_records_variance_fields
}

"""aggregate avg on columns"""
type uk_data_property_records_avg_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""
Boolean expression to filter rows from the table "uk_data.property_records". All fields are combined with a logical 'AND'.
"""
input uk_data_property_records_bool_exp {
  _and: [uk_data_property_records_bool_exp!]
  _not: uk_data_property_records_bool_exp
  _or: [uk_data_property_records_bool_exp!]
  address: String_comparison_exp
  building_name: String_comparison_exp
  building_number: String_comparison_exp
  change_code: String_comparison_exp
  classification_code: String_comparison_exp
  county: String_comparison_exp
  delivery_point_suffix: String_comparison_exp
  easting: float8_comparison_exp
  gss_code: String_comparison_exp
  island: String_comparison_exp
  last_update: timestamp_comparison_exp
  last_update_date: date_comparison_exp
  latitude: float8_comparison_exp
  locality: String_comparison_exp
  longitude: float8_comparison_exp
  northing: float8_comparison_exp
  organisation: String_comparison_exp
  outcode: String_comparison_exp
  parent_uprn: bigint_comparison_exp
  po_box: String_comparison_exp
  post_town: String_comparison_exp
  postcode: String_comparison_exp
  rpc: Int_comparison_exp
  sector: Int_comparison_exp
  seo_address: String_comparison_exp
  single_line_address: String_comparison_exp
  street_name: String_comparison_exp
  sub_building: String_comparison_exp
  toid: String_comparison_exp
  town_name: String_comparison_exp
  udprn: bigint_comparison_exp
  uprn: bigint_comparison_exp
  usrn: bigint_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.property_records"
"""
enum uk_data_property_records_constraint {
  """
  unique or primary key constraint on columns "uprn"
  """
  property_records_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.property_records"
"""
input uk_data_property_records_inc_input {
  easting: float8
  latitude: float8
  longitude: float8
  northing: float8
  parent_uprn: bigint
  rpc: Int
  sector: Int
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""
input type for inserting data into table "uk_data.property_records"
"""
input uk_data_property_records_insert_input {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""aggregate max on columns"""
type uk_data_property_records_max_fields {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""aggregate min on columns"""
type uk_data_property_records_min_fields {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""
response of any mutation on the table "uk_data.property_records"
"""
type uk_data_property_records_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_property_records!]!
}

"""
on_conflict condition type for table "uk_data.property_records"
"""
input uk_data_property_records_on_conflict {
  constraint: uk_data_property_records_constraint!
  update_columns: [uk_data_property_records_update_column!]! = []
  where: uk_data_property_records_bool_exp
}

"""Ordering options when selecting data from "uk_data.property_records"."""
input uk_data_property_records_order_by {
  address: order_by
  building_name: order_by
  building_number: order_by
  change_code: order_by
  classification_code: order_by
  county: order_by
  delivery_point_suffix: order_by
  easting: order_by
  gss_code: order_by
  island: order_by
  last_update: order_by
  last_update_date: order_by
  latitude: order_by
  locality: order_by
  longitude: order_by
  northing: order_by
  organisation: order_by
  outcode: order_by
  parent_uprn: order_by
  po_box: order_by
  post_town: order_by
  postcode: order_by
  rpc: order_by
  sector: order_by
  seo_address: order_by
  single_line_address: order_by
  street_name: order_by
  sub_building: order_by
  toid: order_by
  town_name: order_by
  udprn: order_by
  uprn: order_by
  usrn: order_by
}

"""primary key columns input for table: uk_data.property_records"""
input uk_data_property_records_pk_columns_input {
  uprn: bigint!
}

"""
select columns of table "uk_data.property_records"
"""
enum uk_data_property_records_select_column {
  """column name"""
  address

  """column name"""
  building_name

  """column name"""
  building_number

  """column name"""
  change_code

  """column name"""
  classification_code

  """column name"""
  county

  """column name"""
  delivery_point_suffix

  """column name"""
  easting

  """column name"""
  gss_code

  """column name"""
  island

  """column name"""
  last_update

  """column name"""
  last_update_date

  """column name"""
  latitude

  """column name"""
  locality

  """column name"""
  longitude

  """column name"""
  northing

  """column name"""
  organisation

  """column name"""
  outcode

  """column name"""
  parent_uprn

  """column name"""
  po_box

  """column name"""
  post_town

  """column name"""
  postcode

  """column name"""
  rpc

  """column name"""
  sector

  """column name"""
  seo_address

  """column name"""
  single_line_address

  """column name"""
  street_name

  """column name"""
  sub_building

  """column name"""
  toid

  """column name"""
  town_name

  """column name"""
  udprn

  """column name"""
  uprn

  """column name"""
  usrn
}

"""
input type for updating data in table "uk_data.property_records"
"""
input uk_data_property_records_set_input {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""aggregate stddev on columns"""
type uk_data_property_records_stddev_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_property_records_stddev_pop_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_property_records_stddev_samp_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""
Streaming cursor of the table "uk_data_property_records"
"""
input uk_data_property_records_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_property_records_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_property_records_stream_cursor_value_input {
  address: String
  building_name: String
  building_number: String
  change_code: String
  classification_code: String
  county: String
  delivery_point_suffix: String
  easting: float8
  gss_code: String
  island: String
  last_update: timestamp
  last_update_date: date
  latitude: float8
  locality: String
  longitude: float8
  northing: float8
  organisation: String
  outcode: String
  parent_uprn: bigint
  po_box: String
  post_town: String
  postcode: String
  rpc: Int
  sector: Int
  seo_address: String
  single_line_address: String
  street_name: String
  sub_building: String
  toid: String
  town_name: String
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""aggregate sum on columns"""
type uk_data_property_records_sum_fields {
  easting: float8
  latitude: float8
  longitude: float8
  northing: float8
  parent_uprn: bigint
  rpc: Int
  sector: Int
  udprn: bigint
  uprn: bigint
  usrn: bigint
}

"""
update columns of table "uk_data.property_records"
"""
enum uk_data_property_records_update_column {
  """column name"""
  address

  """column name"""
  building_name

  """column name"""
  building_number

  """column name"""
  change_code

  """column name"""
  classification_code

  """column name"""
  county

  """column name"""
  delivery_point_suffix

  """column name"""
  easting

  """column name"""
  gss_code

  """column name"""
  island

  """column name"""
  last_update

  """column name"""
  last_update_date

  """column name"""
  latitude

  """column name"""
  locality

  """column name"""
  longitude

  """column name"""
  northing

  """column name"""
  organisation

  """column name"""
  outcode

  """column name"""
  parent_uprn

  """column name"""
  po_box

  """column name"""
  post_town

  """column name"""
  postcode

  """column name"""
  rpc

  """column name"""
  sector

  """column name"""
  seo_address

  """column name"""
  single_line_address

  """column name"""
  street_name

  """column name"""
  sub_building

  """column name"""
  toid

  """column name"""
  town_name

  """column name"""
  udprn

  """column name"""
  uprn

  """column name"""
  usrn
}

input uk_data_property_records_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_property_records_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_property_records_set_input

  """filter the rows which have to be updated"""
  where: uk_data_property_records_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_property_records_var_pop_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""aggregate var_samp on columns"""
type uk_data_property_records_var_samp_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""aggregate variance on columns"""
type uk_data_property_records_variance_fields {
  easting: Float
  latitude: Float
  longitude: Float
  northing: Float
  parent_uprn: Float
  rpc: Float
  sector: Float
  udprn: Float
  uprn: Float
  usrn: Float
}

"""
columns and relationships of "uk_data.railway_station"
"""
type uk_data_railway_station {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.railway_station"
"""
type uk_data_railway_station_aggregate {
  aggregate: uk_data_railway_station_aggregate_fields
  nodes: [uk_data_railway_station!]!
}

"""
aggregate fields of "uk_data.railway_station"
"""
type uk_data_railway_station_aggregate_fields {
  avg: uk_data_railway_station_avg_fields
  count(columns: [uk_data_railway_station_select_column!], distinct: Boolean): Int!
  max: uk_data_railway_station_max_fields
  min: uk_data_railway_station_min_fields
  stddev: uk_data_railway_station_stddev_fields
  stddev_pop: uk_data_railway_station_stddev_pop_fields
  stddev_samp: uk_data_railway_station_stddev_samp_fields
  sum: uk_data_railway_station_sum_fields
  var_pop: uk_data_railway_station_var_pop_fields
  var_samp: uk_data_railway_station_var_samp_fields
  variance: uk_data_railway_station_variance_fields
}

"""aggregate avg on columns"""
type uk_data_railway_station_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.railway_station". All fields are combined with a logical 'AND'.
"""
input uk_data_railway_station_bool_exp {
  _and: [uk_data_railway_station_bool_exp!]
  _not: uk_data_railway_station_bool_exp
  _or: [uk_data_railway_station_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.railway_station"
"""
enum uk_data_railway_station_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  railway_station_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.railway_station"
"""
input uk_data_railway_station_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.railway_station"
"""
input uk_data_railway_station_insert_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_railway_station_max_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_railway_station_min_fields {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.railway_station"
"""
type uk_data_railway_station_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_railway_station!]!
}

"""
on_conflict condition type for table "uk_data.railway_station"
"""
input uk_data_railway_station_on_conflict {
  constraint: uk_data_railway_station_constraint!
  update_columns: [uk_data_railway_station_update_column!]! = []
  where: uk_data_railway_station_bool_exp
}

"""Ordering options when selecting data from "uk_data.railway_station"."""
input uk_data_railway_station_order_by {
  classification: order_by
  distinctive_name: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.railway_station"""
input uk_data_railway_station_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.railway_station"
"""
enum uk_data_railway_station_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.railway_station"
"""
input uk_data_railway_station_set_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_railway_station_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_railway_station_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_railway_station_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_railway_station"
"""
input uk_data_railway_station_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_railway_station_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_railway_station_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_railway_station_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.railway_station"
"""
enum uk_data_railway_station_update_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_railway_station_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_railway_station_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_railway_station_set_input

  """filter the rows which have to be updated"""
  where: uk_data_railway_station_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_railway_station_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_railway_station_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_railway_station_variance_fields {
  feature_code: Float
  fid: Float
}

input uk_data_railway_stations_within_radius_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.railway_track"
"""
type uk_data_railway_track {
  classification: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.railway_track"
"""
type uk_data_railway_track_aggregate {
  aggregate: uk_data_railway_track_aggregate_fields
  nodes: [uk_data_railway_track!]!
}

"""
aggregate fields of "uk_data.railway_track"
"""
type uk_data_railway_track_aggregate_fields {
  avg: uk_data_railway_track_avg_fields
  count(columns: [uk_data_railway_track_select_column!], distinct: Boolean): Int!
  max: uk_data_railway_track_max_fields
  min: uk_data_railway_track_min_fields
  stddev: uk_data_railway_track_stddev_fields
  stddev_pop: uk_data_railway_track_stddev_pop_fields
  stddev_samp: uk_data_railway_track_stddev_samp_fields
  sum: uk_data_railway_track_sum_fields
  var_pop: uk_data_railway_track_var_pop_fields
  var_samp: uk_data_railway_track_var_samp_fields
  variance: uk_data_railway_track_variance_fields
}

"""aggregate avg on columns"""
type uk_data_railway_track_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.railway_track". All fields are combined with a logical 'AND'.
"""
input uk_data_railway_track_bool_exp {
  _and: [uk_data_railway_track_bool_exp!]
  _not: uk_data_railway_track_bool_exp
  _or: [uk_data_railway_track_bool_exp!]
  classification: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.railway_track"
"""
enum uk_data_railway_track_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  railway_track_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.railway_track"
"""
input uk_data_railway_track_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.railway_track"
"""
input uk_data_railway_track_insert_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_railway_track_max_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_railway_track_min_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.railway_track"
"""
type uk_data_railway_track_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_railway_track!]!
}

"""
on_conflict condition type for table "uk_data.railway_track"
"""
input uk_data_railway_track_on_conflict {
  constraint: uk_data_railway_track_constraint!
  update_columns: [uk_data_railway_track_update_column!]! = []
  where: uk_data_railway_track_bool_exp
}

"""Ordering options when selecting data from "uk_data.railway_track"."""
input uk_data_railway_track_order_by {
  classification: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.railway_track"""
input uk_data_railway_track_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.railway_track"
"""
enum uk_data_railway_track_select_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.railway_track"
"""
input uk_data_railway_track_set_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_railway_track_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_railway_track_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_railway_track_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_railway_track"
"""
input uk_data_railway_track_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_railway_track_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_railway_track_stream_cursor_value_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_railway_track_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.railway_track"
"""
enum uk_data_railway_track_update_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_railway_track_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_railway_track_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_railway_track_set_input

  """filter the rows which have to be updated"""
  where: uk_data_railway_track_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_railway_track_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_railway_track_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_railway_track_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.railway_tunnel"
"""
type uk_data_railway_tunnel {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.railway_tunnel"
"""
type uk_data_railway_tunnel_aggregate {
  aggregate: uk_data_railway_tunnel_aggregate_fields
  nodes: [uk_data_railway_tunnel!]!
}

"""
aggregate fields of "uk_data.railway_tunnel"
"""
type uk_data_railway_tunnel_aggregate_fields {
  avg: uk_data_railway_tunnel_avg_fields
  count(columns: [uk_data_railway_tunnel_select_column!], distinct: Boolean): Int!
  max: uk_data_railway_tunnel_max_fields
  min: uk_data_railway_tunnel_min_fields
  stddev: uk_data_railway_tunnel_stddev_fields
  stddev_pop: uk_data_railway_tunnel_stddev_pop_fields
  stddev_samp: uk_data_railway_tunnel_stddev_samp_fields
  sum: uk_data_railway_tunnel_sum_fields
  var_pop: uk_data_railway_tunnel_var_pop_fields
  var_samp: uk_data_railway_tunnel_var_samp_fields
  variance: uk_data_railway_tunnel_variance_fields
}

"""aggregate avg on columns"""
type uk_data_railway_tunnel_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.railway_tunnel". All fields are combined with a logical 'AND'.
"""
input uk_data_railway_tunnel_bool_exp {
  _and: [uk_data_railway_tunnel_bool_exp!]
  _not: uk_data_railway_tunnel_bool_exp
  _or: [uk_data_railway_tunnel_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.railway_tunnel"
"""
enum uk_data_railway_tunnel_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  railway_tunnel_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.railway_tunnel"
"""
input uk_data_railway_tunnel_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.railway_tunnel"
"""
input uk_data_railway_tunnel_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_railway_tunnel_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_railway_tunnel_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.railway_tunnel"
"""
type uk_data_railway_tunnel_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_railway_tunnel!]!
}

"""
on_conflict condition type for table "uk_data.railway_tunnel"
"""
input uk_data_railway_tunnel_on_conflict {
  constraint: uk_data_railway_tunnel_constraint!
  update_columns: [uk_data_railway_tunnel_update_column!]! = []
  where: uk_data_railway_tunnel_bool_exp
}

"""Ordering options when selecting data from "uk_data.railway_tunnel"."""
input uk_data_railway_tunnel_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.railway_tunnel"""
input uk_data_railway_tunnel_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.railway_tunnel"
"""
enum uk_data_railway_tunnel_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.railway_tunnel"
"""
input uk_data_railway_tunnel_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_railway_tunnel_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_railway_tunnel_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_railway_tunnel_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_railway_tunnel"
"""
input uk_data_railway_tunnel_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_railway_tunnel_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_railway_tunnel_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_railway_tunnel_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.railway_tunnel"
"""
enum uk_data_railway_tunnel_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_railway_tunnel_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_railway_tunnel_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_railway_tunnel_set_input

  """filter the rows which have to be updated"""
  where: uk_data_railway_tunnel_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_railway_tunnel_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_railway_tunnel_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_railway_tunnel_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.rent_demand_stats"
"""
type uk_data_rent_demand_stats {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String!
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""
aggregated selection of "uk_data.rent_demand_stats"
"""
type uk_data_rent_demand_stats_aggregate {
  aggregate: uk_data_rent_demand_stats_aggregate_fields
  nodes: [uk_data_rent_demand_stats!]!
}

"""
aggregate fields of "uk_data.rent_demand_stats"
"""
type uk_data_rent_demand_stats_aggregate_fields {
  avg: uk_data_rent_demand_stats_avg_fields
  count(columns: [uk_data_rent_demand_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_rent_demand_stats_max_fields
  min: uk_data_rent_demand_stats_min_fields
  stddev: uk_data_rent_demand_stats_stddev_fields
  stddev_pop: uk_data_rent_demand_stats_stddev_pop_fields
  stddev_samp: uk_data_rent_demand_stats_stddev_samp_fields
  sum: uk_data_rent_demand_stats_sum_fields
  var_pop: uk_data_rent_demand_stats_var_pop_fields
  var_samp: uk_data_rent_demand_stats_var_samp_fields
  variance: uk_data_rent_demand_stats_variance_fields
}

"""aggregate avg on columns"""
type uk_data_rent_demand_stats_avg_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""
Boolean expression to filter rows from the table "uk_data.rent_demand_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_rent_demand_stats_bool_exp {
  _and: [uk_data_rent_demand_stats_bool_exp!]
  _not: uk_data_rent_demand_stats_bool_exp
  _or: [uk_data_rent_demand_stats_bool_exp!]
  daysonmarket: Int_comparison_exp
  last_update: timestamp_comparison_exp
  monthsofinventory: String_comparison_exp
  outcode: String_comparison_exp
  rentaldemandrating: String_comparison_exp
  totalforrent: Int_comparison_exp
  transactionspermonth: Int_comparison_exp
  turnoverpermonth: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.rent_demand_stats"
"""
enum uk_data_rent_demand_stats_constraint {
  """
  unique or primary key constraint on columns "outcode"
  """
  rent_demand_stats_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.rent_demand_stats"
"""
input uk_data_rent_demand_stats_inc_input {
  daysonmarket: Int
  totalforrent: Int
  transactionspermonth: Int
}

"""
input type for inserting data into table "uk_data.rent_demand_stats"
"""
input uk_data_rent_demand_stats_insert_input {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""aggregate max on columns"""
type uk_data_rent_demand_stats_max_fields {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""aggregate min on columns"""
type uk_data_rent_demand_stats_min_fields {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""
response of any mutation on the table "uk_data.rent_demand_stats"
"""
type uk_data_rent_demand_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_rent_demand_stats!]!
}

"""
on_conflict condition type for table "uk_data.rent_demand_stats"
"""
input uk_data_rent_demand_stats_on_conflict {
  constraint: uk_data_rent_demand_stats_constraint!
  update_columns: [uk_data_rent_demand_stats_update_column!]! = []
  where: uk_data_rent_demand_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.rent_demand_stats"."""
input uk_data_rent_demand_stats_order_by {
  daysonmarket: order_by
  last_update: order_by
  monthsofinventory: order_by
  outcode: order_by
  rentaldemandrating: order_by
  totalforrent: order_by
  transactionspermonth: order_by
  turnoverpermonth: order_by
}

"""primary key columns input for table: uk_data.rent_demand_stats"""
input uk_data_rent_demand_stats_pk_columns_input {
  outcode: String!
}

"""
select columns of table "uk_data.rent_demand_stats"
"""
enum uk_data_rent_demand_stats_select_column {
  """column name"""
  daysonmarket

  """column name"""
  last_update

  """column name"""
  monthsofinventory

  """column name"""
  outcode

  """column name"""
  rentaldemandrating

  """column name"""
  totalforrent

  """column name"""
  transactionspermonth

  """column name"""
  turnoverpermonth
}

"""
input type for updating data in table "uk_data.rent_demand_stats"
"""
input uk_data_rent_demand_stats_set_input {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""aggregate stddev on columns"""
type uk_data_rent_demand_stats_stddev_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_rent_demand_stats_stddev_pop_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_rent_demand_stats_stddev_samp_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""
Streaming cursor of the table "uk_data_rent_demand_stats"
"""
input uk_data_rent_demand_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_rent_demand_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_rent_demand_stats_stream_cursor_value_input {
  daysonmarket: Int
  last_update: timestamp
  monthsofinventory: String
  outcode: String
  rentaldemandrating: String
  totalforrent: Int
  transactionspermonth: Int
  turnoverpermonth: String
}

"""aggregate sum on columns"""
type uk_data_rent_demand_stats_sum_fields {
  daysonmarket: Int
  totalforrent: Int
  transactionspermonth: Int
}

"""
update columns of table "uk_data.rent_demand_stats"
"""
enum uk_data_rent_demand_stats_update_column {
  """column name"""
  daysonmarket

  """column name"""
  last_update

  """column name"""
  monthsofinventory

  """column name"""
  outcode

  """column name"""
  rentaldemandrating

  """column name"""
  totalforrent

  """column name"""
  transactionspermonth

  """column name"""
  turnoverpermonth
}

input uk_data_rent_demand_stats_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_rent_demand_stats_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_rent_demand_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_rent_demand_stats_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_rent_demand_stats_var_pop_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""aggregate var_samp on columns"""
type uk_data_rent_demand_stats_var_samp_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""aggregate variance on columns"""
type uk_data_rent_demand_stats_variance_fields {
  daysonmarket: Float
  totalforrent: Float
  transactionspermonth: Float
}

"""
columns and relationships of "uk_data.road"
"""
type uk_data_road {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
  override: String
  road_number: String
}

"""
aggregated selection of "uk_data.road"
"""
type uk_data_road_aggregate {
  aggregate: uk_data_road_aggregate_fields
  nodes: [uk_data_road!]!
}

"""
aggregate fields of "uk_data.road"
"""
type uk_data_road_aggregate_fields {
  avg: uk_data_road_avg_fields
  count(columns: [uk_data_road_select_column!], distinct: Boolean): Int!
  max: uk_data_road_max_fields
  min: uk_data_road_min_fields
  stddev: uk_data_road_stddev_fields
  stddev_pop: uk_data_road_stddev_pop_fields
  stddev_samp: uk_data_road_stddev_samp_fields
  sum: uk_data_road_sum_fields
  var_pop: uk_data_road_var_pop_fields
  var_samp: uk_data_road_var_samp_fields
  variance: uk_data_road_variance_fields
}

"""aggregate avg on columns"""
type uk_data_road_avg_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.road". All fields are combined with a logical 'AND'.
"""
input uk_data_road_bool_exp {
  _and: [uk_data_road_bool_exp!]
  _not: uk_data_road_bool_exp
  _or: [uk_data_road_bool_exp!]
  classification: String_comparison_exp
  distinctive_name: String_comparison_exp
  draw_level: Int_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
  override: String_comparison_exp
  road_number: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.road"
"""
enum uk_data_road_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  road_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.road"
"""
input uk_data_road_inc_input {
  draw_level: Int
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.road"
"""
input uk_data_road_insert_input {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  override: String
  road_number: String
}

"""aggregate max on columns"""
type uk_data_road_max_fields {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int
  id: String
  override: String
  road_number: String
}

"""aggregate min on columns"""
type uk_data_road_min_fields {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int
  id: String
  override: String
  road_number: String
}

"""
response of any mutation on the table "uk_data.road"
"""
type uk_data_road_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_road!]!
}

"""
on_conflict condition type for table "uk_data.road"
"""
input uk_data_road_on_conflict {
  constraint: uk_data_road_constraint!
  update_columns: [uk_data_road_update_column!]! = []
  where: uk_data_road_bool_exp
}

"""Ordering options when selecting data from "uk_data.road"."""
input uk_data_road_order_by {
  classification: order_by
  distinctive_name: order_by
  draw_level: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
  override: order_by
  road_number: order_by
}

"""primary key columns input for table: uk_data.road"""
input uk_data_road_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.road"
"""
enum uk_data_road_select_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  draw_level

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  override

  """column name"""
  road_number
}

"""
input type for updating data in table "uk_data.road"
"""
input uk_data_road_set_input {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  override: String
  road_number: String
}

"""aggregate stddev on columns"""
type uk_data_road_stddev_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_road_stddev_pop_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_road_stddev_samp_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_road"
"""
input uk_data_road_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_road_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_road_stream_cursor_value_input {
  classification: String
  distinctive_name: String
  draw_level: Int
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
  override: String
  road_number: String
}

"""aggregate sum on columns"""
type uk_data_road_sum_fields {
  draw_level: Int
  feature_code: Int
  fid: Int
}

"""
columns and relationships of "uk_data.road_tunnel"
"""
type uk_data_road_tunnel {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.road_tunnel"
"""
type uk_data_road_tunnel_aggregate {
  aggregate: uk_data_road_tunnel_aggregate_fields
  nodes: [uk_data_road_tunnel!]!
}

"""
aggregate fields of "uk_data.road_tunnel"
"""
type uk_data_road_tunnel_aggregate_fields {
  avg: uk_data_road_tunnel_avg_fields
  count(columns: [uk_data_road_tunnel_select_column!], distinct: Boolean): Int!
  max: uk_data_road_tunnel_max_fields
  min: uk_data_road_tunnel_min_fields
  stddev: uk_data_road_tunnel_stddev_fields
  stddev_pop: uk_data_road_tunnel_stddev_pop_fields
  stddev_samp: uk_data_road_tunnel_stddev_samp_fields
  sum: uk_data_road_tunnel_sum_fields
  var_pop: uk_data_road_tunnel_var_pop_fields
  var_samp: uk_data_road_tunnel_var_samp_fields
  variance: uk_data_road_tunnel_variance_fields
}

"""aggregate avg on columns"""
type uk_data_road_tunnel_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.road_tunnel". All fields are combined with a logical 'AND'.
"""
input uk_data_road_tunnel_bool_exp {
  _and: [uk_data_road_tunnel_bool_exp!]
  _not: uk_data_road_tunnel_bool_exp
  _or: [uk_data_road_tunnel_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.road_tunnel"
"""
enum uk_data_road_tunnel_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  road_tunnel_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.road_tunnel"
"""
input uk_data_road_tunnel_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.road_tunnel"
"""
input uk_data_road_tunnel_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_road_tunnel_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_road_tunnel_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.road_tunnel"
"""
type uk_data_road_tunnel_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_road_tunnel!]!
}

"""
on_conflict condition type for table "uk_data.road_tunnel"
"""
input uk_data_road_tunnel_on_conflict {
  constraint: uk_data_road_tunnel_constraint!
  update_columns: [uk_data_road_tunnel_update_column!]! = []
  where: uk_data_road_tunnel_bool_exp
}

"""Ordering options when selecting data from "uk_data.road_tunnel"."""
input uk_data_road_tunnel_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.road_tunnel"""
input uk_data_road_tunnel_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.road_tunnel"
"""
enum uk_data_road_tunnel_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.road_tunnel"
"""
input uk_data_road_tunnel_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_road_tunnel_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_road_tunnel_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_road_tunnel_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_road_tunnel"
"""
input uk_data_road_tunnel_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_road_tunnel_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_road_tunnel_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_road_tunnel_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.road_tunnel"
"""
enum uk_data_road_tunnel_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_road_tunnel_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_road_tunnel_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_road_tunnel_set_input

  """filter the rows which have to be updated"""
  where: uk_data_road_tunnel_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_road_tunnel_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_road_tunnel_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_road_tunnel_variance_fields {
  feature_code: Float
  fid: Float
}

"""
update columns of table "uk_data.road"
"""
enum uk_data_road_update_column {
  """column name"""
  classification

  """column name"""
  distinctive_name

  """column name"""
  draw_level

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id

  """column name"""
  override

  """column name"""
  road_number
}

input uk_data_road_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_road_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_road_set_input

  """filter the rows which have to be updated"""
  where: uk_data_road_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_road_var_pop_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_road_var_samp_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_road_variance_fields {
  draw_level: Float
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.roundabout"
"""
type uk_data_roundabout {
  classification: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.roundabout"
"""
type uk_data_roundabout_aggregate {
  aggregate: uk_data_roundabout_aggregate_fields
  nodes: [uk_data_roundabout!]!
}

"""
aggregate fields of "uk_data.roundabout"
"""
type uk_data_roundabout_aggregate_fields {
  avg: uk_data_roundabout_avg_fields
  count(columns: [uk_data_roundabout_select_column!], distinct: Boolean): Int!
  max: uk_data_roundabout_max_fields
  min: uk_data_roundabout_min_fields
  stddev: uk_data_roundabout_stddev_fields
  stddev_pop: uk_data_roundabout_stddev_pop_fields
  stddev_samp: uk_data_roundabout_stddev_samp_fields
  sum: uk_data_roundabout_sum_fields
  var_pop: uk_data_roundabout_var_pop_fields
  var_samp: uk_data_roundabout_var_samp_fields
  variance: uk_data_roundabout_variance_fields
}

"""aggregate avg on columns"""
type uk_data_roundabout_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.roundabout". All fields are combined with a logical 'AND'.
"""
input uk_data_roundabout_bool_exp {
  _and: [uk_data_roundabout_bool_exp!]
  _not: uk_data_roundabout_bool_exp
  _or: [uk_data_roundabout_bool_exp!]
  classification: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.roundabout"
"""
enum uk_data_roundabout_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  roundabout_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.roundabout"
"""
input uk_data_roundabout_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.roundabout"
"""
input uk_data_roundabout_insert_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_roundabout_max_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_roundabout_min_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.roundabout"
"""
type uk_data_roundabout_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_roundabout!]!
}

"""
on_conflict condition type for table "uk_data.roundabout"
"""
input uk_data_roundabout_on_conflict {
  constraint: uk_data_roundabout_constraint!
  update_columns: [uk_data_roundabout_update_column!]! = []
  where: uk_data_roundabout_bool_exp
}

"""Ordering options when selecting data from "uk_data.roundabout"."""
input uk_data_roundabout_order_by {
  classification: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.roundabout"""
input uk_data_roundabout_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.roundabout"
"""
enum uk_data_roundabout_select_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.roundabout"
"""
input uk_data_roundabout_set_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_roundabout_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_roundabout_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_roundabout_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_roundabout"
"""
input uk_data_roundabout_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_roundabout_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_roundabout_stream_cursor_value_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_roundabout_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.roundabout"
"""
enum uk_data_roundabout_update_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_roundabout_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_roundabout_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_roundabout_set_input

  """filter the rows which have to be updated"""
  where: uk_data_roundabout_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_roundabout_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_roundabout_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_roundabout_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.schools"
"""
type uk_data_schools {
  geolocation: geometry
  independent_schools(
    """JSON select path"""
    path: String
  ): jsonb
  postcode: String!
  public_schools(
    """JSON select path"""
    path: String
  ): jsonb
  state_average_score: numeric
  state_rating: String
}

"""
aggregated selection of "uk_data.schools"
"""
type uk_data_schools_aggregate {
  aggregate: uk_data_schools_aggregate_fields
  nodes: [uk_data_schools!]!
}

"""
aggregate fields of "uk_data.schools"
"""
type uk_data_schools_aggregate_fields {
  avg: uk_data_schools_avg_fields
  count(columns: [uk_data_schools_select_column!], distinct: Boolean): Int!
  max: uk_data_schools_max_fields
  min: uk_data_schools_min_fields
  stddev: uk_data_schools_stddev_fields
  stddev_pop: uk_data_schools_stddev_pop_fields
  stddev_samp: uk_data_schools_stddev_samp_fields
  sum: uk_data_schools_sum_fields
  var_pop: uk_data_schools_var_pop_fields
  var_samp: uk_data_schools_var_samp_fields
  variance: uk_data_schools_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input uk_data_schools_append_input {
  independent_schools: jsonb
  public_schools: jsonb
}

"""aggregate avg on columns"""
type uk_data_schools_avg_fields {
  state_average_score: Float
}

"""
Boolean expression to filter rows from the table "uk_data.schools". All fields are combined with a logical 'AND'.
"""
input uk_data_schools_bool_exp {
  _and: [uk_data_schools_bool_exp!]
  _not: uk_data_schools_bool_exp
  _or: [uk_data_schools_bool_exp!]
  geolocation: geometry_comparison_exp
  independent_schools: jsonb_comparison_exp
  postcode: String_comparison_exp
  public_schools: jsonb_comparison_exp
  state_average_score: numeric_comparison_exp
  state_rating: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.schools"
"""
enum uk_data_schools_constraint {
  """
  unique or primary key constraint on columns "postcode"
  """
  schools_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input uk_data_schools_delete_at_path_input {
  independent_schools: [String!]
  public_schools: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input uk_data_schools_delete_elem_input {
  independent_schools: Int
  public_schools: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input uk_data_schools_delete_key_input {
  independent_schools: String
  public_schools: String
}

"""
input type for incrementing numeric columns in table "uk_data.schools"
"""
input uk_data_schools_inc_input {
  state_average_score: numeric
}

"""
input type for inserting data into table "uk_data.schools"
"""
input uk_data_schools_insert_input {
  geolocation: geometry
  independent_schools: jsonb
  postcode: String
  public_schools: jsonb
  state_average_score: numeric
  state_rating: String
}

"""aggregate max on columns"""
type uk_data_schools_max_fields {
  postcode: String
  state_average_score: numeric
  state_rating: String
}

"""aggregate min on columns"""
type uk_data_schools_min_fields {
  postcode: String
  state_average_score: numeric
  state_rating: String
}

"""
response of any mutation on the table "uk_data.schools"
"""
type uk_data_schools_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_schools!]!
}

"""
on_conflict condition type for table "uk_data.schools"
"""
input uk_data_schools_on_conflict {
  constraint: uk_data_schools_constraint!
  update_columns: [uk_data_schools_update_column!]! = []
  where: uk_data_schools_bool_exp
}

"""Ordering options when selecting data from "uk_data.schools"."""
input uk_data_schools_order_by {
  geolocation: order_by
  independent_schools: order_by
  postcode: order_by
  public_schools: order_by
  state_average_score: order_by
  state_rating: order_by
}

"""primary key columns input for table: uk_data.schools"""
input uk_data_schools_pk_columns_input {
  postcode: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input uk_data_schools_prepend_input {
  independent_schools: jsonb
  public_schools: jsonb
}

"""
select columns of table "uk_data.schools"
"""
enum uk_data_schools_select_column {
  """column name"""
  geolocation

  """column name"""
  independent_schools

  """column name"""
  postcode

  """column name"""
  public_schools

  """column name"""
  state_average_score

  """column name"""
  state_rating
}

"""
input type for updating data in table "uk_data.schools"
"""
input uk_data_schools_set_input {
  geolocation: geometry
  independent_schools: jsonb
  postcode: String
  public_schools: jsonb
  state_average_score: numeric
  state_rating: String
}

"""aggregate stddev on columns"""
type uk_data_schools_stddev_fields {
  state_average_score: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_schools_stddev_pop_fields {
  state_average_score: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_schools_stddev_samp_fields {
  state_average_score: Float
}

"""
Streaming cursor of the table "uk_data_schools"
"""
input uk_data_schools_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_schools_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_schools_stream_cursor_value_input {
  geolocation: geometry
  independent_schools: jsonb
  postcode: String
  public_schools: jsonb
  state_average_score: numeric
  state_rating: String
}

"""aggregate sum on columns"""
type uk_data_schools_sum_fields {
  state_average_score: numeric
}

"""
update columns of table "uk_data.schools"
"""
enum uk_data_schools_update_column {
  """column name"""
  geolocation

  """column name"""
  independent_schools

  """column name"""
  postcode

  """column name"""
  public_schools

  """column name"""
  state_average_score

  """column name"""
  state_rating
}

input uk_data_schools_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: uk_data_schools_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: uk_data_schools_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: uk_data_schools_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: uk_data_schools_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_schools_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: uk_data_schools_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_schools_set_input

  """filter the rows which have to be updated"""
  where: uk_data_schools_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_schools_var_pop_fields {
  state_average_score: Float
}

"""aggregate var_samp on columns"""
type uk_data_schools_var_samp_fields {
  state_average_score: Float
}

"""aggregate variance on columns"""
type uk_data_schools_variance_fields {
  state_average_score: Float
}

input uk_data_sites_nearby_within_radius_air_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_attraction_and_leisure_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_cultural_facility_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_education_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_emergency_service_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_medical_care_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_religious_buildings_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_retail_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_road_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_sports_or_exercise_facility_args {
  lat: float8
  lon: float8
  radius: float8
}

input uk_data_sites_nearby_within_radius_water_transport_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.street_crimes"
"""
type uk_data_street_crimes {
  context: String
  crime_id: String!
  crime_type: String!
  falls_within: String
  geolocation: geography
  last_outcome_category: String
  last_update: timestamp
  latitude: float8!
  location: String
  longitude: float8!
  lsoa_code: String
  lsoa_name: String
  month: String!
  reported_by: String
}

"""
aggregated selection of "uk_data.street_crimes"
"""
type uk_data_street_crimes_aggregate {
  aggregate: uk_data_street_crimes_aggregate_fields
  nodes: [uk_data_street_crimes!]!
}

"""
aggregate fields of "uk_data.street_crimes"
"""
type uk_data_street_crimes_aggregate_fields {
  avg: uk_data_street_crimes_avg_fields
  count(columns: [uk_data_street_crimes_select_column!], distinct: Boolean): Int!
  max: uk_data_street_crimes_max_fields
  min: uk_data_street_crimes_min_fields
  stddev: uk_data_street_crimes_stddev_fields
  stddev_pop: uk_data_street_crimes_stddev_pop_fields
  stddev_samp: uk_data_street_crimes_stddev_samp_fields
  sum: uk_data_street_crimes_sum_fields
  var_pop: uk_data_street_crimes_var_pop_fields
  var_samp: uk_data_street_crimes_var_samp_fields
  variance: uk_data_street_crimes_variance_fields
}

"""aggregate avg on columns"""
type uk_data_street_crimes_avg_fields {
  latitude: Float
  longitude: Float
}

"""
Boolean expression to filter rows from the table "uk_data.street_crimes". All fields are combined with a logical 'AND'.
"""
input uk_data_street_crimes_bool_exp {
  _and: [uk_data_street_crimes_bool_exp!]
  _not: uk_data_street_crimes_bool_exp
  _or: [uk_data_street_crimes_bool_exp!]
  context: String_comparison_exp
  crime_id: String_comparison_exp
  crime_type: String_comparison_exp
  falls_within: String_comparison_exp
  geolocation: geography_comparison_exp
  last_outcome_category: String_comparison_exp
  last_update: timestamp_comparison_exp
  latitude: float8_comparison_exp
  location: String_comparison_exp
  longitude: float8_comparison_exp
  lsoa_code: String_comparison_exp
  lsoa_name: String_comparison_exp
  month: String_comparison_exp
  reported_by: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.street_crimes"
"""
enum uk_data_street_crimes_constraint {
  """
  unique or primary key constraint on columns "crime_id"
  """
  street_crimes_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.street_crimes"
"""
input uk_data_street_crimes_inc_input {
  latitude: float8
  longitude: float8
}

"""
input type for inserting data into table "uk_data.street_crimes"
"""
input uk_data_street_crimes_insert_input {
  context: String
  crime_id: String
  crime_type: String
  falls_within: String
  geolocation: geography
  last_outcome_category: String
  last_update: timestamp
  latitude: float8
  location: String
  longitude: float8
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate max on columns"""
type uk_data_street_crimes_max_fields {
  context: String
  crime_id: String
  crime_type: String
  falls_within: String
  last_outcome_category: String
  last_update: timestamp
  latitude: float8
  location: String
  longitude: float8
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate min on columns"""
type uk_data_street_crimes_min_fields {
  context: String
  crime_id: String
  crime_type: String
  falls_within: String
  last_outcome_category: String
  last_update: timestamp
  latitude: float8
  location: String
  longitude: float8
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""
response of any mutation on the table "uk_data.street_crimes"
"""
type uk_data_street_crimes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_street_crimes!]!
}

"""
on_conflict condition type for table "uk_data.street_crimes"
"""
input uk_data_street_crimes_on_conflict {
  constraint: uk_data_street_crimes_constraint!
  update_columns: [uk_data_street_crimes_update_column!]! = []
  where: uk_data_street_crimes_bool_exp
}

"""Ordering options when selecting data from "uk_data.street_crimes"."""
input uk_data_street_crimes_order_by {
  context: order_by
  crime_id: order_by
  crime_type: order_by
  falls_within: order_by
  geolocation: order_by
  last_outcome_category: order_by
  last_update: order_by
  latitude: order_by
  location: order_by
  longitude: order_by
  lsoa_code: order_by
  lsoa_name: order_by
  month: order_by
  reported_by: order_by
}

"""primary key columns input for table: uk_data.street_crimes"""
input uk_data_street_crimes_pk_columns_input {
  crime_id: String!
}

"""
select columns of table "uk_data.street_crimes"
"""
enum uk_data_street_crimes_select_column {
  """column name"""
  context

  """column name"""
  crime_id

  """column name"""
  crime_type

  """column name"""
  falls_within

  """column name"""
  geolocation

  """column name"""
  last_outcome_category

  """column name"""
  last_update

  """column name"""
  latitude

  """column name"""
  location

  """column name"""
  longitude

  """column name"""
  lsoa_code

  """column name"""
  lsoa_name

  """column name"""
  month

  """column name"""
  reported_by
}

"""
input type for updating data in table "uk_data.street_crimes"
"""
input uk_data_street_crimes_set_input {
  context: String
  crime_id: String
  crime_type: String
  falls_within: String
  geolocation: geography
  last_outcome_category: String
  last_update: timestamp
  latitude: float8
  location: String
  longitude: float8
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate stddev on columns"""
type uk_data_street_crimes_stddev_fields {
  latitude: Float
  longitude: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_street_crimes_stddev_pop_fields {
  latitude: Float
  longitude: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_street_crimes_stddev_samp_fields {
  latitude: Float
  longitude: Float
}

"""
Streaming cursor of the table "uk_data_street_crimes"
"""
input uk_data_street_crimes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_street_crimes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_street_crimes_stream_cursor_value_input {
  context: String
  crime_id: String
  crime_type: String
  falls_within: String
  geolocation: geography
  last_outcome_category: String
  last_update: timestamp
  latitude: float8
  location: String
  longitude: float8
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate sum on columns"""
type uk_data_street_crimes_sum_fields {
  latitude: float8
  longitude: float8
}

"""
update columns of table "uk_data.street_crimes"
"""
enum uk_data_street_crimes_update_column {
  """column name"""
  context

  """column name"""
  crime_id

  """column name"""
  crime_type

  """column name"""
  falls_within

  """column name"""
  geolocation

  """column name"""
  last_outcome_category

  """column name"""
  last_update

  """column name"""
  latitude

  """column name"""
  location

  """column name"""
  longitude

  """column name"""
  lsoa_code

  """column name"""
  lsoa_name

  """column name"""
  month

  """column name"""
  reported_by
}

input uk_data_street_crimes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_street_crimes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_street_crimes_set_input

  """filter the rows which have to be updated"""
  where: uk_data_street_crimes_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_street_crimes_var_pop_fields {
  latitude: Float
  longitude: Float
}

"""aggregate var_samp on columns"""
type uk_data_street_crimes_var_samp_fields {
  latitude: Float
  longitude: Float
}

"""aggregate variance on columns"""
type uk_data_street_crimes_variance_fields {
  latitude: Float
  longitude: Float
}

"""
columns and relationships of "uk_data.street_crimes_with_distance"
"""
type uk_data_street_crimes_with_distance {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""
aggregated selection of "uk_data.street_crimes_with_distance"
"""
type uk_data_street_crimes_with_distance_aggregate {
  aggregate: uk_data_street_crimes_with_distance_aggregate_fields
  nodes: [uk_data_street_crimes_with_distance!]!
}

"""
aggregate fields of "uk_data.street_crimes_with_distance"
"""
type uk_data_street_crimes_with_distance_aggregate_fields {
  avg: uk_data_street_crimes_with_distance_avg_fields
  count(columns: [uk_data_street_crimes_with_distance_select_column!], distinct: Boolean): Int!
  max: uk_data_street_crimes_with_distance_max_fields
  min: uk_data_street_crimes_with_distance_min_fields
  stddev: uk_data_street_crimes_with_distance_stddev_fields
  stddev_pop: uk_data_street_crimes_with_distance_stddev_pop_fields
  stddev_samp: uk_data_street_crimes_with_distance_stddev_samp_fields
  sum: uk_data_street_crimes_with_distance_sum_fields
  var_pop: uk_data_street_crimes_with_distance_var_pop_fields
  var_samp: uk_data_street_crimes_with_distance_var_samp_fields
  variance: uk_data_street_crimes_with_distance_variance_fields
}

"""aggregate avg on columns"""
type uk_data_street_crimes_with_distance_avg_fields {
  distance: Float
}

"""
Boolean expression to filter rows from the table "uk_data.street_crimes_with_distance". All fields are combined with a logical 'AND'.
"""
input uk_data_street_crimes_with_distance_bool_exp {
  _and: [uk_data_street_crimes_with_distance_bool_exp!]
  _not: uk_data_street_crimes_with_distance_bool_exp
  _or: [uk_data_street_crimes_with_distance_bool_exp!]
  context: String_comparison_exp
  crime_id: String_comparison_exp
  crime_type: String_comparison_exp
  distance: float8_comparison_exp
  falls_within: String_comparison_exp
  last_outcome_category: String_comparison_exp
  last_update: String_comparison_exp
  location: String_comparison_exp
  lsoa_code: String_comparison_exp
  lsoa_name: String_comparison_exp
  month: String_comparison_exp
  reported_by: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "uk_data.street_crimes_with_distance"
"""
input uk_data_street_crimes_with_distance_inc_input {
  distance: float8
}

"""
input type for inserting data into table "uk_data.street_crimes_with_distance"
"""
input uk_data_street_crimes_with_distance_insert_input {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate max on columns"""
type uk_data_street_crimes_with_distance_max_fields {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate min on columns"""
type uk_data_street_crimes_with_distance_min_fields {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""
response of any mutation on the table "uk_data.street_crimes_with_distance"
"""
type uk_data_street_crimes_with_distance_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_street_crimes_with_distance!]!
}

"""
Ordering options when selecting data from "uk_data.street_crimes_with_distance".
"""
input uk_data_street_crimes_with_distance_order_by {
  context: order_by
  crime_id: order_by
  crime_type: order_by
  distance: order_by
  falls_within: order_by
  last_outcome_category: order_by
  last_update: order_by
  location: order_by
  lsoa_code: order_by
  lsoa_name: order_by
  month: order_by
  reported_by: order_by
}

"""
select columns of table "uk_data.street_crimes_with_distance"
"""
enum uk_data_street_crimes_with_distance_select_column {
  """column name"""
  context

  """column name"""
  crime_id

  """column name"""
  crime_type

  """column name"""
  distance

  """column name"""
  falls_within

  """column name"""
  last_outcome_category

  """column name"""
  last_update

  """column name"""
  location

  """column name"""
  lsoa_code

  """column name"""
  lsoa_name

  """column name"""
  month

  """column name"""
  reported_by
}

"""
input type for updating data in table "uk_data.street_crimes_with_distance"
"""
input uk_data_street_crimes_with_distance_set_input {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate stddev on columns"""
type uk_data_street_crimes_with_distance_stddev_fields {
  distance: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_street_crimes_with_distance_stddev_pop_fields {
  distance: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_street_crimes_with_distance_stddev_samp_fields {
  distance: Float
}

"""
Streaming cursor of the table "uk_data_street_crimes_with_distance"
"""
input uk_data_street_crimes_with_distance_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_street_crimes_with_distance_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_street_crimes_with_distance_stream_cursor_value_input {
  context: String
  crime_id: String
  crime_type: String
  distance: float8
  falls_within: String
  last_outcome_category: String
  last_update: String
  location: String
  lsoa_code: String
  lsoa_name: String
  month: String
  reported_by: String
}

"""aggregate sum on columns"""
type uk_data_street_crimes_with_distance_sum_fields {
  distance: float8
}

input uk_data_street_crimes_with_distance_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_street_crimes_with_distance_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_street_crimes_with_distance_set_input

  """filter the rows which have to be updated"""
  where: uk_data_street_crimes_with_distance_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_street_crimes_with_distance_var_pop_fields {
  distance: Float
}

"""aggregate var_samp on columns"""
type uk_data_street_crimes_with_distance_var_samp_fields {
  distance: Float
}

"""aggregate variance on columns"""
type uk_data_street_crimes_with_distance_variance_fields {
  distance: Float
}

input uk_data_street_crimes_within_radius_args {
  lat: float8
  lon: float8
  radius: float8
}

"""
columns and relationships of "uk_data.surface_water_area"
"""
type uk_data_surface_water_area {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.surface_water_area"
"""
type uk_data_surface_water_area_aggregate {
  aggregate: uk_data_surface_water_area_aggregate_fields
  nodes: [uk_data_surface_water_area!]!
}

"""
aggregate fields of "uk_data.surface_water_area"
"""
type uk_data_surface_water_area_aggregate_fields {
  avg: uk_data_surface_water_area_avg_fields
  count(columns: [uk_data_surface_water_area_select_column!], distinct: Boolean): Int!
  max: uk_data_surface_water_area_max_fields
  min: uk_data_surface_water_area_min_fields
  stddev: uk_data_surface_water_area_stddev_fields
  stddev_pop: uk_data_surface_water_area_stddev_pop_fields
  stddev_samp: uk_data_surface_water_area_stddev_samp_fields
  sum: uk_data_surface_water_area_sum_fields
  var_pop: uk_data_surface_water_area_var_pop_fields
  var_samp: uk_data_surface_water_area_var_samp_fields
  variance: uk_data_surface_water_area_variance_fields
}

"""aggregate avg on columns"""
type uk_data_surface_water_area_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.surface_water_area". All fields are combined with a logical 'AND'.
"""
input uk_data_surface_water_area_bool_exp {
  _and: [uk_data_surface_water_area_bool_exp!]
  _not: uk_data_surface_water_area_bool_exp
  _or: [uk_data_surface_water_area_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.surface_water_area"
"""
enum uk_data_surface_water_area_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  surface_water_area_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.surface_water_area"
"""
input uk_data_surface_water_area_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.surface_water_area"
"""
input uk_data_surface_water_area_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_surface_water_area_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_surface_water_area_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.surface_water_area"
"""
type uk_data_surface_water_area_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_surface_water_area!]!
}

"""
on_conflict condition type for table "uk_data.surface_water_area"
"""
input uk_data_surface_water_area_on_conflict {
  constraint: uk_data_surface_water_area_constraint!
  update_columns: [uk_data_surface_water_area_update_column!]! = []
  where: uk_data_surface_water_area_bool_exp
}

"""
Ordering options when selecting data from "uk_data.surface_water_area".
"""
input uk_data_surface_water_area_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.surface_water_area"""
input uk_data_surface_water_area_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.surface_water_area"
"""
enum uk_data_surface_water_area_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.surface_water_area"
"""
input uk_data_surface_water_area_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_surface_water_area_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_surface_water_area_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_surface_water_area_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_surface_water_area"
"""
input uk_data_surface_water_area_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_surface_water_area_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_surface_water_area_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_surface_water_area_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.surface_water_area"
"""
enum uk_data_surface_water_area_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_surface_water_area_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_surface_water_area_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_surface_water_area_set_input

  """filter the rows which have to be updated"""
  where: uk_data_surface_water_area_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_surface_water_area_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_surface_water_area_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_surface_water_area_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.surface_water_line"
"""
type uk_data_surface_water_line {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.surface_water_line"
"""
type uk_data_surface_water_line_aggregate {
  aggregate: uk_data_surface_water_line_aggregate_fields
  nodes: [uk_data_surface_water_line!]!
}

"""
aggregate fields of "uk_data.surface_water_line"
"""
type uk_data_surface_water_line_aggregate_fields {
  avg: uk_data_surface_water_line_avg_fields
  count(columns: [uk_data_surface_water_line_select_column!], distinct: Boolean): Int!
  max: uk_data_surface_water_line_max_fields
  min: uk_data_surface_water_line_min_fields
  stddev: uk_data_surface_water_line_stddev_fields
  stddev_pop: uk_data_surface_water_line_stddev_pop_fields
  stddev_samp: uk_data_surface_water_line_stddev_samp_fields
  sum: uk_data_surface_water_line_sum_fields
  var_pop: uk_data_surface_water_line_var_pop_fields
  var_samp: uk_data_surface_water_line_var_samp_fields
  variance: uk_data_surface_water_line_variance_fields
}

"""aggregate avg on columns"""
type uk_data_surface_water_line_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.surface_water_line". All fields are combined with a logical 'AND'.
"""
input uk_data_surface_water_line_bool_exp {
  _and: [uk_data_surface_water_line_bool_exp!]
  _not: uk_data_surface_water_line_bool_exp
  _or: [uk_data_surface_water_line_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.surface_water_line"
"""
enum uk_data_surface_water_line_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  surface_water_line_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.surface_water_line"
"""
input uk_data_surface_water_line_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.surface_water_line"
"""
input uk_data_surface_water_line_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_surface_water_line_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_surface_water_line_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.surface_water_line"
"""
type uk_data_surface_water_line_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_surface_water_line!]!
}

"""
on_conflict condition type for table "uk_data.surface_water_line"
"""
input uk_data_surface_water_line_on_conflict {
  constraint: uk_data_surface_water_line_constraint!
  update_columns: [uk_data_surface_water_line_update_column!]! = []
  where: uk_data_surface_water_line_bool_exp
}

"""
Ordering options when selecting data from "uk_data.surface_water_line".
"""
input uk_data_surface_water_line_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.surface_water_line"""
input uk_data_surface_water_line_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.surface_water_line"
"""
enum uk_data_surface_water_line_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.surface_water_line"
"""
input uk_data_surface_water_line_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_surface_water_line_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_surface_water_line_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_surface_water_line_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_surface_water_line"
"""
input uk_data_surface_water_line_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_surface_water_line_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_surface_water_line_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_surface_water_line_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.surface_water_line"
"""
enum uk_data_surface_water_line_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_surface_water_line_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_surface_water_line_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_surface_water_line_set_input

  """filter the rows which have to be updated"""
  where: uk_data_surface_water_line_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_surface_water_line_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_surface_water_line_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_surface_water_line_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.tidal_boundary"
"""
type uk_data_tidal_boundary {
  classification: String
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.tidal_boundary"
"""
type uk_data_tidal_boundary_aggregate {
  aggregate: uk_data_tidal_boundary_aggregate_fields
  nodes: [uk_data_tidal_boundary!]!
}

"""
aggregate fields of "uk_data.tidal_boundary"
"""
type uk_data_tidal_boundary_aggregate_fields {
  avg: uk_data_tidal_boundary_avg_fields
  count(columns: [uk_data_tidal_boundary_select_column!], distinct: Boolean): Int!
  max: uk_data_tidal_boundary_max_fields
  min: uk_data_tidal_boundary_min_fields
  stddev: uk_data_tidal_boundary_stddev_fields
  stddev_pop: uk_data_tidal_boundary_stddev_pop_fields
  stddev_samp: uk_data_tidal_boundary_stddev_samp_fields
  sum: uk_data_tidal_boundary_sum_fields
  var_pop: uk_data_tidal_boundary_var_pop_fields
  var_samp: uk_data_tidal_boundary_var_samp_fields
  variance: uk_data_tidal_boundary_variance_fields
}

"""aggregate avg on columns"""
type uk_data_tidal_boundary_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.tidal_boundary". All fields are combined with a logical 'AND'.
"""
input uk_data_tidal_boundary_bool_exp {
  _and: [uk_data_tidal_boundary_bool_exp!]
  _not: uk_data_tidal_boundary_bool_exp
  _or: [uk_data_tidal_boundary_bool_exp!]
  classification: String_comparison_exp
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.tidal_boundary"
"""
enum uk_data_tidal_boundary_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  tidal_boundary_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.tidal_boundary"
"""
input uk_data_tidal_boundary_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.tidal_boundary"
"""
input uk_data_tidal_boundary_insert_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_tidal_boundary_max_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_tidal_boundary_min_fields {
  classification: String
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.tidal_boundary"
"""
type uk_data_tidal_boundary_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_tidal_boundary!]!
}

"""
on_conflict condition type for table "uk_data.tidal_boundary"
"""
input uk_data_tidal_boundary_on_conflict {
  constraint: uk_data_tidal_boundary_constraint!
  update_columns: [uk_data_tidal_boundary_update_column!]! = []
  where: uk_data_tidal_boundary_bool_exp
}

"""Ordering options when selecting data from "uk_data.tidal_boundary"."""
input uk_data_tidal_boundary_order_by {
  classification: order_by
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.tidal_boundary"""
input uk_data_tidal_boundary_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.tidal_boundary"
"""
enum uk_data_tidal_boundary_select_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.tidal_boundary"
"""
input uk_data_tidal_boundary_set_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_tidal_boundary_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_tidal_boundary_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_tidal_boundary_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_tidal_boundary"
"""
input uk_data_tidal_boundary_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_tidal_boundary_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_tidal_boundary_stream_cursor_value_input {
  classification: String
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_tidal_boundary_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.tidal_boundary"
"""
enum uk_data_tidal_boundary_update_column {
  """column name"""
  classification

  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_tidal_boundary_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_tidal_boundary_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_tidal_boundary_set_input

  """filter the rows which have to be updated"""
  where: uk_data_tidal_boundary_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_tidal_boundary_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_tidal_boundary_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_tidal_boundary_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.tidal_water"
"""
type uk_data_tidal_water {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.tidal_water"
"""
type uk_data_tidal_water_aggregate {
  aggregate: uk_data_tidal_water_aggregate_fields
  nodes: [uk_data_tidal_water!]!
}

"""
aggregate fields of "uk_data.tidal_water"
"""
type uk_data_tidal_water_aggregate_fields {
  avg: uk_data_tidal_water_avg_fields
  count(columns: [uk_data_tidal_water_select_column!], distinct: Boolean): Int!
  max: uk_data_tidal_water_max_fields
  min: uk_data_tidal_water_min_fields
  stddev: uk_data_tidal_water_stddev_fields
  stddev_pop: uk_data_tidal_water_stddev_pop_fields
  stddev_samp: uk_data_tidal_water_stddev_samp_fields
  sum: uk_data_tidal_water_sum_fields
  var_pop: uk_data_tidal_water_var_pop_fields
  var_samp: uk_data_tidal_water_var_samp_fields
  variance: uk_data_tidal_water_variance_fields
}

"""aggregate avg on columns"""
type uk_data_tidal_water_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.tidal_water". All fields are combined with a logical 'AND'.
"""
input uk_data_tidal_water_bool_exp {
  _and: [uk_data_tidal_water_bool_exp!]
  _not: uk_data_tidal_water_bool_exp
  _or: [uk_data_tidal_water_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.tidal_water"
"""
enum uk_data_tidal_water_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  tidal_water_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.tidal_water"
"""
input uk_data_tidal_water_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.tidal_water"
"""
input uk_data_tidal_water_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_tidal_water_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_tidal_water_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.tidal_water"
"""
type uk_data_tidal_water_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_tidal_water!]!
}

"""
on_conflict condition type for table "uk_data.tidal_water"
"""
input uk_data_tidal_water_on_conflict {
  constraint: uk_data_tidal_water_constraint!
  update_columns: [uk_data_tidal_water_update_column!]! = []
  where: uk_data_tidal_water_bool_exp
}

"""Ordering options when selecting data from "uk_data.tidal_water"."""
input uk_data_tidal_water_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.tidal_water"""
input uk_data_tidal_water_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.tidal_water"
"""
enum uk_data_tidal_water_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.tidal_water"
"""
input uk_data_tidal_water_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_tidal_water_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_tidal_water_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_tidal_water_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_tidal_water"
"""
input uk_data_tidal_water_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_tidal_water_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_tidal_water_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_tidal_water_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.tidal_water"
"""
enum uk_data_tidal_water_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_tidal_water_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_tidal_water_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_tidal_water_set_input

  """filter the rows which have to be updated"""
  where: uk_data_tidal_water_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_tidal_water_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_tidal_water_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_tidal_water_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.woodland"
"""
type uk_data_woodland {
  feature_code: Int
  fid: Int!
  geometry: geometry
  id: String
}

"""
aggregated selection of "uk_data.woodland"
"""
type uk_data_woodland_aggregate {
  aggregate: uk_data_woodland_aggregate_fields
  nodes: [uk_data_woodland!]!
}

"""
aggregate fields of "uk_data.woodland"
"""
type uk_data_woodland_aggregate_fields {
  avg: uk_data_woodland_avg_fields
  count(columns: [uk_data_woodland_select_column!], distinct: Boolean): Int!
  max: uk_data_woodland_max_fields
  min: uk_data_woodland_min_fields
  stddev: uk_data_woodland_stddev_fields
  stddev_pop: uk_data_woodland_stddev_pop_fields
  stddev_samp: uk_data_woodland_stddev_samp_fields
  sum: uk_data_woodland_sum_fields
  var_pop: uk_data_woodland_var_pop_fields
  var_samp: uk_data_woodland_var_samp_fields
  variance: uk_data_woodland_variance_fields
}

"""aggregate avg on columns"""
type uk_data_woodland_avg_fields {
  feature_code: Float
  fid: Float
}

"""
Boolean expression to filter rows from the table "uk_data.woodland". All fields are combined with a logical 'AND'.
"""
input uk_data_woodland_bool_exp {
  _and: [uk_data_woodland_bool_exp!]
  _not: uk_data_woodland_bool_exp
  _or: [uk_data_woodland_bool_exp!]
  feature_code: Int_comparison_exp
  fid: Int_comparison_exp
  geometry: geometry_comparison_exp
  id: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.woodland"
"""
enum uk_data_woodland_constraint {
  """
  unique or primary key constraint on columns "fid"
  """
  woodland_pkey
}

"""
input type for incrementing numeric columns in table "uk_data.woodland"
"""
input uk_data_woodland_inc_input {
  feature_code: Int
  fid: Int
}

"""
input type for inserting data into table "uk_data.woodland"
"""
input uk_data_woodland_insert_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate max on columns"""
type uk_data_woodland_max_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""aggregate min on columns"""
type uk_data_woodland_min_fields {
  feature_code: Int
  fid: Int
  id: String
}

"""
response of any mutation on the table "uk_data.woodland"
"""
type uk_data_woodland_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_woodland!]!
}

"""
on_conflict condition type for table "uk_data.woodland"
"""
input uk_data_woodland_on_conflict {
  constraint: uk_data_woodland_constraint!
  update_columns: [uk_data_woodland_update_column!]! = []
  where: uk_data_woodland_bool_exp
}

"""Ordering options when selecting data from "uk_data.woodland"."""
input uk_data_woodland_order_by {
  feature_code: order_by
  fid: order_by
  geometry: order_by
  id: order_by
}

"""primary key columns input for table: uk_data.woodland"""
input uk_data_woodland_pk_columns_input {
  fid: Int!
}

"""
select columns of table "uk_data.woodland"
"""
enum uk_data_woodland_select_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

"""
input type for updating data in table "uk_data.woodland"
"""
input uk_data_woodland_set_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate stddev on columns"""
type uk_data_woodland_stddev_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_pop on columns"""
type uk_data_woodland_stddev_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate stddev_samp on columns"""
type uk_data_woodland_stddev_samp_fields {
  feature_code: Float
  fid: Float
}

"""
Streaming cursor of the table "uk_data_woodland"
"""
input uk_data_woodland_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_woodland_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_woodland_stream_cursor_value_input {
  feature_code: Int
  fid: Int
  geometry: geometry
  id: String
}

"""aggregate sum on columns"""
type uk_data_woodland_sum_fields {
  feature_code: Int
  fid: Int
}

"""
update columns of table "uk_data.woodland"
"""
enum uk_data_woodland_update_column {
  """column name"""
  feature_code

  """column name"""
  fid

  """column name"""
  geometry

  """column name"""
  id
}

input uk_data_woodland_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: uk_data_woodland_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_woodland_set_input

  """filter the rows which have to be updated"""
  where: uk_data_woodland_bool_exp!
}

"""aggregate var_pop on columns"""
type uk_data_woodland_var_pop_fields {
  feature_code: Float
  fid: Float
}

"""aggregate var_samp on columns"""
type uk_data_woodland_var_samp_fields {
  feature_code: Float
  fid: Float
}

"""aggregate variance on columns"""
type uk_data_woodland_variance_fields {
  feature_code: Float
  fid: Float
}

"""
columns and relationships of "uk_data.yield_stats"
"""
type uk_data_yield_stats {
  gross_yield: String
  last_update: timestamp
  postcode: String!
}

"""
aggregated selection of "uk_data.yield_stats"
"""
type uk_data_yield_stats_aggregate {
  aggregate: uk_data_yield_stats_aggregate_fields
  nodes: [uk_data_yield_stats!]!
}

"""
aggregate fields of "uk_data.yield_stats"
"""
type uk_data_yield_stats_aggregate_fields {
  count(columns: [uk_data_yield_stats_select_column!], distinct: Boolean): Int!
  max: uk_data_yield_stats_max_fields
  min: uk_data_yield_stats_min_fields
}

"""
Boolean expression to filter rows from the table "uk_data.yield_stats". All fields are combined with a logical 'AND'.
"""
input uk_data_yield_stats_bool_exp {
  _and: [uk_data_yield_stats_bool_exp!]
  _not: uk_data_yield_stats_bool_exp
  _or: [uk_data_yield_stats_bool_exp!]
  gross_yield: String_comparison_exp
  last_update: timestamp_comparison_exp
  postcode: String_comparison_exp
}

"""
unique or primary key constraints on table "uk_data.yield_stats"
"""
enum uk_data_yield_stats_constraint {
  """
  unique or primary key constraint on columns "postcode"
  """
  yield_stats_pkey
}

"""
input type for inserting data into table "uk_data.yield_stats"
"""
input uk_data_yield_stats_insert_input {
  gross_yield: String
  last_update: timestamp
  postcode: String
}

"""aggregate max on columns"""
type uk_data_yield_stats_max_fields {
  gross_yield: String
  last_update: timestamp
  postcode: String
}

"""aggregate min on columns"""
type uk_data_yield_stats_min_fields {
  gross_yield: String
  last_update: timestamp
  postcode: String
}

"""
response of any mutation on the table "uk_data.yield_stats"
"""
type uk_data_yield_stats_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [uk_data_yield_stats!]!
}

"""
on_conflict condition type for table "uk_data.yield_stats"
"""
input uk_data_yield_stats_on_conflict {
  constraint: uk_data_yield_stats_constraint!
  update_columns: [uk_data_yield_stats_update_column!]! = []
  where: uk_data_yield_stats_bool_exp
}

"""Ordering options when selecting data from "uk_data.yield_stats"."""
input uk_data_yield_stats_order_by {
  gross_yield: order_by
  last_update: order_by
  postcode: order_by
}

"""primary key columns input for table: uk_data.yield_stats"""
input uk_data_yield_stats_pk_columns_input {
  postcode: String!
}

"""
select columns of table "uk_data.yield_stats"
"""
enum uk_data_yield_stats_select_column {
  """column name"""
  gross_yield

  """column name"""
  last_update

  """column name"""
  postcode
}

"""
input type for updating data in table "uk_data.yield_stats"
"""
input uk_data_yield_stats_set_input {
  gross_yield: String
  last_update: timestamp
  postcode: String
}

"""
Streaming cursor of the table "uk_data_yield_stats"
"""
input uk_data_yield_stats_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uk_data_yield_stats_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uk_data_yield_stats_stream_cursor_value_input {
  gross_yield: String
  last_update: timestamp
  postcode: String
}

"""
update columns of table "uk_data.yield_stats"
"""
enum uk_data_yield_stats_update_column {
  """column name"""
  gross_yield

  """column name"""
  last_update

  """column name"""
  postcode
}

input uk_data_yield_stats_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: uk_data_yield_stats_set_input

  """filter the rows which have to be updated"""
  where: uk_data_yield_stats_bool_exp!
}
